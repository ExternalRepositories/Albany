#!/usr/bin/env python

"""
A convenient way to manage and wrap Albany building and
testing, including Trilinos building.
"""

import argparse, sys, os, doctest
from subprocess import Popen, PIPE

VERBOSE = False

"""
TODO:
 - How to allow user overrides?
 - allow multiple build types, IE: aeras + lcm
"""

ALBANY_BUILD_TYPES = \
{
    "basic"     : [
    ],
    "piro"      : [
        ("ALBANY_NEEDS_DAKOTA",  "ON")
    ],
    "lcm"       : [
        ("ALBANY_LCM", "ON")
    ],
    "muelu_slu"  : [
        ("ALBANY_NEEDS_MUELU",   "ON"),
        ("ALBANY_NEEDS_SUPERLU", "ON")
    ],
    "muelu_klu" : [
        ("ALBANY_NEEDS_MUELU",   "ON"),
        ("TRILINOS_ENABLE_KLU2", "ON")
    ],
}

JENKINS_ENVS = \
[
    ("TRILDIR", "$WORKSPACE/Trilinos"),
    ("TRILBUILDDIR", "$TRILDIR/build"),
    ("TRILINSTALLDIR", "$TRILBUILDDIR/install"),
    ("ALBDIR", "$WORKSPACE/Albany"),
    ("ALBBUILDDIR", "$ALBDIR/build"),
    ("TRIKOTADIR", "$TRILDIR/packages/TriKota"),

    # Warning: These not currently used
    ("TRILOUTDIR", "$WORKSPACE/Trilinos_out"),
    ("ALBOUTDIR", "$WORKSPACE/Albany_out"),
    ("DAKOUTDIR", "$WORKSPACE/Dakota_out"),
]

ALBANY_BUILD_MODES = \
{
    "release" : [
        ("ALBANY_BUILD_MODE",   "RELEASE"),
        ("TRILINOS_BUILD_MODE", "RELEASE")
    ],
    "debug"   : [
        ("ALBANY_BUILD_MODE",   "DEBUG"),
        ("TRILINOS_BUILD_MODE", "DEBUG"),
        ("BUILD_SHARED_LIBS",   "ON"),
        ("ALBANY_CXX_FLAGS",    "-ggdb"),
        ("TRILINOS_CXX_FLAGS",  "-ggdb")
    ]
}

###############################################################################
def expect(condition, error_msg):
###############################################################################
    if (not condition):
        raise SystemExit(error_msg)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n<WRAPPER> [-t <BUILD_TYPE>] [-m <BUILD_MODE>] [<OPTIONS>]

\033[1mEXAMPLE:\033[0m
  > source <Albany>/tools/env/<my-env-file>
  > build-trilinos -t lcm -m debug
  > make -j 4 install
  > export TRILINSTALLDIR=`pwd`/install
  > cd <Albany>/build
  > build-albany -t lcm -m debug
""",

description=description,

formatter_class=argparse.RawTextHelpFormatter
)
    # Variables: Albany build type
    # Release or debug
    parser.add_argument("-t", action="store", choices=(ALBANY_BUILD_TYPES.keys()),
                        dest="build_type", default="basic", help="Choose build type")

    parser.add_argument("-m", action="store", choices=("debug", "release"),
                        dest="build_mode", default="release", help="Choose build mode")

    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print shell commands as they are executed")

    parser.add_argument("mode", nargs="?", action="store", choices=("tril", "alb", "jenkins"),
                        default="jenkins", help="INTERNAL USE ONLY")

    args = parser.parse_args(args[1:])

    global VERBOSE
    VERBOSE = args.verbose

    return args.mode, args.build_type, args.build_mode

###############################################################################
def run_cmd(command):
###############################################################################
    if (VERBOSE):
        print command

    proc = Popen(command, shell=True)
    proc.communicate()
    status = proc.wait()
    expect(status == 0, "Test failed")

###############################################################################
def set_env_for_build(build_key, env_map):
###############################################################################
    env_settings = env_map[build_key]

    for env_var, env_setting in env_settings:
        os.environ[env_var] = env_setting

###############################################################################
def set_jenkins_env():
###############################################################################
    for env_var, env_setting in JENKINS_ENVS:
        # Set env after dereferencing vars
        components = [os.environ[item[1:]] if item.startswith('$') else item for item in env_setting.split("/")]
        os.environ[env_var] = "/".join(components)

###############################################################################
def perform_test(mode, build_type, build_mode):
###############################################################################
    set_env_for_build(build_type, ALBANY_BUILD_TYPES)
    set_env_for_build(build_mode, ALBANY_BUILD_MODES)

    exe_dir = os.path.dirname(__file__)

    if (mode == "jenkins"):
        set_jenkins_env()

        test_script = os.path.join(exe_dir, "test_scripts", "test-engine")
        run_cmd(test_script)

    elif (mode == "tril"):
        tril_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-trilinos")
        run_cmd(tril_fragment)

    elif (mode == "alb"):
        alb_fragment = os.path.join(exe_dir, "build_scripts", "cmake_fragments", "do-cmake-albany")
        run_cmd(alb_fragment)

    else:
        expect(False, "Unrecognized mode '%s'" % mode)

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        doctest.testmod()
        return

    mode, build_type, build_mode = parse_command_line(sys.argv, description)

    perform_test(mode, build_type, build_mode)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
