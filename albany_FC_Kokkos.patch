diff --git a/src/AMP/evaluators/PhaseResidual.hpp b/src/AMP/evaluators/PhaseResidual.hpp
index 9ac98fa..140fb34 100644
--- a/src/AMP/evaluators/PhaseResidual.hpp
+++ b/src/AMP/evaluators/PhaseResidual.hpp
@@ -64,8 +64,8 @@ private:
 
   bool enable_transient_;
   std::string Temperature_Name_;
-  Intrepid2::FieldContainer<ScalarT> term1_;
-  Intrepid2::FieldContainer<ScalarT> term2_;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> term1_;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> term2_;
 
 };
 }
diff --git a/src/AMP/problems/PhaseProblem.hpp b/src/AMP/problems/PhaseProblem.hpp
index 9e10432..0c582d4 100644
--- a/src/AMP/problems/PhaseProblem.hpp
+++ b/src/AMP/problems/PhaseProblem.hpp
@@ -130,15 +130,15 @@ Albany::PhaseProblem::constructEvaluators(
 
   std::string eb_name = meshSpecs.ebName;
  
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepid_basis = Albany::getIntrepid2Basis(*elem_top);
 
   RCP<shards::CellTopology> elem_type = 
     rcp(new shards::CellTopology (elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cub_factory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cub_factory;
 
-  RCP <Intrepid2::Cubature<RealType> > elem_cubature = 
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > elem_cubature = 
     cub_factory.create(*elem_type, meshSpecs.cubatureDegree);
 
   const int workset_size = meshSpecs.worksetSize;
diff --git a/src/ATO/ATO_Solver.cpp b/src/ATO/ATO_Solver.cpp
index 5b2f5a8..1819398 100644
--- a/src/ATO/ATO_Solver.cpp
+++ b/src/ATO/ATO_Solver.cpp
@@ -382,7 +382,7 @@ ATO::Solver::evalModel(const InArgs& inArgs,
 
     if(numColumns > 0){
       // collect homogenized values
-      Intrepid2::FieldContainer<RealType> Cvals(numColumns,numColumns);
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> Cvals(numColumns,numColumns);
       for(int i=0; i<numColumns; i++){
         Teuchos::RCP<const Epetra_Vector> g = hs.homogenizationProblems[i].responses_out->get_g(hs.responseIndex);
         for(int j=0; j<numColumns; j++){
diff --git a/src/ATO/evaluators/ATO_HomogenizedConstantsResponse.hpp b/src/ATO/evaluators/ATO_HomogenizedConstantsResponse.hpp
index ca404e3..289340a 100644
--- a/src/ATO/evaluators/ATO_HomogenizedConstantsResponse.hpp
+++ b/src/ATO/evaluators/ATO_HomogenizedConstantsResponse.hpp
@@ -126,7 +126,7 @@ namespace ATO
     PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
     Teuchos::RCP< PHX::Tag<ScalarT> > objective_tag;
 
-    Intrepid2::FieldContainer<int> components;
+    Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device> components;
     int tensorRank;
 
     RealType local_measure;
diff --git a/src/ATO/evaluators/ATO_HomogenizedConstantsResponse_Def.hpp b/src/ATO/evaluators/ATO_HomogenizedConstantsResponse_Def.hpp
index 6a43cd6..f60a1f0 100644
--- a/src/ATO/evaluators/ATO_HomogenizedConstantsResponse_Def.hpp
+++ b/src/ATO/evaluators/ATO_HomogenizedConstantsResponse_Def.hpp
@@ -175,7 +175,7 @@ evaluateFields(typename Traits::EvalData workset)
       } else 
       if( tensorRank == 2 ){
         int nterms = components.dimension(0);
-        Intrepid2::FieldContainer<int>& c = components;
+        Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device>& c = components;
         for(std::size_t ic=0; ic<nterms; ic++){
           s = -field(cell,qp,c(ic,0),c(ic,1)) * weights(cell,qp);
           this->local_response(cell,ic) += s;
diff --git a/src/ATO/evaluators/ATO_ScaleVector.hpp b/src/ATO/evaluators/ATO_ScaleVector.hpp
index 7841f93..3d59341 100644
--- a/src/ATO/evaluators/ATO_ScaleVector.hpp
+++ b/src/ATO/evaluators/ATO_ScaleVector.hpp
@@ -52,7 +52,7 @@ private:
   std::string homogenizedConstantsName;
   int cellForcingColumn;
 
-  Intrepid2::FieldContainer<RealType> subTensor;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> subTensor;
 };
 }
 
diff --git a/src/ATO/evaluators/ATO_ScaleVector_Def.hpp b/src/ATO/evaluators/ATO_ScaleVector_Def.hpp
index d3a9647..785b17d 100644
--- a/src/ATO/evaluators/ATO_ScaleVector_Def.hpp
+++ b/src/ATO/evaluators/ATO_ScaleVector_Def.hpp
@@ -87,7 +87,7 @@ evaluateFields(typename Traits::EvalData workset)
 
     std::string K(homogenizedConstantsName);
 
-    Intrepid2::FieldContainer<RealType> Kval(numDims,numDims);
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> Kval(numDims,numDims);
     for(int i=0; i<numDims; i++)
       for(int j=i; j<numDims; j++){
         if( j>=i){
diff --git a/src/ATO/evaluators/ATO_Stress.hpp b/src/ATO/evaluators/ATO_Stress.hpp
index 8d7c774..8f17fdd 100644
--- a/src/ATO/evaluators/ATO_Stress.hpp
+++ b/src/ATO/evaluators/ATO_Stress.hpp
@@ -54,7 +54,7 @@ private:
   std::string homogenizedConstantsName;
   int cellForcingColumn;
 
-  Intrepid2::FieldContainer<RealType> subTensor;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> subTensor;
 };
 }
 
diff --git a/src/ATO/problems/ATO_OptimizationProblem.cpp b/src/ATO/problems/ATO_OptimizationProblem.cpp
index 00f2e52..3005855 100644
--- a/src/ATO/problems/ATO_OptimizationProblem.cpp
+++ b/src/ATO/problems/ATO_OptimizationProblem.cpp
@@ -70,8 +70,8 @@ ComputeVolume(const double* p, double& v, double* dvdp)
     const Albany::WorksetArray<Teuchos::ArrayRCP<Teuchos::ArrayRCP<double*> > >::type&
           coords = disc->getCoords();
   
-    Intrepid2::FieldContainer<double> coordCon;
-    Intrepid2::FieldContainer<double> topoVals;
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> coordCon;
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> topoVals;
     std::vector<double> weights;
     std::vector<std::vector<double> > refPoints;
   
@@ -289,7 +289,7 @@ setupTopOpt( Teuchos::ArrayRCP<Teuchos::RCP<Albany::MeshSpecsStruct> >  _meshSpe
   basisAtQPs.resize(numPhysSets);
   for(int i=0; i<numPhysSets; i++){
     cellTypes[i] = Teuchos::rcp(new shards::CellTopology (&meshSpecs[i]->ctd));
-    Intrepid2::DefaultCubatureFactory<double> cubFactory;
+    Intrepid2::DefaultCubatureFactory<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > cubFactory;
     cubatures[i] = cubFactory.create(*(cellTypes[i]), meshSpecs[i]->cubatureDegree);
     intrepidBasis[i] = Albany::getIntrepid2Basis(meshSpecs[i]->ctd);
 
@@ -365,9 +365,9 @@ ATO::OptimizationProblem::InitTopOpt()
   Albany::StateArrayVec& dest = stateArrays.elemStateArrays;
 
   int numWorksets = wsElNodeEqID.size();
-  Intrepid2::FieldContainer<double> jacobian;
-  Intrepid2::FieldContainer<double> jacobian_det;
-  Intrepid2::FieldContainer<double> coordCon;
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> jacobian_det;
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> coordCon;
 
   weighted_measure.resize(numWorksets);
   for(int ws=0; ws<numWorksets; ws++){
diff --git a/src/ATO/problems/ATO_OptimizationProblem.hpp b/src/ATO/problems/ATO_OptimizationProblem.hpp
index d3dcadf..ea67cd7 100644
--- a/src/ATO/problems/ATO_OptimizationProblem.hpp
+++ b/src/ATO/problems/ATO_OptimizationProblem.hpp
@@ -44,15 +44,15 @@ public virtual Albany::AbstractProblem {
    Albany::StateManager* stateMgr;
 
    std::vector<Teuchos::RCP<shards::CellTopology> > cellTypes;
-   std::vector<Teuchos::RCP<Intrepid2::Cubature<double> > > cubatures;
-   std::vector<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+   std::vector<Teuchos::RCP<Intrepid2::Cubature<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout,PHX::Device> > > > cubatures;
+   std::vector<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
      intrepidBasis;
 
 
-   std::vector<Intrepid2::FieldContainer<double> > refPoints;
-   std::vector<Intrepid2::FieldContainer<double> > refWeights;
-   std::vector<Intrepid2::FieldContainer<double> > basisAtQPs;
-   std::vector<Intrepid2::FieldContainer<double> > weighted_measure;
+   std::vector<Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > refPoints;
+   std::vector<Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > refWeights;
+   std::vector<Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > basisAtQPs;
+   std::vector<Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > weighted_measure;
 
    Teuchos::RCP<Epetra_Vector> overlapVec;
    Teuchos::RCP<Epetra_Vector> localVec;
diff --git a/src/ATO/problems/LinearElasticityModalProblem.cpp b/src/ATO/problems/LinearElasticityModalProblem.cpp
index b9ddb59..b851ec0 100644
--- a/src/ATO/problems/LinearElasticityModalProblem.cpp
+++ b/src/ATO/problems/LinearElasticityModalProblem.cpp
@@ -192,8 +192,8 @@ Albany::LinearElasticityModalProblem::getValidProblemParameters() const
 
 void
 Albany::LinearElasticityModalProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/ATO/problems/LinearElasticityModalProblem.hpp b/src/ATO/problems/LinearElasticityModalProblem.hpp
index 4fc2943..846385e 100644
--- a/src/ATO/problems/LinearElasticityModalProblem.hpp
+++ b/src/ATO/problems/LinearElasticityModalProblem.hpp
@@ -61,8 +61,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_) const;
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_) const;
 
   private:
 
@@ -94,8 +94,8 @@ namespace Albany {
 
     Teuchos::RCP<Albany::Layouts> dl;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState;
 
 //    Teuchos::RCP<QCAD::MaterialDatabase> material_db_;
 
@@ -143,14 +143,14 @@ Albany::LinearElasticityModalProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/ATO/problems/LinearElasticityProblem.cpp b/src/ATO/problems/LinearElasticityProblem.cpp
index e9e7f6e..e05a04d 100644
--- a/src/ATO/problems/LinearElasticityProblem.cpp
+++ b/src/ATO/problems/LinearElasticityProblem.cpp
@@ -196,8 +196,8 @@ Albany::LinearElasticityProblem::getValidProblemParameters() const
 
 void
 Albany::LinearElasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/ATO/problems/LinearElasticityProblem.hpp b/src/ATO/problems/LinearElasticityProblem.hpp
index 11752d0..5276d9b 100644
--- a/src/ATO/problems/LinearElasticityProblem.hpp
+++ b/src/ATO/problems/LinearElasticityProblem.hpp
@@ -61,8 +61,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_) const;
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_) const;
 
   private:
 
@@ -94,8 +94,8 @@ namespace Albany {
 
     Teuchos::RCP<Albany::Layouts> dl;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState;
 
 //    Teuchos::RCP<QCAD::MaterialDatabase> material_db_;
 
@@ -143,14 +143,14 @@ Albany::LinearElasticityProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/ATO/problems/PoissonsEquation.cpp b/src/ATO/problems/PoissonsEquation.cpp
index 62e5cee..84a1bda 100644
--- a/src/ATO/problems/PoissonsEquation.cpp
+++ b/src/ATO/problems/PoissonsEquation.cpp
@@ -157,8 +157,8 @@ Albany::PoissonsEquationProblem::getValidProblemParameters() const
 
 void
 Albany::PoissonsEquationProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/ATO/problems/PoissonsEquation.hpp b/src/ATO/problems/PoissonsEquation.hpp
index b0314e2..94868b1 100644
--- a/src/ATO/problems/PoissonsEquation.hpp
+++ b/src/ATO/problems/PoissonsEquation.hpp
@@ -61,8 +61,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_) const;
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_) const;
 
   private:
 
@@ -94,8 +94,8 @@ namespace Albany {
 
     Teuchos::RCP<Albany::Layouts> dl;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState;
 
   };
 
@@ -139,14 +139,14 @@ Albany::PoissonsEquationProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/ATO/utils/ATO_Integrator.hpp b/src/ATO/utils/ATO_Integrator.hpp
index 1960506..4628686 100644
--- a/src/ATO/utils/ATO_Integrator.hpp
+++ b/src/ATO/utils/ATO_Integrator.hpp
@@ -37,19 +37,19 @@ class Integrator
 
  public:
   Integrator(Teuchos::RCP<shards::CellTopology> celltype,
-             Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > basis);
+             Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > basis);
   virtual ~Integrator(){};
 
   template<typename C>
   void getMeasure(RealType& measure, 
-                 const Intrepid2::FieldContainer<RealType>& coordCon, 
-                 const Intrepid2::FieldContainer<RealType>& topoVals,
+                 const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
+                 const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals,
                  RealType zeroVal,
                  C comparison);
 
   void getCubature(std::vector<std::vector<RealType> >& refPoints, std::vector<RealType>& weights, 
-                   const Intrepid2::FieldContainer<RealType>& topoVals, 
-                   const Intrepid2::FieldContainer<RealType>& coordCon, 
+                   const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+                   const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
                    RealType zeroVal);
 
  private:
@@ -79,13 +79,13 @@ class Integrator
   template<typename C>
   void getSurfaceTris(std::vector< Vector3D >& points,
                       std::vector< Tri >& tris,
-                      const Intrepid2::FieldContainer<RealType>& topoVals, 
-                      const Intrepid2::FieldContainer<RealType>& coordCon, 
+                      const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+                      const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
                       RealType zeroVal, C comparison);
 
   template<typename C>
   bool included(Teuchos::RCP<MiniPoly> poly,
-                const Intrepid2::FieldContainer<RealType>& topoVals,
+                const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals,
                 RealType zeroVal, C compare);
 
   void trisFromPoly(std::vector< Vector3D >& points,
@@ -105,7 +105,7 @@ class Integrator
                    const Vector3D& c2,
                    const Vector3D& c3);
 
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > basis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > basis;
 
 };
 
@@ -114,26 +114,26 @@ class SubIntegrator
 
  public:
   SubIntegrator(Teuchos::RCP<shards::CellTopology> celltype,
-                Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > basis,
+                Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > basis,
                 uint maxRefs, RealType maxErr);
   virtual ~SubIntegrator(){};
 
   void getMeasure(RealType& measure, 
-                  const Intrepid2::FieldContainer<RealType>& coordCon, 
-                  const Intrepid2::FieldContainer<RealType>& topoVals,
+                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
+                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals,
                   RealType zeroVal,
                   Sense sense);
 
   void getMeasure(RealType& measure, 
-                  Intrepid2::FieldContainer<RealType>& dMdtopo,
-                  const Intrepid2::FieldContainer<RealType>& coordCon, 
-                  const Intrepid2::FieldContainer<RealType>& topoVals,
+                  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& dMdtopo,
+                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
+                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals,
                   RealType zeroVal,
                   Sense sense);
 
   void getCubature(std::vector<std::vector<RealType> >& refPoints, std::vector<RealType>& weights, 
-                   const Intrepid2::FieldContainer<RealType>& topoVals, 
-                   const Intrepid2::FieldContainer<RealType>& coordCon, 
+                   const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+                   const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
                    RealType zeroVal);
 
  private:
@@ -159,10 +159,10 @@ class SubIntegrator
   V Volume(Simplex<V,P>& simplex);
 
   template <typename N, typename V, typename P>
-  V Volume(Simplex<V,P>& simplex, const Intrepid2::FieldContainer<N>& coordCon);
+  V Volume(Simplex<V,P>& simplex, const Intrepid2::FieldContainer_Kokkos<N, PHX::Layout, PHX::Device>& coordCon);
 
   template <typename N, typename V, typename P>
-  void Project( const Intrepid2::FieldContainer<N>& topoVals, 
+  void Project( const Intrepid2::FieldContainer_Kokkos<N, PHX::Layout, PHX::Device>& topoVals, 
                 std::vector<Simplex<V,P> >& implicitPolys);
 
   template<typename C, typename V, typename P>
@@ -173,16 +173,16 @@ class SubIntegrator
   void SortMap(const std::vector<typename Vector3D<P>::Type>& points, std::vector<int>& map);
 
   template<typename V, typename P>
-  void getValues( Intrepid2::FieldContainer<V>& Nvals, const Intrepid2::FieldContainer<P>& evalPoints);
+  void getValues( Intrepid2::FieldContainer_Kokkos<V, PHX::Layout, PHX::Device>& Nvals, const Intrepid2::FieldContainer_Kokkos<P, PHX::Layout, PHX::Device>& evalPoints);
 
   template<typename V, typename P>
   void Refine( std::vector<Simplex<V,P> >& inpolys,
                std::vector<Simplex<V,P> >& outpolys);
 
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > basis;
-  Teuchos::RCP<Intrepid2::Basis<DFadType, Intrepid2::FieldContainer<DFadType> > > DFadBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > basis;
+  Teuchos::RCP<Intrepid2::Basis<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> > > DFadBasis;
 
-  Intrepid2::FieldContainer<RealType> parentCoords;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> parentCoords;
 
   std::vector< std::vector<Simplex<RealType,RealType> > > refinement;
   std::vector< std::vector<Simplex<DFadType,DFadType> > > DFadRefinement;
diff --git a/src/ATO/utils/ATO_Integrator_Def.hpp b/src/ATO/utils/ATO_Integrator_Def.hpp
index 6b2d3a8..7b8a714 100644
--- a/src/ATO/utils/ATO_Integrator_Def.hpp
+++ b/src/ATO/utils/ATO_Integrator_Def.hpp
@@ -15,8 +15,8 @@
 template<typename C>
 void ATO::Integrator::getMeasure(
      RealType& measure, 
-     const Intrepid2::FieldContainer<RealType>& topoVals, 
-     const Intrepid2::FieldContainer<RealType>& coordCon, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
      const RealType zeroVal, const C compare)
 //******************************************************************************//
 {
@@ -32,7 +32,7 @@ void ATO::Integrator::getMeasure(
     // if there are topoVals that are exactly equal to or very near zeroVal, 
     // there will be all sorts of special cases.  If necessary, nudge values
     // away from zeroVal.  
-    Intrepid2::FieldContainer<RealType> vals(topoVals);
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> vals(topoVals);
     int nvals = vals.dimension(0);
     for(int i=0; i<nvals; i++){
       if( fabs(vals(i) - zeroVal) < 1e-9 ) vals(i) = zeroVal + 1e-9;
@@ -55,8 +55,8 @@ void ATO::Integrator::getMeasure(
 //******************************************************************************//
 void ATO::SubIntegrator::getMeasure(
      RealType& measure, 
-     const Intrepid2::FieldContainer<RealType>& topoVals, 
-     const Intrepid2::FieldContainer<RealType>& coordCon, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
      const RealType zeroVal, Sense sense)
 //******************************************************************************//
 {
@@ -103,9 +103,9 @@ void ATO::SubIntegrator::getMeasure(
 //******************************************************************************//
 void ATO::SubIntegrator::getMeasure(
      RealType& measure, 
-     Intrepid2::FieldContainer<RealType>& dMdtopo,
-     const Intrepid2::FieldContainer<RealType>& topoVals, 
-     const Intrepid2::FieldContainer<RealType>& coordCon, 
+     Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& dMdtopo,
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
      const RealType zeroVal, Sense sense)
 //******************************************************************************//
 {
@@ -116,8 +116,8 @@ void ATO::SubIntegrator::getMeasure(
 
   uint nTopoVals = topoVals.size();
   DFadType Mfad;
-  Intrepid2::FieldContainer<DFadType> Tfad(nTopoVals);
-  Intrepid2::FieldContainer<RealType> Tval(nTopoVals);
+  Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> Tfad(nTopoVals);
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> Tval(nTopoVals);
   for(uint i=0; i<nTopoVals; i++){
     Tval(i) = Sacado::ScalarValue<RealType>::eval(topoVals(i));
     Tfad(i) = DFadType(nTopoVals, i, Tval(i));
@@ -148,7 +148,13 @@ void ATO::SubIntegrator::getMeasure(
  
     volumeChange = fabs(measure - newVolume);
     measure = newVolume.val();
-    if(newVolume.size()) dMdtopo.setValues(newVolume.dx(),newVolume.size());
+    if(newVolume.size()) {
+    //IrinaD TOCHECK
+     dMdtopo.resize(newVolume.size());
+     for (int i=0;i<newVolume.size();i++)
+      dMdtopo[i]=newVolume.dx(i);
+    }
+   //dMdtopo.setValues(newVolume.dx(),newVolume.size());
   
     level++;
 
@@ -292,7 +298,7 @@ void ATO::SubIntegrator::Refine(
 //******************************************************************************//
 template<typename N, typename V, typename P>
 void ATO::SubIntegrator::Project(
-     const Intrepid2::FieldContainer<N>& topoVals, 
+     const Intrepid2::FieldContainer_Kokkos<N, PHX::Layout, PHX::Device>& topoVals, 
      std::vector<Simplex<V,P> >& implicitPolys)
 //******************************************************************************//
 {
@@ -300,8 +306,8 @@ void ATO::SubIntegrator::Project(
   int numNodes = basis->getCardinality();
   int nPoints = implicitPolys[0].points.size();
 
-  Intrepid2::FieldContainer<V> Nvals(numNodes, nPoints);
-  Intrepid2::FieldContainer<P> evalPoints(nPoints, nDims);
+  Intrepid2::FieldContainer_Kokkos<V, PHX::Layout, PHX::Device> Nvals(numNodes, nPoints);
+  Intrepid2::FieldContainer_Kokkos<P, PHX::Layout, PHX::Device> evalPoints(nPoints, nDims);
 
   typename std::vector<Simplex<V,P> >::iterator it;
   for(it=implicitPolys.begin(); it!=implicitPolys.end(); it++){
@@ -461,15 +467,15 @@ void ATO::SubIntegrator::Dice(
 namespace ATO {
 //******************************************************************************//
 template<>
-void SubIntegrator::getValues<>( Intrepid2::FieldContainer<RealType>& Nvals,
-                                 const Intrepid2::FieldContainer<RealType>& evalPoints)
+void SubIntegrator::getValues<>( Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& Nvals,
+                                 const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& evalPoints)
 //******************************************************************************//
 { basis->getValues(Nvals, evalPoints, Intrepid2::OPERATOR_VALUE); }
 
 //******************************************************************************//
 template<>
-void SubIntegrator::getValues<>( Intrepid2::FieldContainer<DFadType>& Nvals,
-                                 const Intrepid2::FieldContainer<DFadType>& evalPoints)
+void SubIntegrator::getValues<>( Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device>& Nvals,
+                                 const Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device>& evalPoints)
 //******************************************************************************//
 { DFadBasis->getValues(Nvals, evalPoints, Intrepid2::OPERATOR_VALUE); }
 }
@@ -477,23 +483,23 @@ void SubIntegrator::getValues<>( Intrepid2::FieldContainer<DFadType>& Nvals,
 //******************************************************************************//
 template<typename N, typename V, typename P>
 V ATO::SubIntegrator::Volume(Simplex<V,P>& simplex,
-                             const Intrepid2::FieldContainer<N>& coordCon)
+                             const Intrepid2::FieldContainer_Kokkos<N, PHX::Layout, PHX::Device>& coordCon)
 //******************************************************************************//
 {
   int numNodes = basis->getCardinality();
   int nPoints = simplex.points.size();
-  Intrepid2::FieldContainer<P> evalPoints(nPoints, nDims);
+  Intrepid2::FieldContainer_Kokkos<P, PHX::Layout, PHX::Device> evalPoints(nPoints, nDims);
 
   for(int i=0; i<nPoints; i++)
     for(uint j=0; j<nDims; j++)
       evalPoints(i, j) = simplex.points[i](j);
 
 
-  Intrepid2::FieldContainer<P> Nvals(numNodes, nPoints);
+  Intrepid2::FieldContainer_Kokkos<P, PHX::Layout, PHX::Device> Nvals(numNodes, nPoints);
   getValues<V,P>(Nvals, evalPoints);
 
 
-  Intrepid2::FieldContainer<P> pnts(nPoints, nDims);
+  Intrepid2::FieldContainer_Kokkos<P, PHX::Layout, PHX::Device> pnts(nPoints, nDims);
   for(int i=0; i<nPoints; i++)
     for(uint j=0; j<nDims; j++){
       pnts(i,j) = 0.0;
@@ -687,8 +693,8 @@ template<typename C>
 void ATO::Integrator::getSurfaceTris(
             std::vector< Vector3D >& points,
             std::vector< Tri >& tris,
-            const Intrepid2::FieldContainer<RealType>& topoVals, 
-            const Intrepid2::FieldContainer<RealType>& coordCon, 
+            const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
+            const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
             RealType zeroVal, C compare)
 //******************************************************************************//
 {
@@ -781,7 +787,7 @@ void ATO::Integrator::getSurfaceTris(
 template<typename C>
 bool ATO::Integrator::included(
      Teuchos::RCP<MiniPoly> poly,
-     const Intrepid2::FieldContainer<RealType>& topoVals, 
+     const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, 
      RealType zeroVal, C compare)
 //******************************************************************************//
 {
@@ -949,8 +955,8 @@ RealType ATO::Integrator::getTriMeasure(
 //******************************************************************************//
 void ATO::Integrator::getCubature(std::vector<std::vector<RealType> >& refPoints, 
                                   std::vector<RealType>& weights, 
-                                  const Intrepid2::FieldContainer<RealType>& coordCon, 
-                                  const Intrepid2::FieldContainer<RealType>& topoVals, RealType zeroVal)
+                                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& coordCon, 
+                                  const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& topoVals, RealType zeroVal)
 //******************************************************************************//
 {
 }
@@ -979,7 +985,7 @@ void ATO::Integrator::addCubature(std::vector<std::vector<RealType> >& refPoints
 //******************************************************************************//
 ATO::Integrator::
 Integrator(Teuchos::RCP<shards::CellTopology> _celltype,
-Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > _basis):
+Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > _basis):
    cellTopology(_celltype),
    basis(_basis){}
 //******************************************************************************//
@@ -987,7 +993,7 @@ Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
 //******************************************************************************//
 ATO::SubIntegrator::
 SubIntegrator(Teuchos::RCP<shards::CellTopology> _celltype,
-Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > _basis,
+Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > _basis,
 uint _maxRefs, RealType _maxErr):
    cellTopology(_celltype),
    basis(_basis),
@@ -1002,9 +1008,9 @@ uint _maxRefs, RealType _maxErr):
   parentCoords.resize(basis->getCardinality(),nDims);
   
   try {
-    Teuchos::RCP<Intrepid2::DofCoordsInterface<Intrepid2::FieldContainer<RealType> > > 
+    Teuchos::RCP<Intrepid2::DofCoordsInterface<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > 
       coords_interface = 
-       Teuchos::rcp_dynamic_cast<Intrepid2::DofCoordsInterface<Intrepid2::FieldContainer<RealType> > >
+       Teuchos::rcp_dynamic_cast<Intrepid2::DofCoordsInterface<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
         (basis,true);
   
     coords_interface->getDofCoords(parentCoords);
@@ -1024,7 +1030,7 @@ uint _maxRefs, RealType _maxErr):
   if( cellTopology->getBaseName() == shards::getCellTopologyData< shards::Tetrahedron<4> >()->name ){
 
     DFadBasis = Teuchos::rcp(
-      new Intrepid2::Basis_HGRAD_TET_C1_FEM<DFadType, Intrepid2::FieldContainer<DFadType> >() );
+      new Intrepid2::Basis_HGRAD_TET_C1_FEM<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> >() );
 
     int nVerts = topo.vertex_count;
 
@@ -1045,7 +1051,7 @@ uint _maxRefs, RealType _maxErr):
   if( cellTopology->getBaseName() == shards::getCellTopologyData< shards::Hexahedron<8> >()->name ){
 
     DFadBasis = Teuchos::rcp(
-     new Intrepid2::Basis_HGRAD_HEX_C1_FEM<DFadType, Intrepid2::FieldContainer<DFadType> >() );
+     new Intrepid2::Basis_HGRAD_HEX_C1_FEM<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> >() );
 
     Vector3D<RealType>::Type bodyCenter(0.0, 0.0, 0.0);
 
@@ -1081,12 +1087,12 @@ uint _maxRefs, RealType _maxErr):
 
     if( cellTopology->getName() == shards::getCellTopologyData< shards::Quadrilateral<4> >()->name ){
       DFadBasis = Teuchos::rcp(
-       new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<DFadType, Intrepid2::FieldContainer<DFadType> >() );
+       new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> >() );
     } else 
     if( cellTopology->getName() == shards::getCellTopologyData< shards::Quadrilateral<8> >()->name 
      || cellTopology->getName() == shards::getCellTopologyData< shards::Quadrilateral<9> >()->name ){
       DFadBasis = Teuchos::rcp(
-       new Intrepid2::Basis_HGRAD_QUAD_C2_FEM<DFadType, Intrepid2::FieldContainer<DFadType> >() );
+       new Intrepid2::Basis_HGRAD_QUAD_C2_FEM<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> >() );
     }
 
     const int nVerts = topo.vertex_count;
@@ -1115,7 +1121,7 @@ uint _maxRefs, RealType _maxErr):
   if( cellTopology->getBaseName() == shards::getCellTopologyData< shards::Triangle<3> >()->name ){
 
     DFadBasis = Teuchos::rcp(
-     new Intrepid2::Basis_HGRAD_TRI_C1_FEM<DFadType, Intrepid2::FieldContainer<DFadType> >() );
+     new Intrepid2::Basis_HGRAD_TRI_C1_FEM<DFadType, Intrepid2::FieldContainer_Kokkos<DFadType, PHX::Layout, PHX::Device> >() );
 
     const int nVerts = topo.vertex_count;
     Simplex<RealType,RealType> tri(nVerts);
diff --git a/src/Aeras/evaluators/Aeras_ComputeBasisFunctions.hpp b/src/Aeras/evaluators/Aeras_ComputeBasisFunctions.hpp
index 30e02e2..9158700 100644
--- a/src/Aeras/evaluators/Aeras_ComputeBasisFunctions.hpp
+++ b/src/Aeras/evaluators/Aeras_ComputeBasisFunctions.hpp
@@ -83,8 +83,8 @@ private:
          
   const double earthRadius;
   void div_check(const int spatialDim, const int numelements) const;
-  void spherical_divergence(Intrepid2::FieldContainer<MeshScalarT> &,
-                            const Intrepid2::FieldContainer<MeshScalarT> &,
+  void spherical_divergence(Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> &,
+                            const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> &,
                             const int e,
                             const double rrearth=1) const;
   void initialize_grad(Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> &) const;
diff --git a/src/Aeras/evaluators/Aeras_ComputeBasisFunctions_Def.hpp b/src/Aeras/evaluators/Aeras_ComputeBasisFunctions_Def.hpp
index 5338bb4..ee80842 100644
--- a/src/Aeras/evaluators/Aeras_ComputeBasisFunctions_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_ComputeBasisFunctions_Def.hpp
@@ -438,16 +438,16 @@ evaluateFields(typename Traits::EvalData workset)
                                "to call this function for a higher order element. \n"); 
     Intrepid2::CellTools<RealType>::setJacobian(jacobian, refPoints, coordVec, *cellType);
   } else {
-    Intrepid2::FieldContainer<MeshScalarT>  phi(numQPs,spatialDim);
-    Intrepid2::FieldContainer<MeshScalarT> dphi(numQPs,spatialDim,basisDim);
-    Intrepid2::FieldContainer<MeshScalarT> norm(numQPs);
-    Intrepid2::FieldContainer<MeshScalarT> sinL(numQPs);
-    Intrepid2::FieldContainer<MeshScalarT> cosL(numQPs);
-    Intrepid2::FieldContainer<MeshScalarT> sinT(numQPs);
-    Intrepid2::FieldContainer<MeshScalarT> cosT(numQPs);
-    Intrepid2::FieldContainer<MeshScalarT>   D1(numQPs,basisDim,spatialDim);
-    Intrepid2::FieldContainer<MeshScalarT>   D2(numQPs,spatialDim,spatialDim);
-    Intrepid2::FieldContainer<MeshScalarT>   D3(numQPs,basisDim,spatialDim);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>  phi(numQPs,spatialDim);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> dphi(numQPs,spatialDim,basisDim);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> norm(numQPs);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> sinL(numQPs);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> cosL(numQPs);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> sinT(numQPs);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> cosT(numQPs);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D1(numQPs,basisDim,spatialDim);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D2(numQPs,spatialDim,spatialDim);
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D3(numQPs,basisDim,spatialDim);
     
     for (int e = 0; e<numelements;      ++e) {
       for (int v = 0; v<numNodes;      ++v) {
@@ -585,16 +585,16 @@ evaluateFields(typename Traits::EvalData workset)
   /////////////no generality.
   if(0){
   
-  Intrepid2::FieldContainer<MeshScalarT>   Q(4);
-  Intrepid2::FieldContainer<MeshScalarT>   C(3,4);
-  Intrepid2::FieldContainer<MeshScalarT>   xx(3);
-  Intrepid2::FieldContainer<MeshScalarT>   CartC(3);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   Q(4);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   C(3,4);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   xx(3);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   CartC(3);
   
-  Intrepid2::FieldContainer<MeshScalarT>   dd(4,2);
-  Intrepid2::FieldContainer<MeshScalarT>   D1(2,3);
-  Intrepid2::FieldContainer<MeshScalarT>   D2(3,3);
-  Intrepid2::FieldContainer<MeshScalarT>   D3(3,2);
-  Intrepid2::FieldContainer<MeshScalarT>   D4(3,2);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   dd(4,2);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D1(2,3);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D2(3,3);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D3(3,2);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>   D4(3,2);
   
   for (int e = 0; e<numelements; ++e) {
     
@@ -817,7 +817,7 @@ void ComputeBasisFunctions<EvalT, Traits>::
 initialize_grad(Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device > &grad_at_quadrature_points) const
 {
   const unsigned N = static_cast<unsigned>(std::floor(std::sqrt(numQPs)+.1));
-  Intrepid2::FieldContainer<RealType> dLdx(N,N); dLdx.initialize(); 
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> dLdx(N,N); dLdx.initialize(); 
 
   for (unsigned m=0; m<N; ++m) {
     for (unsigned n=0; n<N; ++n) {
@@ -843,8 +843,8 @@ initialize_grad(Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Dev
 
 template<typename EvalT, typename Traits>
 void ComputeBasisFunctions<EvalT, Traits>::
-spherical_divergence (Intrepid2::FieldContainer<MeshScalarT> &div_v,
-                      const Intrepid2::FieldContainer<MeshScalarT> &v_lambda_theta,
+spherical_divergence (Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> &div_v,
+                      const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> &v_lambda_theta,
                       const int e,
                       const double rrearth) const
 {
@@ -892,7 +892,7 @@ div_check(const int spatialDim, const int numelements) const
     for (int e = 0; e<numelements;      ++e) {
       static const MeshScalarT DIST_THRESHOLD = 1.0e-6;
 
-      Intrepid2::FieldContainer<MeshScalarT>  phi(numQPs,spatialDim);
+      Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>  phi(numQPs,spatialDim);
       phi.initialize(); 
       for (int q = 0; q<numQPs;         ++q) 
         for (int d = 0; d<spatialDim;   ++d) 
@@ -900,7 +900,7 @@ div_check(const int spatialDim, const int numelements) const
             phi(q,d) += earthRadius*coordVec(e,v,d) * val_at_cub_points(v,q);
 
       std::vector<MeshScalarT> divergence_v(numQPs);
-      Intrepid2::FieldContainer<MeshScalarT> v_lambda_theta(numQPs,2);
+      Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> v_lambda_theta(numQPs,2);
       switch (c) {
         case 0: {
           //  Example copied from homme, the climate code, from function divergence_sphere()
@@ -1001,7 +1001,7 @@ div_check(const int spatialDim, const int numelements) const
       }
       
 
-      Intrepid2::FieldContainer<MeshScalarT> div_v(numQPs);
+      Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> div_v(numQPs);
       spherical_divergence(div_v, v_lambda_theta, e, rrearth);
       for (int q = 0; q<numQPs;          ++q) {
         if (DIST_THRESHOLD<std::abs(div_v(q)/rrearth - divergence_v[q])) 
diff --git a/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid.hpp b/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid.hpp
index 08d541a..ac78fbc 100644
--- a/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid.hpp
+++ b/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid.hpp
@@ -40,17 +40,17 @@ public:
 
 private:
 
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
-  Intrepid2::FieldContainer<RealType>    refPoints;
-  Intrepid2::FieldContainer<RealType>    refWeights;
-  Intrepid2::FieldContainer<RealType>    grad_at_cub_points;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    grad_at_cub_points;
 
   // vorticity only returns the component in the radial direction
-  //void get_vorticity(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-  //    std::size_t cell, std::size_t level, Intrepid2::FieldContainer<ScalarT>  & curl);
+  //void get_vorticity(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+  //    std::size_t cell, std::size_t level, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & curl);
 
-  void get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis);
+  void get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis);
 
   // Input:
   PHX::MDField<MeshScalarT,Cell,Node,QuadPoint>         wBF;
diff --git a/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid_Def.hpp b/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid_Def.hpp
index f3462ac..de03e3c 100644
--- a/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_Hydrostatic_VelResid_Def.hpp
@@ -124,8 +124,8 @@ void Hydrostatic_VelResid<EvalT, Traits>::
 evaluateFields(typename Traits::EvalData workset)
 {
   PHAL::set(Residual, 0.0);
-  Intrepid2::FieldContainer<ScalarT>  coriolis(numQPs);
-  //Intrepid2::FieldContainer<ScalarT>  vorticity(numQPs);
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  coriolis(numQPs);
+  //Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  vorticity(numQPs);
 
 
   for (int cell=0; cell < workset.numCells; ++cell) {
@@ -155,7 +155,7 @@ evaluateFields(typename Traits::EvalData workset)
 
 template<typename EvalT,typename Traits>
 void
-Hydrostatic_VelResid<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis) {
+Hydrostatic_VelResid<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis) {
 
   coriolis.initialize();
   double alpha = AlphaAngle; 
@@ -172,10 +172,10 @@ Hydrostatic_VelResid<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::Fi
 
 //template<typename EvalT,typename Traits>
 //void
-//Hydrostatic_VelResid<EvalT,Traits>::get_vorticity(const Intrepid2::FieldContainer<ScalarT>  & nodalVector,
-//    std::size_t cell, std::size_t level, Intrepid2::FieldContainer<ScalarT>  & curl) {
+//Hydrostatic_VelResid<EvalT,Traits>::get_vorticity(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & nodalVector,
+//    std::size_t cell, std::size_t level, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & curl) {
 //
-//  Intrepid2::FieldContainer<ScalarT>& covariantVector = wrk_;
+//  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& covariantVector = wrk_;
 //  covariantVector.initialize();
 //
 //  fill_nodal_metrics(cell);
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterResid.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterResid.hpp
index 7b14a9f..39f91e3 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterResid.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterResid.hpp
@@ -69,7 +69,7 @@ private:
 	PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim,Dim> jacobian;
 	PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim,Dim> jacobian_inv;
 	PHX::MDField<MeshScalarT,Cell,QuadPoint> jacobian_det;
-	Intrepid2::FieldContainer<RealType>    grad_at_cub_points;
+	Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    grad_at_cub_points;
 	PHX::MDField<ScalarT,Cell,Node,VecDim> hyperviscosity;
 
 	// Output:
@@ -81,15 +81,15 @@ private:
 	bool useImplHyperviscosity;
 	bool plotVorticity;
 
-	Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
-	Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
-	Intrepid2::FieldContainer<RealType>    refPoints;
-	Intrepid2::FieldContainer<RealType>    refWeights;
+	Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
+	Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
+	Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    refPoints;
+	Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>    refWeights;
 #ifndef ALBANY_KOKKOS_UNDER_DEVELOPMENT
-	Intrepid2::FieldContainer<MeshScalarT>  nodal_jacobian;
-	Intrepid2::FieldContainer<MeshScalarT>  nodal_inv_jacobian;
-	Intrepid2::FieldContainer<MeshScalarT>  nodal_det_j;
-	Intrepid2::FieldContainer<ScalarT> wrk_;
+	Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>  nodal_jacobian;
+	Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>  nodal_inv_jacobian;
+	Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>  nodal_det_j;
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> wrk_;
 #endif
 
 	PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim>   sphere_coord;
@@ -117,20 +117,20 @@ private:
 
 
 #ifndef ALBANY_KOKKOS_UNDER_DEVELOPMENT
-	void divergence(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-			std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & div);
+	void divergence(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+			std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & div);
 
 	//gradient returns vector in physical basis
-	void gradient(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-			std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & gradField);
+	void gradient(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+			std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & gradField);
 
 	// curl only returns the component in the radial direction
-	void curl(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-			std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & curl);
+	void curl(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+			std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & curl);
 
 	void fill_nodal_metrics(std::size_t cell);
 
-	void get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis);
+	void get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis);
 
 	std::vector<LO> qpToNodeMap;
 	std::vector<LO> nodeToQPMap;
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterResid_Def.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterResid_Def.hpp
index 6434b62..b348638 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterResid_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterResid_Def.hpp
@@ -43,8 +43,8 @@ ShallowWaterResid(const Teuchos::ParameterList& p,
 		jacobian  (p.get<std::string>  ("Jacobian Name"), dl->qp_tensor ),
 		source    (p.get<std::string> ("Shallow Water Source QP Variable Name"), dl->qp_vector),
 		Residual (p.get<std::string> ("Residual Name"), dl->node_vector),
-		intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > ("Intrepid2 Basis") ),
-		cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+		intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > ("Intrepid2 Basis") ),
+		cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
 		spatialDim(p.get<std::size_t>("spatialDim")),
 		sphere_coord  (p.get<std::string>  ("Spherical Coord Name"), dl->qp_gradient ),
 		lambda_nodal  (p.get<std::string>  ("Lambda Coord Nodal Name"), dl->node_scalar),
@@ -1105,39 +1105,39 @@ evaluateFields(typename Traits::EvalData workset)
 
 	//Note that vars huAtNodes, div_hU, ... below are redefined locally here.
 	//Global vars with such names exist too (see constructor).
-	Intrepid2::FieldContainer<ScalarT>  huAtNodes(numNodes,2);
-	Intrepid2::FieldContainer<ScalarT>  div_hU(numQPs);
-	Intrepid2::FieldContainer<ScalarT>  kineticEnergyAtNodes(numNodes);
-	Intrepid2::FieldContainer<ScalarT>  gradKineticEnergy(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT>  potentialEnergyAtNodes(numNodes);
-	Intrepid2::FieldContainer<ScalarT>  gradPotentialEnergy(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT>  uAtNodes(numNodes, 2);
-	Intrepid2::FieldContainer<ScalarT>  curlU(numQPs);
-	Intrepid2::FieldContainer<ScalarT>  coriolis(numQPs);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  huAtNodes(numNodes,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  div_hU(numQPs);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  kineticEnergyAtNodes(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  gradKineticEnergy(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  potentialEnergyAtNodes(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  gradPotentialEnergy(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  uAtNodes(numNodes, 2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  curlU(numQPs);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  coriolis(numQPs);
 
 	//container for surface height for viscosty
-	Intrepid2::FieldContainer<ScalarT> surf(numNodes);
-	Intrepid2::FieldContainer<ScalarT> surftilde(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> surf(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> surftilde(numNodes);
 	//conteiner for surface height gradient for viscosity
-	Intrepid2::FieldContainer<ScalarT> hgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> htildegradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> hgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> htildegradNodes(numQPs,2);
 
 	//auxiliary vars, (u,v) in lon-lat is transformed to (ux,uy,uz) in XYZ
-	Intrepid2::FieldContainer<ScalarT> uX(numNodes);
-	Intrepid2::FieldContainer<ScalarT> uY(numNodes);
-	Intrepid2::FieldContainer<ScalarT> uZ(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uX(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uY(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uZ(numNodes);
 
 	//auxiliary vars, (utilde,vtilde) in lon-lat is transformed to (utx,uty,utz) in XYZ
-	Intrepid2::FieldContainer<ScalarT> utX(numNodes);
-	Intrepid2::FieldContainer<ScalarT> utY(numNodes);
-	Intrepid2::FieldContainer<ScalarT> utZ(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utX(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utY(numNodes);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utZ(numNodes);
 
-	Intrepid2::FieldContainer<ScalarT> uXgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> uYgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> uZgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> utXgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> utYgradNodes(numQPs,2);
-	Intrepid2::FieldContainer<ScalarT> utZgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uXgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uYgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uZgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utXgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utYgradNodes(numQPs,2);
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> utZgradNodes(numQPs,2);
 
 	for (std::size_t cell=0; cell < workset.numCells; ++cell) {
 
@@ -1632,10 +1632,10 @@ ShallowWaterResid<EvalT,Traits>::getValue(const std::string &n)
 #ifndef ALBANY_KOKKOS_UNDER_DEVELOPMENT
 template<typename EvalT,typename Traits>
 void
-ShallowWaterResid<EvalT,Traits>::divergence(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-		std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & div) {
+ShallowWaterResid<EvalT,Traits>::divergence(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+		std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & div) {
 
-	Intrepid2::FieldContainer<ScalarT>& vcontra = wrk_;
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& vcontra = wrk_;
 	vcontra.initialize();
 
 	fill_nodal_metrics(cell);
@@ -1686,8 +1686,8 @@ ShallowWaterResid<EvalT,Traits>::divergence(const Intrepid2::FieldContainer<Scal
 #ifndef ALBANY_KOKKOS_UNDER_DEVELOPMENT
 template<typename EvalT,typename Traits>
 void
-ShallowWaterResid<EvalT,Traits>::gradient(const Intrepid2::FieldContainer<ScalarT>  & fieldAtNodes,
-		std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & gradField) {
+ShallowWaterResid<EvalT,Traits>::gradient(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & fieldAtNodes,
+		std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & gradField) {
 
 	gradField.initialize();
 
@@ -1741,10 +1741,10 @@ ShallowWaterResid<EvalT,Traits>::fill_nodal_metrics(std::size_t cell) {
 //og: rename this to vorticity
 template<typename EvalT,typename Traits>
 void
-ShallowWaterResid<EvalT,Traits>::curl(const Intrepid2::FieldContainer<ScalarT>  & nodalVector,
-		std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & curl) {
+ShallowWaterResid<EvalT,Traits>::curl(const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & nodalVector,
+		std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & curl) {
 
-	Intrepid2::FieldContainer<ScalarT>& covariantVector = wrk_;
+	Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& covariantVector = wrk_;
 	covariantVector.initialize();
 
 	fill_nodal_metrics(cell);
@@ -1780,7 +1780,7 @@ ShallowWaterResid<EvalT,Traits>::curl(const Intrepid2::FieldContainer<ScalarT>
 #ifndef ALBANY_KOKKOS_UNDER_DEVELOPMENT
 template<typename EvalT,typename Traits>
 void
-ShallowWaterResid<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis) {
+ShallowWaterResid<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis) {
 
 	coriolis.initialize();
 	double alpha = AlphaAngle; /*must match what is in initial condition for TC2 and TC5.
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Error_Def.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Error_Def.hpp
index d9703b8..572faa2 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Error_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Error_Def.hpp
@@ -138,9 +138,9 @@ evaluateFields(typename Traits::EvalData workset)
   // Zero out local response
   PHAL::set(this->local_response, 0.0);
 
-  Intrepid2::FieldContainer<ScalarT> flow_state_field_qp(workset.numCells, numQPs, vecDim); //flow_state_field at quad points
-  Intrepid2::FieldContainer<ScalarT> flow_state_field_ref_qp(workset.numCells, numQPs, vecDim); //flow_state_field_ref (exact solution) at quad points
-  Intrepid2::FieldContainer<ScalarT> err_qp(workset.numCells, numQPs, vecDim); //error at quadrature points
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flow_state_field_qp(workset.numCells, numQPs, vecDim); //flow_state_field at quad points
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flow_state_field_ref_qp(workset.numCells, numQPs, vecDim); //flow_state_field_ref (exact solution) at quad points
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> err_qp(workset.numCells, numQPs, vecDim); //error at quadrature points
 
   //Interpolate flow_state_field from nodes -> quadrature points.  
   for (std::size_t cell=0; cell < workset.numCells; ++cell) {
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Norm_Def.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Norm_Def.hpp
index 0b90e05..6f0a666 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Norm_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterResponseL2Norm_Def.hpp
@@ -103,7 +103,7 @@ evaluateFields(typename Traits::EvalData workset)
   // Zero out local response
   PHAL::set(this->local_response, 0.0);
 
-  Intrepid2::FieldContainer<ScalarT> flow_state_field_qp(workset.numCells, numQPs, nPrimaryDOFs); //flow_state_field at quad points
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flow_state_field_qp(workset.numCells, numQPs, nPrimaryDOFs); //flow_state_field at quad points
   
   //Interpolate flow_state_field from nodes -> quadrature points.  
   for (std::size_t cell=0; cell < workset.numCells; ++cell) {
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterSource.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterSource.hpp
index db0260d..7deb1d0 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterSource.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterSource.hpp
@@ -46,7 +46,7 @@ public:
 private:
 
           
-  void get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis);
+  void get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis);
 
   // Input:
   PHX::MDField<MeshScalarT,Cell,QuadPoint, Dim> sphere_coord;
diff --git a/src/Aeras/evaluators/Aeras_ShallowWaterSource_Def.hpp b/src/Aeras/evaluators/Aeras_ShallowWaterSource_Def.hpp
index 6deebab..5180baf 100644
--- a/src/Aeras/evaluators/Aeras_ShallowWaterSource_Def.hpp
+++ b/src/Aeras/evaluators/Aeras_ShallowWaterSource_Def.hpp
@@ -413,7 +413,7 @@ KOKKOS_INLINE_FUNCTION
 
   
 template<typename EvalT,typename Traits>
-void ShallowWaterSource<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer<ScalarT>  & coriolis) {
+void ShallowWaterSource<EvalT,Traits>::get_coriolis(std::size_t cell, Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>  & coriolis) {
     
     coriolis.initialize();
     double alpha = 0.0;//1.047;  /*must match what is in initial condition for TC2 and TC5.
diff --git a/src/Aeras/problems/Aeras_HydrostaticProblem.hpp b/src/Aeras/problems/Aeras_HydrostaticProblem.hpp
index fd787ce..ee0bc0c 100644
--- a/src/Aeras/problems/Aeras_HydrostaticProblem.hpp
+++ b/src/Aeras/problems/Aeras_HydrostaticProblem.hpp
@@ -160,16 +160,16 @@ Aeras::HydrostaticProblem::constructEvaluators(
   }
 
 
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  RCP <Intrepid2::CubaturePolylib<RealType> > polylib = rcp(new Intrepid2::CubaturePolylib<RealType>(meshSpecs.cubatureDegree, meshSpecs.cubatureRule));
-  std::vector< Teuchos::RCP<Intrepid2::Cubature<RealType> > > cubatures(2, polylib); 
-  RCP <Intrepid2::Cubature<RealType> > cubature = rcp( new Intrepid2::CubatureTensor<RealType>(cubatures));
+  RCP <Intrepid2::CubaturePolylib<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > polylib = rcp(new Intrepid2::CubaturePolylib<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >(meshSpecs.cubatureDegree, meshSpecs.cubatureRule));
+  std::vector< Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > > cubatures(2, polylib); 
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = rcp( new Intrepid2::CubatureTensor<RealType,Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >(cubatures));
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
@@ -325,9 +325,9 @@ Aeras::HydrostaticProblem::constructEvaluators(
     RCP<ParameterList> p = rcp(new ParameterList("Compute Basis Functions"));
 
     // Inputs: X, Y at nodes, Cubature, and Basis
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
  
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > 
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > 
         ("Intrepid2 Basis", intrepidBasis);
  
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
diff --git a/src/Aeras/problems/Aeras_ShallowWaterProblem.hpp b/src/Aeras/problems/Aeras_ShallowWaterProblem.hpp
index 87f132b..eded9d8 100644
--- a/src/Aeras/problems/Aeras_ShallowWaterProblem.hpp
+++ b/src/Aeras/problems/Aeras_ShallowWaterProblem.hpp
@@ -124,7 +124,7 @@ Aeras::ShallowWaterProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
  
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
@@ -132,12 +132,12 @@ Aeras::ShallowWaterProblem::constructEvaluators(
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  RCP <Intrepid2::CubaturePolylib<RealType> > polylib = rcp(new Intrepid2::CubaturePolylib<RealType>(meshSpecs.cubatureDegree, meshSpecs.cubatureRule));
-  std::vector< Teuchos::RCP<Intrepid2::Cubature<RealType> > > cubatures(2, polylib); 
-  RCP <Intrepid2::Cubature<RealType> > cubature = rcp( new Intrepid2::CubatureTensor<RealType>(cubatures));
+  RCP <Intrepid2::CubaturePolylib<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > polylib = rcp(new Intrepid2::CubaturePolylib<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >(meshSpecs.cubatureDegree, meshSpecs.cubatureRule));
+  std::vector< Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > > cubatures(2, polylib); 
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = rcp( new Intrepid2::CubatureTensor<RealType,Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >(cubatures));
 //  Regular Gauss Quadrature.
-//  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-//  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+//  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+//  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
 
   const int numQPts     = cubature->getNumPoints();
@@ -230,9 +230,9 @@ Aeras::ShallowWaterProblem::constructEvaluators(
     RCP<ParameterList> p = rcp(new ParameterList("Compute Basis Functions"));
 
     // Inputs: X, Y at nodes, Cubature, and Basis
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
  
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > 
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > 
         ("Intrepid2 Basis", intrepidBasis);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
@@ -289,8 +289,8 @@ Aeras::ShallowWaterProblem::constructEvaluators(
     p->set<string>("Jacobian Name",          "Jacobian");
     p->set<string>("Jacobian Inv Name",          "Jacobian Inv");
     p->set<string>("Jacobian Det Name",          "Jacobian Det");
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > ("Intrepid2 Basis", intrepidBasis);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > ("Intrepid2 Basis", intrepidBasis);
 
     p->set<std::size_t>("spatialDim", spatialDim);
 
diff --git a/src/Aeras/problems/Aeras_XScalarAdvectionProblem.hpp b/src/Aeras/problems/Aeras_XScalarAdvectionProblem.hpp
index 8ed19d8..baa9784 100644
--- a/src/Aeras/problems/Aeras_XScalarAdvectionProblem.hpp
+++ b/src/Aeras/problems/Aeras_XScalarAdvectionProblem.hpp
@@ -124,15 +124,15 @@ Aeras::XScalarAdvectionProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/Aeras/problems/Aeras_XZHydrostaticProblem.hpp b/src/Aeras/problems/Aeras_XZHydrostaticProblem.hpp
index 36c1916..8abd194 100644
--- a/src/Aeras/problems/Aeras_XZHydrostaticProblem.hpp
+++ b/src/Aeras/problems/Aeras_XZHydrostaticProblem.hpp
@@ -151,15 +151,15 @@ Aeras::XZHydrostaticProblem::constructEvaluators(
   }
 
 
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = meshSpecs.ctd.node_count;
diff --git a/src/Aeras/problems/Aeras_XZScalarAdvectionProblem.hpp b/src/Aeras/problems/Aeras_XZScalarAdvectionProblem.hpp
index fead565..54babff 100644
--- a/src/Aeras/problems/Aeras_XZScalarAdvectionProblem.hpp
+++ b/src/Aeras/problems/Aeras_XZScalarAdvectionProblem.hpp
@@ -118,15 +118,15 @@ Aeras::XZScalarAdvectionProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = meshSpecs.ctd.node_count;
diff --git a/src/Aeras/problems/Aeras_XZScalarAdvectionProblemOld.hpp b/src/Aeras/problems/Aeras_XZScalarAdvectionProblemOld.hpp
index 26bf569..9913e26 100644
--- a/src/Aeras/problems/Aeras_XZScalarAdvectionProblemOld.hpp
+++ b/src/Aeras/problems/Aeras_XZScalarAdvectionProblemOld.hpp
@@ -116,15 +116,15 @@ Aeras::XZScalarAdvectionProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/FELIX/evaluators/FELIX_ResponseSMBMismatch.hpp b/src/FELIX/evaluators/FELIX_ResponseSMBMismatch.hpp
index 9e24976..d0ce9b7 100644
--- a/src/FELIX/evaluators/FELIX_ResponseSMBMismatch.hpp
+++ b/src/FELIX/evaluators/FELIX_ResponseSMBMismatch.hpp
@@ -52,38 +52,38 @@ namespace FELIX {
 
     Teuchos::RCP<shards::CellTopology> cellType;
     Teuchos::RCP<shards::CellTopology> sideType;
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureCell;
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureSide;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureCell;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureSide;
 
     // The basis
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> cubPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
     //const Teuchos::RCP<Albany::MeshSpecsStruct>& meshSpecs;
-    Intrepid2::FieldContainer<RealType> refPointsSide;
-    Intrepid2::FieldContainer<RealType> cubWeightsSide;
-    Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-    Intrepid2::FieldContainer<MeshScalarT> invJacobianSide;
-    Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> invJacobianSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
 
-    Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
-    Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-    Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-    Intrepid2::FieldContainer<RealType> basisGrad_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> trans_gradBasis_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basisGrad_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_gradBasis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
 
-    Intrepid2::FieldContainer<ScalarT> dofCell;
-    Intrepid2::FieldContainer<ScalarT> dofSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
 
-    Intrepid2::FieldContainer<ScalarT> dofCellVec;
-    Intrepid2::FieldContainer<ScalarT> dofSideVec;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCellVec;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSideVec;
 
-    Intrepid2::FieldContainer<ScalarT> data;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> data;
 
     std::string sideSetID;
     Teuchos::Array<RealType> inputValues;
diff --git a/src/FELIX/evaluators/FELIX_ResponseSMBMismatch_Def.hpp b/src/FELIX/evaluators/FELIX_ResponseSMBMismatch_Def.hpp
index b29e392..4437516 100644
--- a/src/FELIX/evaluators/FELIX_ResponseSMBMismatch_Def.hpp
+++ b/src/FELIX/evaluators/FELIX_ResponseSMBMismatch_Def.hpp
@@ -42,7 +42,7 @@ FELIX::ResponseSMBMismatch<EvalT, Traits>::ResponseSMBMismatch(Teuchos::Paramete
 
   cellType = Teuchos::rcp(new shards::CellTopology(elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureCell = cubFactory.create(*cellType, 1); //meshSpecs->cubatureDegree);
   cubatureDegree = plist->isParameter("Cubature Degree") ? plist->get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
 
@@ -123,9 +123,9 @@ void FELIX::ResponseSMBMismatch<EvalT, Traits>::evaluateFields(typename Traits::
   if (it != ssList.end()) {
     const std::vector<Albany::SideStruct>& sideSet = it->second;
 
-    Intrepid2::FieldContainer<ScalarT> H_Side;
-    Intrepid2::FieldContainer<ScalarT> SMB_Side;
-    Intrepid2::FieldContainer<ScalarT> V_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> H_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> SMB_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> V_Side;
 
     // Loop over the sides that form the boundary condition
     for (std::size_t iSide = 0; iSide < sideSet.size(); ++iSide) { // loop over the sides on this ws and name
@@ -138,7 +138,7 @@ void FELIX::ResponseSMBMismatch<EvalT, Traits>::evaluateFields(typename Traits::
       const CellTopologyData_Subcell& side =  cellType->getCellTopologyData()->side[elem_side];
       sideType = Teuchos::rcp(new shards::CellTopology(side.topology));
       int numSideNodes = sideType->getNodeCount();
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
       cubatureSide = cubFactory.create(*sideType, cubatureDegree);
       sideDims = sideType->getDimension();
       numQPsSide = cubatureSide->getNumPoints();
@@ -212,11 +212,11 @@ void FELIX::ResponseSMBMismatch<EvalT, Traits>::evaluateFields(typename Traits::
       Intrepid2::CellTools<MeshScalarT>::mapToPhysicalFrame(physPointsSide, refPointsSide, physPointsCell, *cellType);
 
       // Map cell (reference) degree of freedom points to the appropriate side (elem_side)
-      Intrepid2::FieldContainer<ScalarT> H_Cell(numNodes);
-      Intrepid2::FieldContainer<ScalarT> SMB_Cell(numNodes);
-      Intrepid2::FieldContainer<ScalarT> V_Cell(numNodes, numVecFODims);
-      Intrepid2::FieldContainer<ScalarT> gradH_Side(numQPsSide, numVecFODims);
-      Intrepid2::FieldContainer<ScalarT> divV_Side(numQPsSide);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> H_Cell(numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> SMB_Cell(numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> V_Cell(numNodes, numVecFODims);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> gradH_Side(numQPsSide, numVecFODims);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> divV_Side(numQPsSide);
 
       for (int i = 0; i < gradH_Side.size(); i++)
         gradH_Side(i) = 0.0;
diff --git a/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch.hpp b/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch.hpp
index e25b00a..79f3ca1 100644
--- a/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch.hpp
+++ b/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch.hpp
@@ -53,38 +53,38 @@ namespace FELIX {
 
     Teuchos::RCP<shards::CellTopology> cellType;
     Teuchos::RCP<shards::CellTopology> sideType;
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureCell;
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureSide;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureCell;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureSide;
 
     // The basis
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> cubPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
     //const Teuchos::RCP<Albany::MeshSpecsStruct>& meshSpecs;
-    Intrepid2::FieldContainer<RealType> refPointsSide;
-    Intrepid2::FieldContainer<RealType> cubWeightsSide;
-    Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-    Intrepid2::FieldContainer<MeshScalarT> invJacobianSide;
-    Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> invJacobianSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
 
-    Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
-    Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-    Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-    Intrepid2::FieldContainer<RealType> basisGrad_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> trans_gradBasis_refPointsSide;
-    Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basisGrad_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_gradBasis_refPointsSide;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
 
-    Intrepid2::FieldContainer<ScalarT> dofCell;
-    Intrepid2::FieldContainer<ScalarT> dofSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
 
-    Intrepid2::FieldContainer<ScalarT> dofCellVec;
-    Intrepid2::FieldContainer<ScalarT> dofSideVec;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCellVec;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSideVec;
 
-    Intrepid2::FieldContainer<ScalarT> data;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> data;
 
     std::string sideSetID;
     Teuchos::Array<RealType> inputValues;
diff --git a/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch_Def.hpp b/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch_Def.hpp
index 3cec2cd..11f4632 100644
--- a/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch_Def.hpp
+++ b/src/FELIX/evaluators/FELIX_ResponseSurfaceVelocityMismatch_Def.hpp
@@ -39,7 +39,7 @@ FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::ResponseSurfaceVelocityMi
 
   cellType = Teuchos::rcp(new shards::CellTopology(elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureCell = cubFactory.create(*cellType, 1); //meshSpecs->cubatureDegree);
   cubatureDegree = plist->isParameter("Cubature Degree") ? plist->get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
 
@@ -121,9 +121,9 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
   if (it != ssList.end()) {
     const std::vector<Albany::SideStruct>& sideSet = it->second;
 
-    Intrepid2::FieldContainer<ScalarT> surfaceVelocityOnSide;
-    Intrepid2::FieldContainer<ScalarT> velocityRMSOnSide;
-    Intrepid2::FieldContainer<ScalarT> velocityOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> surfaceVelocityOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> velocityRMSOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> velocityOnSide;
 
     // Zero out local response
     PHAL::set(this->local_response, 0.0);
@@ -137,7 +137,7 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
       const int elem_side = sideSet[side].side_local_id;
 
       sideType = Teuchos::rcp(new shards::CellTopology(cellType->getCellTopologyData()->side[elem_side].topology));
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
       cubatureSide = cubFactory.create(*sideType, cubatureDegree);
       sideDims = sideType->getDimension();
       numQPsSide = cubatureSide->getNumPoints();
@@ -203,9 +203,9 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
       Intrepid2::CellTools<MeshScalarT>::mapToPhysicalFrame(physPointsSide, refPointsSide, physPointsCell, intrepidBasis);
 
       // Map cell (reference) degree of freedom points to the appropriate side (elem_side)
-      Intrepid2::FieldContainer<ScalarT> surfaceVelocityOnCell(1, numNodes, numVecDim);
-      Intrepid2::FieldContainer<ScalarT> velocityRMSOnCell(1, numNodes, numVecDim);
-      Intrepid2::FieldContainer<ScalarT> velocityOnCell(1, numNodes, numVecDim);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> surfaceVelocityOnCell(1, numNodes, numVecDim);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> velocityRMSOnCell(1, numNodes, numVecDim);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> velocityOnCell(1, numNodes, numVecDim);
       for (std::size_t node = 0; node < numNodes; ++node)
         for (std::size_t dim = 0; dim < numVecDim; ++dim) {
           surfaceVelocityOnCell(0, node, dim) = surfaceVelocity_field(elem_LID, node, dim);
@@ -265,9 +265,9 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
   if (ib != ssList.end() && (alpha != 0)) {
     const std::vector<Albany::SideStruct>& sideSet = ib->second;
 
-    Intrepid2::FieldContainer<ScalarT> basalFrictionOnSide(1, numQPsSide);
-    Intrepid2::FieldContainer<ScalarT> basalFrictionGradOnSide(1, numQPsSide, cellDims);
-    Intrepid2::FieldContainer<ScalarT> basalFrictionGradOnSideT(1, numQPsSide, cellDims);
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> basalFrictionOnSide(1, numQPsSide);
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> basalFrictionGradOnSide(1, numQPsSide, cellDims);
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> basalFrictionGradOnSideT(1, numQPsSide, cellDims);
 
     // Loop over the sides that form the boundary condition
     for (std::size_t side = 0; side < sideSet.size(); ++side) { // loop over the sides on this ws and name
@@ -308,7 +308,7 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
 
       Intrepid2::FunctionSpaceTools::HGRADtransformGRAD<MeshScalarT>(trans_gradBasis_refPointsSide, invJacobianSide, basisGrad_refPointsSide);
 
-      Intrepid2::FieldContainer<ScalarT> uTan(1, numQPsSide, cellDims), vTan(1, numQPsSide, cellDims);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> uTan(1, numQPsSide, cellDims), vTan(1, numQPsSide, cellDims);
       Intrepid2::CellTools<MeshScalarT>::getPhysicalFaceTangents(uTan, vTan,jacobianSide,elem_side,*cellType);
 
       // Multiply with weighted measure
@@ -318,7 +318,7 @@ void FELIX::ResponseSurfaceVelocityMismatch<EvalT, Traits>::evaluateFields(typen
       Intrepid2::CellTools<MeshScalarT>::mapToPhysicalFrame(physPointsSide, refPointsSide, physPointsCell, intrepidBasis);
 
       // Map cell (reference) degree of freedom points to the appropriate side (elem_side)
-      Intrepid2::FieldContainer<ScalarT> basalFrictionOnCell(1, numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> basalFrictionOnCell(1, numNodes);
 
       for (std::size_t node = 0; node < numNodes; ++node) {
         basalFrictionOnCell(0,node) = basal_friction_field(elem_LID, node);
diff --git a/src/FELIX/evaluators/FELIX_StokesContinuityResid.hpp b/src/FELIX/evaluators/FELIX_StokesContinuityResid.hpp
index 37844f4..ca32628 100644
--- a/src/FELIX/evaluators/FELIX_StokesContinuityResid.hpp
+++ b/src/FELIX/evaluators/FELIX_StokesContinuityResid.hpp
@@ -51,7 +51,7 @@ private:
   PHX::MDField<ScalarT,Cell,Node> CResidual;
 
   unsigned int numQPs, numDims, numNodes;
-  Intrepid2::FieldContainer<ScalarT> divergence;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> divergence;
   bool havePSPG;
 };
 }
diff --git a/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor.hpp b/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor.hpp
index 391e077..ca027aa 100644
--- a/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor.hpp
+++ b/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor.hpp
@@ -46,14 +46,14 @@ private:
   // Input:
   //! Coordinate vector at vertices
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
 
   // Output:
   PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim,Dim> Gc;
diff --git a/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor_Def.hpp b/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor_Def.hpp
index 03e6642..c2f10e8 100644
--- a/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor_Def.hpp
+++ b/src/FELIX/evaluators/FELIX_StokesContravarientMetricTensor_Def.hpp
@@ -17,7 +17,7 @@ StokesContravarientMetricTensor<EvalT, Traits>::
 StokesContravarientMetricTensor(const Teuchos::ParameterList& p,
                                 const Teuchos::RCP<Albany::Layouts>& dl) :
   coordVec (p.get<std::string> ("Coordinate Vector Name"), dl->vertices_vector),
-  cubature (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType (p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
   Gc       (p.get<std::string> ("Contravarient Metric Tensor Name"), dl->qp_tensor)
 {
diff --git a/src/FELIX/evaluators/FELIX_StokesFOImplicitThicknessUpdateResid_Def.hpp b/src/FELIX/evaluators/FELIX_StokesFOImplicitThicknessUpdateResid_Def.hpp
index bc3ff8a..c189788 100644
--- a/src/FELIX/evaluators/FELIX_StokesFOImplicitThicknessUpdateResid_Def.hpp
+++ b/src/FELIX/evaluators/FELIX_StokesFOImplicitThicknessUpdateResid_Def.hpp
@@ -127,7 +127,7 @@ evaluateFields(typename Traits::EvalData workset)
   typedef Intrepid2::FunctionSpaceTools FST; 
 
   // Initialize residual to 0.0
-  Intrepid2::FieldContainer<ScalarT> res(numNodes,2);
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> res(numNodes,2);
 
   double rho_g=rho*g;
 
diff --git a/src/FELIX/evaluators/FELIX_StokesTauM.hpp b/src/FELIX/evaluators/FELIX_StokesTauM.hpp
index 4758a8f..3b694e0 100644
--- a/src/FELIX/evaluators/FELIX_StokesTauM.hpp
+++ b/src/FELIX/evaluators/FELIX_StokesTauM.hpp
@@ -53,7 +53,7 @@ private:
   PHX::MDField<ScalarT,Cell,Node> TauM;
 
   unsigned int numQPs, numDims;
-  Intrepid2::FieldContainer<MeshScalarT> normGc;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normGc;
   
 };
 }
diff --git a/src/FELIX/evaluators/FELIX_ThicknessResid.hpp b/src/FELIX/evaluators/FELIX_ThicknessResid.hpp
index 25ab9ac..962eec1 100644
--- a/src/FELIX/evaluators/FELIX_ThicknessResid.hpp
+++ b/src/FELIX/evaluators/FELIX_ThicknessResid.hpp
@@ -66,35 +66,35 @@ private:
 
   Teuchos::RCP<shards::CellTopology> cellType;
   Teuchos::RCP<shards::CellTopology> sideType;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureSide;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureSide;
 
   // The basis
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> cubPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
   //const Teuchos::RCP<Albany::MeshSpecsStruct>& meshSpecs;
-  Intrepid2::FieldContainer<RealType> refPointsSide;
-  Intrepid2::FieldContainer<RealType> cubWeightsSide;
-  Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-  Intrepid2::FieldContainer<MeshScalarT> invJacobianSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
-
-  Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
-
-  Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-  Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-  Intrepid2::FieldContainer<RealType> basisGrad_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> trans_gradBasis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
-
-  Intrepid2::FieldContainer<ScalarT> dofCell;
-  Intrepid2::FieldContainer<ScalarT> dofSide;
-
-  Intrepid2::FieldContainer<ScalarT> dofCellVec;
-  Intrepid2::FieldContainer<ScalarT> dofSideVec;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> invJacobianSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
+
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
+
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basisGrad_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_gradBasis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
+
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
+
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCellVec;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSideVec;
 
   std::string sideSetID;
 
diff --git a/src/FELIX/evaluators/FELIX_ThicknessResid_Def.hpp b/src/FELIX/evaluators/FELIX_ThicknessResid_Def.hpp
index 7d5b854..18aa178 100644
--- a/src/FELIX/evaluators/FELIX_ThicknessResid_Def.hpp
+++ b/src/FELIX/evaluators/FELIX_ThicknessResid_Def.hpp
@@ -70,7 +70,7 @@ ThicknessResid(const Teuchos::ParameterList& p,
 
   cellType = Teuchos::rcp(new shards::CellTopology(elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureDegree = p.isParameter("Cubature Degree") ? p.get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
   numNodes = intrepidBasis->getCardinality();
 
@@ -118,10 +118,10 @@ evaluateFields(typename Traits::EvalData workset)
   if (it != ssList.end()) {
     const std::vector<Albany::SideStruct>& sideSet = it->second;
 
-    Intrepid2::FieldContainer<ScalarT> dH_Side;
-    Intrepid2::FieldContainer<ScalarT> SMB_Side;
-    Intrepid2::FieldContainer<ScalarT> H0_Side;
-    Intrepid2::FieldContainer<ScalarT> V_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dH_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> SMB_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> H0_Side;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> V_Side;
 
     // Loop over the sides that form the boundary condition
     for (std::size_t iSide = 0; iSide < sideSet.size(); ++iSide) { // loop over the sides on this ws and name
@@ -134,7 +134,7 @@ evaluateFields(typename Traits::EvalData workset)
       const CellTopologyData_Subcell& side =  cellType->getCellTopologyData()->side[elem_side];
       sideType = Teuchos::rcp(new shards::CellTopology(side.topology));
       int numSideNodes = sideType->getNodeCount();
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
       cubatureSide = cubFactory.create(*sideType, cubatureDegree);
       sideDims = sideType->getDimension();
       numQPsSide = cubatureSide->getNumPoints();
@@ -209,12 +209,12 @@ evaluateFields(typename Traits::EvalData workset)
       Intrepid2::CellTools<MeshScalarT>::mapToPhysicalFrame(physPointsSide, refPointsSide, physPointsCell, intrepidBasis);
 
       // Map cell (reference) degree of freedom points to the appropriate side (elem_side)
-      Intrepid2::FieldContainer<ScalarT> dH_Cell(numNodes);
-      Intrepid2::FieldContainer<ScalarT> SMB_Cell(numNodes);
-      Intrepid2::FieldContainer<ScalarT> H0_Cell(numNodes);
-      Intrepid2::FieldContainer<ScalarT> V_Cell(numNodes, numVecFODims);
-      Intrepid2::FieldContainer<ScalarT> gradH_Side(numQPsSide, numVecFODims);
-      Intrepid2::FieldContainer<ScalarT> divV_Side(numQPsSide);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dH_Cell(numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> SMB_Cell(numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> H0_Cell(numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> V_Cell(numNodes, numVecFODims);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> gradH_Side(numQPsSide, numVecFODims);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> divV_Side(numQPsSide);
 
       gradH_Side.initialize();
       divV_Side.initialize();
diff --git a/src/FELIX/problems/FELIX_Hydrology.hpp b/src/FELIX/problems/FELIX_Hydrology.hpp
index 4bd471f..d702b1c 100644
--- a/src/FELIX/problems/FELIX_Hydrology.hpp
+++ b/src/FELIX/problems/FELIX_Hydrology.hpp
@@ -97,7 +97,7 @@ protected:
 
   Teuchos::RCP<Albany::Layouts> dl;
 
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 };
 
 // ===================================== IMPLEMENTATION ======================================= //
@@ -123,8 +123,8 @@ Hydrology::constructEvaluators (PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
 
   // Building the right quadrature formula
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   // Some constants
   const int numNodes = intrepidBasis->getCardinality();
diff --git a/src/FELIX/problems/FELIX_Stokes.hpp b/src/FELIX/problems/FELIX_Stokes.hpp
index 5ca2430..68d4dea 100644
--- a/src/FELIX/problems/FELIX_Stokes.hpp
+++ b/src/FELIX/problems/FELIX_Stokes.hpp
@@ -148,15 +148,15 @@ FELIX::Stokes::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
@@ -244,7 +244,7 @@ FELIX::Stokes::constructEvaluators(
 
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<std::string>("Coordinate Vector Name","Coord Vec");
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
diff --git a/src/FELIX/problems/FELIX_StokesFO.hpp b/src/FELIX/problems/FELIX_StokesFO.hpp
index 7df686f..13a3766 100644
--- a/src/FELIX/problems/FELIX_StokesFO.hpp
+++ b/src/FELIX/problems/FELIX_StokesFO.hpp
@@ -178,15 +178,15 @@ FELIX::StokesFO::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
 
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
 
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/FELIX/problems/FELIX_StokesFOThickness.hpp b/src/FELIX/problems/FELIX_StokesFOThickness.hpp
index bde09fb..d14caac 100644
--- a/src/FELIX/problems/FELIX_StokesFOThickness.hpp
+++ b/src/FELIX/problems/FELIX_StokesFOThickness.hpp
@@ -137,15 +137,15 @@ FELIX::StokesFOThickness::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/FELIX/problems/FELIX_StokesL1L2.hpp b/src/FELIX/problems/FELIX_StokesL1L2.hpp
index 1d9d77a..d85f3b1 100644
--- a/src/FELIX/problems/FELIX_StokesL1L2.hpp
+++ b/src/FELIX/problems/FELIX_StokesL1L2.hpp
@@ -129,15 +129,15 @@ FELIX::StokesL1L2::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/GOAL/problems/GOAL_MechanicsProblem.cpp b/src/GOAL/problems/GOAL_MechanicsProblem.cpp
index 577ed76..e28dc0e 100644
--- a/src/GOAL/problems/GOAL_MechanicsProblem.cpp
+++ b/src/GOAL/problems/GOAL_MechanicsProblem.cpp
@@ -115,9 +115,9 @@ getValidProblemParameters() const
 /*****************************************************************************/
 void GOALMechanicsProblem::getAllocatedStates(
     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-      <Intrepid2::FieldContainer<RealType> > > > oldSt,
+      <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldSt,
     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-      <Intrepid2::FieldContainer<RealType> > > > newSt) const
+      <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newSt) const
 {
   oldSt = oldState;
   newSt = newState;
diff --git a/src/GOAL/problems/GOAL_MechanicsProblem.hpp b/src/GOAL/problems/GOAL_MechanicsProblem.hpp
index f8c6c49..a1ac037 100644
--- a/src/GOAL/problems/GOAL_MechanicsProblem.hpp
+++ b/src/GOAL/problems/GOAL_MechanicsProblem.hpp
@@ -60,9 +60,9 @@ class GOALMechanicsProblem: public Albany::AbstractProblem
     //! retrieve the state data
     void getAllocatedStates(
         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-        <Intrepid2::FieldContainer<RealType> > > > oldSt,
+        <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldSt,
         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-        <Intrepid2::FieldContainer<RealType> > > > newSt) const;
+        <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newSt) const;
 
   private:
     
@@ -109,11 +109,11 @@ class GOALMechanicsProblem: public Albany::AbstractProblem
 
     //! old state data
     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-      <Intrepid2::FieldContainer<RealType> > > > oldState;
+      <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState;
 
     //! new state data
     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP
-      <Intrepid2::FieldContainer<RealType> > > > newState;
+      <Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState;
 
 };
 
diff --git a/src/Hydride/evaluators/ContravariantTargetMetricTensor.hpp b/src/Hydride/evaluators/ContravariantTargetMetricTensor.hpp
index 1d9711c..ea145b8 100644
--- a/src/Hydride/evaluators/ContravariantTargetMetricTensor.hpp
+++ b/src/Hydride/evaluators/ContravariantTargetMetricTensor.hpp
@@ -47,14 +47,14 @@ private:
   // Input:
   //! Coordinate vector at vertices
   PHX::MDField<ScalarT, Cell, Node, Dim> solnVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<ScalarT> jacobian;
-  Intrepid2::FieldContainer<ScalarT> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian_inv;
 
   // Output:
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim,Dim> Gc;
diff --git a/src/Hydride/evaluators/ContravariantTargetMetricTensor_Def.hpp b/src/Hydride/evaluators/ContravariantTargetMetricTensor_Def.hpp
index 341b669..b95e866 100644
--- a/src/Hydride/evaluators/ContravariantTargetMetricTensor_Def.hpp
+++ b/src/Hydride/evaluators/ContravariantTargetMetricTensor_Def.hpp
@@ -17,7 +17,7 @@ ContravariantTargetMetricTensor<EvalT, Traits>::
 ContravariantTargetMetricTensor(const Teuchos::ParameterList& p, const Teuchos::RCP<Albany::Layouts>& dl) :
 
   solnVec       (p.get<std::string> ("Solution Vector Name"), dl->node_vector),
-  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType      (p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
   Gc            (p.get<std::string> ("Contravariant Metric Tensor Name"), dl->qp_tensor)
 
diff --git a/src/Hydride/evaluators/HydFractionResid.hpp b/src/Hydride/evaluators/HydFractionResid.hpp
index 8e5c054..6a8f0fa 100644
--- a/src/Hydride/evaluators/HydFractionResid.hpp
+++ b/src/Hydride/evaluators/HydFractionResid.hpp
@@ -60,11 +60,11 @@ private:
   PHX::MDField<ScalarT,Cell,Node> FhResidual;
 
   unsigned int numQPs, numDims, numNodes, worksetSize;
-  Intrepid2::FieldContainer<ScalarT> JGrad;
-  Intrepid2::FieldContainer<ScalarT> fh_coef;
-  Intrepid2::FieldContainer<ScalarT> fh_time_term;
-  Intrepid2::FieldContainer<ScalarT> CHZr_coef;
-  Intrepid2::FieldContainer<ScalarT> CH_time_term;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JGrad;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fh_coef;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fh_time_term;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CHZr_coef;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CH_time_term;
 
  //! Conductivity type
   std::string type; 
diff --git a/src/Hydride/evaluators/HydrideCResid.hpp b/src/Hydride/evaluators/HydrideCResid.hpp
index 11cf7f4..a8301a6 100644
--- a/src/Hydride/evaluators/HydrideCResid.hpp
+++ b/src/Hydride/evaluators/HydrideCResid.hpp
@@ -53,7 +53,7 @@ private:
   // Output:
   PHX::MDField<ScalarT,Cell,Node> cResidual;
 
-  Intrepid2::FieldContainer<ScalarT> gamma_term;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> gamma_term;
 
   unsigned int numQPs, numDims, numNodes, worksetSize;
 
diff --git a/src/Hydride/evaluators/HydrideStress.hpp b/src/Hydride/evaluators/HydrideStress.hpp
index f6c8390..b5a0b5b 100644
--- a/src/Hydride/evaluators/HydrideStress.hpp
+++ b/src/Hydride/evaluators/HydrideStress.hpp
@@ -48,7 +48,7 @@ private:
   unsigned int numDims;
 
   // The elasticity tensor
-  Intrepid2::FieldContainer<ScalarT> ElastTensor;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> ElastTensor;
 
   // Output:
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim,Dim> stress;
diff --git a/src/Hydride/evaluators/LaplaceBeltramiResid.hpp b/src/Hydride/evaluators/LaplaceBeltramiResid.hpp
index b75716e..1187104 100644
--- a/src/Hydride/evaluators/LaplaceBeltramiResid.hpp
+++ b/src/Hydride/evaluators/LaplaceBeltramiResid.hpp
@@ -47,17 +47,17 @@ class LaplaceBeltramiResid : public PHX::EvaluatorWithBaseImpl<Traits>,
     //! Coordinate vector at vertices being solved for
     PHX::MDField<ScalarT, Cell, Node, Dim> solnVec;
 
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
     Teuchos::RCP<shards::CellTopology> cellType;
     PHX::MDField<ScalarT, Cell, QuadPoint, Dim, Dim> Gc;
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-    Intrepid2::FieldContainer<RealType> refPoints;
-    Intrepid2::FieldContainer<RealType> refWeights;
-    Intrepid2::FieldContainer<ScalarT> jacobian;
-    Intrepid2::FieldContainer<ScalarT> jacobian_det;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian_det;
 
     // Output:
     PHX::MDField<ScalarT, Cell, Node, Dim> solnResidual;
diff --git a/src/Hydride/evaluators/LaplaceBeltramiResid_Def.hpp b/src/Hydride/evaluators/LaplaceBeltramiResid_Def.hpp
index 8de442a..09b164a 100644
--- a/src/Hydride/evaluators/LaplaceBeltramiResid_Def.hpp
+++ b/src/Hydride/evaluators/LaplaceBeltramiResid_Def.hpp
@@ -15,9 +15,9 @@ LaplaceBeltramiResid<EvalT, Traits>::
 LaplaceBeltramiResid(const Teuchos::ParameterList& p, const Teuchos::RCP<Albany::Layouts>& dl) :
   solnVec(p.get<std::string> ("Solution Vector Name"), dl->node_vector),
   Gc            (p.get<std::string> ("Contravariant Metric Tensor Name"), dl->qp_tensor),
-  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType(p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
-  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > ("Intrepid2 Basis")),
+  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > ("Intrepid2 Basis")),
   solnResidual(p.get<std::string> ("Residual Name"), dl->node_vector) {
 
   this->addDependentField(Gc);
diff --git a/src/Hydride/evaluators/LaplaceResid.hpp b/src/Hydride/evaluators/LaplaceResid.hpp
index f241459..98ffea8 100644
--- a/src/Hydride/evaluators/LaplaceResid.hpp
+++ b/src/Hydride/evaluators/LaplaceResid.hpp
@@ -50,16 +50,16 @@ class LaplaceResid : public PHX::EvaluatorWithBaseImpl<Traits>,
     //! Coordinate vector at vertices being solved for
     PHX::MDField<ScalarT, Cell, Node, Dim> solnVec;
 
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
     Teuchos::RCP<shards::CellTopology> cellType;
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-    Intrepid2::FieldContainer<RealType> refPoints;
-    Intrepid2::FieldContainer<RealType> refWeights;
-    Intrepid2::FieldContainer<MeshScalarT> jacobian;
-    Intrepid2::FieldContainer<MeshScalarT> jacobian_det;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_det;
 
     // Output:
     PHX::MDField<ScalarT, Cell, Node, Dim> solnResidual;
diff --git a/src/Hydride/evaluators/LaplaceResid_Def.hpp b/src/Hydride/evaluators/LaplaceResid_Def.hpp
index 0d504bb..2e727ad 100644
--- a/src/Hydride/evaluators/LaplaceResid_Def.hpp
+++ b/src/Hydride/evaluators/LaplaceResid_Def.hpp
@@ -15,9 +15,9 @@ LaplaceResid<EvalT, Traits>::
 LaplaceResid(const Teuchos::ParameterList& p, const Teuchos::RCP<Albany::Layouts>& dl) :
   coordVec(p.get<std::string> ("Coordinate Vector Name"), dl->vertices_vector),
   solnVec(p.get<std::string> ("Solution Vector Name"), dl->node_vector),
-  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType(p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
-  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > ("Intrepid2 Basis")),
+  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > ("Intrepid2 Basis")),
   solnResidual(p.get<std::string> ("Residual Name"), dl->node_vector) {
 
 
diff --git a/src/Hydride/evaluators/TPSLaplaceResid.hpp b/src/Hydride/evaluators/TPSLaplaceResid.hpp
index fad609d..1d71837 100644
--- a/src/Hydride/evaluators/TPSLaplaceResid.hpp
+++ b/src/Hydride/evaluators/TPSLaplaceResid.hpp
@@ -49,16 +49,16 @@ class TPSLaplaceResid : public PHX::EvaluatorWithBaseImpl<Traits>,
     //! Coordinate vector at vertices being solved for
     PHX::MDField<ScalarT, Cell, Node, Dim> solnVec;
 
-    Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
     Teuchos::RCP<shards::CellTopology> cellType;
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-    Intrepid2::FieldContainer<RealType> refPoints;
-    Intrepid2::FieldContainer<RealType> refWeights;
-    Intrepid2::FieldContainer<ScalarT> jacobian;
-    Intrepid2::FieldContainer<ScalarT> jacobian_det;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> jacobian_det;
 
     // Output:
     PHX::MDField<ScalarT, Cell, Node, Dim> solnResidual;
diff --git a/src/Hydride/evaluators/TPSLaplaceResid_Def.hpp b/src/Hydride/evaluators/TPSLaplaceResid_Def.hpp
index 91e0c88..4c993c5 100644
--- a/src/Hydride/evaluators/TPSLaplaceResid_Def.hpp
+++ b/src/Hydride/evaluators/TPSLaplaceResid_Def.hpp
@@ -17,9 +17,9 @@ template<typename EvalT, typename Traits>
 TPSLaplaceResid<EvalT, Traits>::
 TPSLaplaceResid(const Teuchos::ParameterList& p, const Teuchos::RCP<Albany::Layouts>& dl) :
   solnVec(p.get<std::string> ("Solution Vector Name"), dl->node_vector),
-  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType(p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
-  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > > ("Intrepid2 Basis")),
+  intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > ("Intrepid2 Basis")),
   solnResidual(p.get<std::string> ("Residual Name"), dl->node_vector) {
 
 
diff --git a/src/Hydride/problems/HydMorphProblem.hpp b/src/Hydride/problems/HydMorphProblem.hpp
index 82f1a3e..155df64 100644
--- a/src/Hydride/problems/HydMorphProblem.hpp
+++ b/src/Hydride/problems/HydMorphProblem.hpp
@@ -130,7 +130,7 @@ Albany::HydMorphProblem::constructEvaluators(
 
    const CellTopologyData * const elem_top = &meshSpecs.ctd;
 
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(*elem_top);
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (elem_top));
 
@@ -138,8 +138,8 @@ Albany::HydMorphProblem::constructEvaluators(
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPtsCell = cellCubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/Hydride/problems/HydrideProblem.hpp b/src/Hydride/problems/HydrideProblem.hpp
index 95320d8..0800978 100644
--- a/src/Hydride/problems/HydrideProblem.hpp
+++ b/src/Hydride/problems/HydrideProblem.hpp
@@ -139,7 +139,7 @@ Albany::HydrideProblem::constructEvaluators(
 
    const CellTopologyData * const elem_top = &meshSpecs.ctd;
 
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(*elem_top);
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (elem_top));
 
@@ -147,8 +147,8 @@ Albany::HydrideProblem::constructEvaluators(
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPtsCell = cellCubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/Hydride/problems/LaplaceBeltramiProblem.hpp b/src/Hydride/problems/LaplaceBeltramiProblem.hpp
index 2bf6492..e59fe8c 100644
--- a/src/Hydride/problems/LaplaceBeltramiProblem.hpp
+++ b/src/Hydride/problems/LaplaceBeltramiProblem.hpp
@@ -132,7 +132,7 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
 
   const CellTopologyData* const elem_top = &meshSpecs.ctd;
 
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
   intrepidBasis = Albany::getIntrepid2Basis(*elem_top);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology(elem_top));
 
@@ -140,8 +140,8 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   const int numQPtsCell = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
@@ -227,9 +227,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
     p->set<std::string>("Coordinate Vector Name", "Coord Vec");
     p->set< std::string >("Solution Vector Name", soln_name[0]);
 
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
          ("Intrepid2 Basis", intrepidBasis);
 
     //Output
@@ -247,9 +247,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
     //Input
     p->set< std::string >("Solution Vector Name", soln_name[0]);
 
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
          ("Intrepid2 Basis", intrepidBasis);
 
     //Output
@@ -283,9 +283,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       //Input
       p->set< std::string >("Solution Vector Name", "Current Coords");
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
          ("Intrepid2 Basis", intrepidBasis);
 
       //Output
@@ -354,9 +354,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       // Target is calculated from the actual solution
       p->set< std::string >("Solution Vector Name", soln_name[0]);
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
          ("Intrepid2 Basis", intrepidBasis);
 
       //Output
@@ -375,7 +375,7 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       // Inputs: 
       // Note that the target solution is used to build Gc
       p->set< std::string >("Solution Vector Name", tgt_name[0]);
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
@@ -396,9 +396,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       p->set< std::string >("Solution Vector Name", soln_name[0]);
       p->set<std::string>("Contravariant Metric Tensor Name", "Gc");
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
       //Output
@@ -458,9 +458,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       // Target is calculated from the actual solution
       p->set< std::string >("Solution Vector Name", "Current Coords");
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
          ("Intrepid2 Basis", intrepidBasis);
 
       //Output
@@ -479,7 +479,7 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       // Inputs: 
       // Note that the target solution is used to build Gc
       p->set< std::string >("Solution Vector Name", "Current Tgt Coords");
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
@@ -500,9 +500,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       p->set< std::string >("Solution Vector Name", "Current Coords");
       p->set<std::string>("Contravariant Metric Tensor Name", "Gc");
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
       //Output
@@ -583,7 +583,7 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       // Inputs: 
       // Note that the target solution is used to build Gc
       p->set< std::string >("Solution Vector Name", "Current Tgt Coords");
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
@@ -604,9 +604,9 @@ Albany::LaplaceBeltramiProblem::constructEvaluators(
       p->set< std::string >("Solution Vector Name", "Current Coords");
       p->set<std::string>("Contravariant Metric Tensor Name", "Gc");
 
-      p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+      p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
       p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
-      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+      p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
       //Output
diff --git a/src/Hydride/problems/MesoScaleLinkProblem.cpp b/src/Hydride/problems/MesoScaleLinkProblem.cpp
index 6028036..da18477 100644
--- a/src/Hydride/problems/MesoScaleLinkProblem.cpp
+++ b/src/Hydride/problems/MesoScaleLinkProblem.cpp
@@ -250,8 +250,8 @@ Albany::MesoScaleLinkProblem::getValidProblemParameters() const {
 
 void
 Albany::MesoScaleLinkProblem::getAllocatedStates(
-  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_
+  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_
 ) const {
   oldState_ = oldState;
   newState_ = newState;
diff --git a/src/Hydride/problems/MesoScaleLinkProblem.hpp b/src/Hydride/problems/MesoScaleLinkProblem.hpp
index c107224..6a0a39f 100644
--- a/src/Hydride/problems/MesoScaleLinkProblem.hpp
+++ b/src/Hydride/problems/MesoScaleLinkProblem.hpp
@@ -70,8 +70,8 @@ class MesoScaleLinkProblem : public Albany::AbstractProblem {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState_,
-      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState_
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState_,
+      Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState_
     ) const;
 
   private:
@@ -112,8 +112,8 @@ class MesoScaleLinkProblem : public Albany::AbstractProblem {
     Teuchos::RCP<MPI_Comm> interCommunicator;
     int numMesoPEs;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType> > > > newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > > newState;
 
 };
 
@@ -159,14 +159,14 @@ Albany::MesoScaleLinkProblem::constructEvaluators(
   std::string elementBlockName = meshSpecs.ebName;
 
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology(&meshSpecs.ctd));
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
   intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   const int numDim = cubature->getDimension();
   const int numQPts = cubature->getNumPoints();
diff --git a/src/LCM/evaluators/DamageResid.hpp b/src/LCM/evaluators/DamageResid.hpp
index 31d71f0..30c4177 100644
--- a/src/LCM/evaluators/DamageResid.hpp
+++ b/src/LCM/evaluators/DamageResid.hpp
@@ -52,7 +52,7 @@ private:
 
   bool enableTransient;
   unsigned int numQPs, numDims;
-  Intrepid2::FieldContainer<ScalarT> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
 };
 }
 
diff --git a/src/LCM/evaluators/DamageSource_Def.hpp b/src/LCM/evaluators/DamageSource_Def.hpp
index 7b4fc69..1538af3 100644
--- a/src/LCM/evaluators/DamageSource_Def.hpp
+++ b/src/LCM/evaluators/DamageSource_Def.hpp
@@ -84,8 +84,8 @@ evaluateFields(typename Traits::EvalData workset)
   //if (typeid(ScalarT) == typeid(RealType)) print = true;
 
 //  Albany::StateVariables  oldState = *workset.oldState;
-//  Intrepid2::FieldContainer<RealType>& source_old_FC = *oldState[sourceName];
-//  Intrepid2::FieldContainer<RealType>& damage_old_FC = *oldState[damageName];
+//  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& source_old_FC = *oldState[sourceName];
+//  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& damage_old_FC = *oldState[damageName];
   Albany::MDArray source_old_FC = (*workset.stateArrayPtr)[sourceName];
   Albany::MDArray damage_old_FC = (*workset.stateArrayPtr)[damageName];
 
diff --git a/src/LCM/evaluators/DislocationDensity.hpp b/src/LCM/evaluators/DislocationDensity.hpp
index ca522dc..8352b6a 100644
--- a/src/LCM/evaluators/DislocationDensity.hpp
+++ b/src/LCM/evaluators/DislocationDensity.hpp
@@ -54,8 +54,8 @@ private:
   PHX::MDField<double,Cell,QuadPoint,Dim,Dim> G;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<double> nodalFp;
-  Intrepid2::FieldContainer<double> curlFp;
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> nodalFp;
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> curlFp;
 
 };
 }
diff --git a/src/LCM/evaluators/FaceAverage.hpp b/src/LCM/evaluators/FaceAverage.hpp
index 4a65234..d835527 100644
--- a/src/LCM/evaluators/FaceAverage.hpp
+++ b/src/LCM/evaluators/FaceAverage.hpp
@@ -55,9 +55,9 @@ class FaceAverage : public PHX::EvaluatorWithBaseImpl<Traits>,
       // The field that was projected to the nodes
       PHX::MDField<ScalarT,Cell,Node,VecDim> projected;
       //Numerical integration rule
-      Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+      Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
       // FE basis
-      Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+      Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
       // The cell type
       Teuchos::RCP<shards::CellTopology> cellType;
 
@@ -69,9 +69,9 @@ class FaceAverage : public PHX::EvaluatorWithBaseImpl<Traits>,
       PHX::MDField<ScalarT,Cell,QuadPoint> temp;
 
       // For creating the quadrature weights
-      Intrepid2::FieldContainer<RealType> refPoints;
-      Intrepid2::FieldContainer<RealType> refWeights;
-      Intrepid2::FieldContainer<RealType> refValues;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
 
       // Face topology data
       const struct CellTopologyData_Subcell * sides;
diff --git a/src/LCM/evaluators/FaceAverage_Def.hpp b/src/LCM/evaluators/FaceAverage_Def.hpp
index c276ec4..0e5b7a1 100644
--- a/src/LCM/evaluators/FaceAverage_Def.hpp
+++ b/src/LCM/evaluators/FaceAverage_Def.hpp
@@ -20,9 +20,9 @@ FaceAverage(const Teuchos::ParameterList& p) :
     p.get<Teuchos::RCP<PHX::DataLayout>>("Vertex Vector Data Layout")),
   projected(p.get<std::string>("Projected Field Name"),
     p.get<Teuchos::RCP<PHX::DataLayout>>("Node Vector Data Layout")),
-  cubature(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Face Cubature")),
+  cubature(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Face Cubature")),
   intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis
-    <RealType, Intrepid2::FieldContainer<RealType>>>>("Face Intrepid2 Basis")),
+    <RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Face Intrepid2 Basis")),
   cellType(p.get<Teuchos::RCP<shards::CellTopology>>("Cell Type")),
   faceAve(p.get<std::string>("Face Average Name"),
     p.get<Teuchos::RCP<PHX::DataLayout>>("Face Vector Data Layout")),
diff --git a/src/LCM/evaluators/HDiffusionDeformationMatterResidual.hpp b/src/LCM/evaluators/HDiffusionDeformationMatterResidual.hpp
index dd7180e..d41dbe9 100644
--- a/src/LCM/evaluators/HDiffusionDeformationMatterResidual.hpp
+++ b/src/LCM/evaluators/HDiffusionDeformationMatterResidual.hpp
@@ -88,18 +88,18 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> Hflux;
-  Intrepid2::FieldContainer<ScalarT> C;
-  Intrepid2::FieldContainer<ScalarT> Cinv;
-  Intrepid2::FieldContainer<ScalarT> CinvTgrad;
-  Intrepid2::FieldContainer<ScalarT> CinvTgrad_old;
-  Intrepid2::FieldContainer<ScalarT> artificalDL;
-  Intrepid2::FieldContainer<ScalarT> stabilizedDL;
-  Intrepid2::FieldContainer<ScalarT> tauStress;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
-  Intrepid2::FieldContainer<ScalarT> tauH;
-  Intrepid2::FieldContainer<ScalarT> CinvTaugrad;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Hflux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CinvTgrad;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CinvTgrad_old;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> artificalDL;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> stabilizedDL;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tauStress;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tauH;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CinvTaugrad;
 
 
   ScalarT CLbar, vol ;
diff --git a/src/LCM/evaluators/J2Damage.hpp b/src/LCM/evaluators/J2Damage.hpp
index 76af042..060c236 100644
--- a/src/LCM/evaluators/J2Damage.hpp
+++ b/src/LCM/evaluators/J2Damage.hpp
@@ -61,9 +61,9 @@ namespace LCM {
     unsigned int numQPs;
     unsigned int numDims;
 
-    Intrepid2::FieldContainer<ScalarT> Fpinv;
-    Intrepid2::FieldContainer<ScalarT> FpinvT;
-    Intrepid2::FieldContainer<ScalarT> Cpinv;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Fpinv;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> FpinvT;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cpinv;
 
   };
 }
diff --git a/src/LCM/evaluators/J2Damage_Def.hpp b/src/LCM/evaluators/J2Damage_Def.hpp
index 6860e60..0462e70 100644
--- a/src/LCM/evaluators/J2Damage_Def.hpp
+++ b/src/LCM/evaluators/J2Damage_Def.hpp
@@ -136,9 +136,9 @@ namespace LCM {
     Intrepid2::Tensor<ScalarT> expA(3);
 
     //Albany::StateVariables  oldState = *workset.oldState;
-    //Intrepid2::FieldContainer<RealType>& Fpold   = *oldState[fpName];
-    //Intrepid2::FieldContainer<RealType>& eqpsold = *oldState[eqpsName];
-    //Intrepid2::FieldContainer<RealType>& phi_old_FC = *oldState["Damage"];
+    //Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& Fpold   = *oldState[fpName];
+    //Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& eqpsold = *oldState[eqpsName];
+    //Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& phi_old_FC = *oldState["Damage"];
 
     Albany::MDArray Fpold = (*workset.stateArrayPtr)[fpName];
     Albany::MDArray eqpsold = (*workset.stateArrayPtr)[eqpsName];
diff --git a/src/LCM/evaluators/J2Stress.hpp b/src/LCM/evaluators/J2Stress.hpp
index 8e760b3..b493017 100644
--- a/src/LCM/evaluators/J2Stress.hpp
+++ b/src/LCM/evaluators/J2Stress.hpp
@@ -38,8 +38,8 @@ private:
   typedef typename EvalT::ScalarT ScalarT;
   typedef typename EvalT::MeshScalarT MeshScalarT;
 
-  typename EvalT::ScalarT norm(Intrepid2::FieldContainer<ScalarT>);
-  void exponential_map(Intrepid2::FieldContainer<ScalarT> &, const Intrepid2::FieldContainer<ScalarT>);
+  typename EvalT::ScalarT norm(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>);
+  void exponential_map(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> &, const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>);
 
   // Input:
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim,Dim> defgrad;
@@ -62,17 +62,17 @@ private:
   unsigned int worksetSize;
 
   // scratch space FCs
-  Intrepid2::FieldContainer<ScalarT> be;
-  Intrepid2::FieldContainer<ScalarT> s;
-  Intrepid2::FieldContainer<ScalarT> N;
-  Intrepid2::FieldContainer<ScalarT> A;
-  Intrepid2::FieldContainer<ScalarT> expA;
-  Intrepid2::FieldContainer<ScalarT> Fpinv;
-  Intrepid2::FieldContainer<ScalarT> FpinvT;
-  Intrepid2::FieldContainer<ScalarT> Cpinv;
-
-  Intrepid2::FieldContainer<ScalarT> tmp;
-  Intrepid2::FieldContainer<ScalarT> tmp2;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> be;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> s;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> N;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> A;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> expA;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Fpinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> FpinvT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cpinv;
+
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tmp;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tmp2;
 
 };
 }
diff --git a/src/LCM/evaluators/J2Stress_Def.hpp b/src/LCM/evaluators/J2Stress_Def.hpp
index 708bb3b..a1caf2e 100644
--- a/src/LCM/evaluators/J2Stress_Def.hpp
+++ b/src/LCM/evaluators/J2Stress_Def.hpp
@@ -393,8 +393,8 @@ evaluateFields(typename Traits::EvalData workset)
 //**********************************************************************
 template<typename EvalT, typename Traits>
 void
-J2Stress<EvalT, Traits>::exponential_map(Intrepid2::FieldContainer<ScalarT> & expA,
-		const Intrepid2::FieldContainer<ScalarT> A)
+J2Stress<EvalT, Traits>::exponential_map(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & expA,
+		const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> A)
 {
   tmp.initialize(0.0);
   expA.initialize(0.0);
@@ -433,14 +433,14 @@ J2Stress<EvalT, Traits>::exponential_map(Intrepid2::FieldContainer<ScalarT> & ex
                           std::endl << "Error in exponential map, k = " << k <<
                           "\nnorm0 = " << norm0 <<
                           "\nnorm = " << norm(tmp)/norm0 <<
-                          "\nA = \n" << A << std::endl);
+                           std::endl);
 
   }
 }
 //**********************************************************************
 template<typename EvalT, typename Traits>
 typename EvalT::ScalarT
-J2Stress<EvalT, Traits>::norm(Intrepid2::FieldContainer<ScalarT> A)
+J2Stress<EvalT, Traits>::norm(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> A)
 {
   ScalarT max(0.0), colsum;
 
diff --git a/src/LCM/evaluators/MeshSizeField.hpp b/src/LCM/evaluators/MeshSizeField.hpp
index 86a9b3b..b657f25 100644
--- a/src/LCM/evaluators/MeshSizeField.hpp
+++ b/src/LCM/evaluators/MeshSizeField.hpp
@@ -134,14 +134,14 @@ namespace LCM {
     PHX::MDField<ScalarT,Cell,QuadPoint> isoMeshSizeField;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-    Intrepid2::FieldContainer<RealType> refPoints;
-    Intrepid2::FieldContainer<RealType> refWeights;
-    Intrepid2::FieldContainer<ScalarT> dxdxi;
-    Intrepid2::FieldContainer<ScalarT> dEDdxi;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dxdxi;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dEDdxi;
 
-    Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
 
     ///
     /// Number of integration points
@@ -247,13 +247,13 @@ namespace LCM {
     PHX::MDField<ScalarT,Cell,QuadPoint,Dim> anisoMeshSizeField;
 
     // Temporary FieldContainers
-    Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-    Intrepid2::FieldContainer<RealType> refPoints;
-    Intrepid2::FieldContainer<RealType> refWeights;
-    Intrepid2::FieldContainer<ScalarT> dxdxi;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dxdxi;
 
-    Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
-    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+    Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
+    Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
 
     ///
     /// Number of integration points
diff --git a/src/LCM/evaluators/MeshSizeField_Def.hpp b/src/LCM/evaluators/MeshSizeField_Def.hpp
index b6a0d7a..a382621 100644
--- a/src/LCM/evaluators/MeshSizeField_Def.hpp
+++ b/src/LCM/evaluators/MeshSizeField_Def.hpp
@@ -24,9 +24,9 @@ namespace LCM {
     MeshSizeFieldBase<PHAL::AlbanyTraits::Residual, Traits> (dl),
     currentCoords (p.get<std::string>("Current Coordinates Name"), dl->node_vector),
     isoMeshSizeField (p.get<std::string>("IsoTropic MeshSizeField Name"), dl->qp_scalar),
-    cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, 
-         Intrepid2::FieldContainer<RealType>>>> ("Intrepid2 Basis"))
+         Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> ("Intrepid2 Basis"))
 
   {
 
@@ -140,9 +140,9 @@ namespace LCM {
     MeshSizeFieldBase<PHAL::AlbanyTraits::Residual, Traits> (dl),
     currentCoords (p.get<std::string>("Current Coordinates Name"), dl->node_vector),
     anisoMeshSizeField (p.get<std::string>("AnisoTropic MeshSizeField Name"), dl->qp_scalar),
-    cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature(p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     intrepidBasis(p.get<Teuchos::RCP<Intrepid2::Basis<RealType, 
-         Intrepid2::FieldContainer<RealType>>>> ("Intrepid2 Basis"))
+         Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> ("Intrepid2 Basis"))
 
   {
 
diff --git a/src/LCM/evaluators/MortarContactConstraints.hpp b/src/LCM/evaluators/MortarContactConstraints.hpp
index ef4cc79..0a1a85d 100644
--- a/src/LCM/evaluators/MortarContactConstraints.hpp
+++ b/src/LCM/evaluators/MortarContactConstraints.hpp
@@ -81,7 +81,7 @@ protected:
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
 
 //! Temporary containers
-  Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
 
 
diff --git a/src/LCM/evaluators/PisdWdF.hpp b/src/LCM/evaluators/PisdWdF.hpp
index 3910fcc..96e6a78 100644
--- a/src/LCM/evaluators/PisdWdF.hpp
+++ b/src/LCM/evaluators/PisdWdF.hpp
@@ -43,7 +43,7 @@ private:
   //typedef typename Sacado::Fad::SLFad<ScalarT, 9> EnergyFadType;
   typedef typename Sacado::Fad::SLFad<ScalarT, 9> EnergyFadType;
   EnergyFadType computeEnergy(ScalarT& kappa, ScalarT& mu,
-                          Intrepid2::FieldContainer<EnergyFadType>& W);
+                          Intrepid2::FieldContainer_Kokkos<EnergyFadType, PHX::Layout, PHX::Device>& W);
 
 
   // Input:
diff --git a/src/LCM/evaluators/PisdWdF_Def.hpp b/src/LCM/evaluators/PisdWdF_Def.hpp
index 36e6b68..b4fcbe8 100644
--- a/src/LCM/evaluators/PisdWdF_Def.hpp
+++ b/src/LCM/evaluators/PisdWdF_Def.hpp
@@ -62,7 +62,7 @@ evaluateFields(typename Traits::EvalData workset)
   ScalarT mu;
 
   // Leading dimension of 1 added so we can use Intrepid2::det
-  Intrepid2::FieldContainer<EnergyFadType> F(1,numDims,numDims);
+  Intrepid2::FieldContainer_Kokkos<EnergyFadType, PHX::Layout, PHX::Device> F(1,numDims,numDims);
 
   // Allocate F ( = defgrad of derivative types) and seed with identity derivs
   for (int i=0; i < numDims; ++i) 
@@ -100,10 +100,10 @@ evaluateFields(typename Traits::EvalData workset)
 
 template<typename EvalT, typename Traits>
 typename PisdWdF<EvalT, Traits>::EnergyFadType
-PisdWdF<EvalT, Traits>::computeEnergy(ScalarT& kappa, ScalarT& mu, Intrepid2::FieldContainer<EnergyFadType>& F) 
+PisdWdF<EvalT, Traits>::computeEnergy(ScalarT& kappa, ScalarT& mu, Intrepid2::FieldContainer_Kokkos<EnergyFadType, PHX::Layout, PHX::Device>& F) 
 {
   // array of length 1 so Intrepid2::det can be called.
-  Intrepid2::FieldContainer<EnergyFadType> Jvec(1);
+  Intrepid2::FieldContainer_Kokkos<EnergyFadType, PHX::Layout, PHX::Device> Jvec(1);
   Intrepid2::RealSpaceTools<EnergyFadType>::det(Jvec, F);
   EnergyFadType& J =  Jvec(0);
   EnergyFadType Jm23  = std::pow(J, -2./3.);
diff --git a/src/LCM/evaluators/PoroElasticityResidMass.hpp b/src/LCM/evaluators/PoroElasticityResidMass.hpp
index 84d2369..9e4ce8f 100644
--- a/src/LCM/evaluators/PoroElasticityResidMass.hpp
+++ b/src/LCM/evaluators/PoroElasticityResidMass.hpp
@@ -62,7 +62,7 @@ private:
 
   // stabilization term
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
   PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
 
@@ -85,17 +85,17 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> fluxdt;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
-  Intrepid2::FieldContainer<ScalarT> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fluxdt;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
-  Intrepid2::FieldContainer<MeshScalarT> Gc;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> Gc;
 
 
   ScalarT porePbar, vol;
diff --git a/src/LCM/evaluators/PoroElasticityResidMass_Def.hpp b/src/LCM/evaluators/PoroElasticityResidMass_Def.hpp
index 3de5c9e..709c63c 100644
--- a/src/LCM/evaluators/PoroElasticityResidMass_Def.hpp
+++ b/src/LCM/evaluators/PoroElasticityResidMass_Def.hpp
@@ -47,7 +47,7 @@ namespace LCM {
 		 p.get<Teuchos::RCP<PHX::DataLayout>>("QP Tensor Data Layout") ),
 	coordVec      (p.get<std::string>                   ("Coordinate Vector Name"),
 				 p.get<Teuchos::RCP<PHX::DataLayout>>("Coordinate Data Layout") ),
-    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
 	cellType      (p.get<Teuchos::RCP <shards::CellTopology>> ("Cell Type")),
 	weights       (p.get<std::string>                   ("Weights Name"),
 		         p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
diff --git a/src/LCM/evaluators/ProjectIPtoNodalField.hpp b/src/LCM/evaluators/ProjectIPtoNodalField.hpp
index 84993d6..110135d 100644
--- a/src/LCM/evaluators/ProjectIPtoNodalField.hpp
+++ b/src/LCM/evaluators/ProjectIPtoNodalField.hpp
@@ -122,7 +122,7 @@ private:
 #ifdef PROJ_INTERP_TEST
   PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim> coords_qp_;
 #endif
-  typedef Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>
+  typedef Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>
           Intrepid2Basis;
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coords_verts_;
   Teuchos::RCP<ProjectIPtoNodalFieldQuadrature> quad_mgr_;
diff --git a/src/LCM/evaluators/ProjectIPtoNodalField_Def.hpp b/src/LCM/evaluators/ProjectIPtoNodalField_Def.hpp
index 2088978..11db0d5 100644
--- a/src/LCM/evaluators/ProjectIPtoNodalField_Def.hpp
+++ b/src/LCM/evaluators/ProjectIPtoNodalField_Def.hpp
@@ -56,7 +56,7 @@ private:
   int nwrkr_, prectr_, postctr_;
 };
 
-typedef Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>
+typedef Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>
         Intrepid2Basis;
 
 class ProjectIPtoNodalFieldQuadrature {
@@ -67,7 +67,7 @@ class ProjectIPtoNodalFieldQuadrature {
   Teuchos::RCP<Intrepid2Basis> intrepid_basis_;
   CellTopologyData ctd_;
   Teuchos::RCP<shards::CellTopology> cell_topo_;
-  Intrepid2::FieldContainer<RealType> ref_points_, ref_weights_;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> ref_points_, ref_weights_;
 
 public:
   ProjectIPtoNodalFieldQuadrature(
@@ -88,8 +88,8 @@ ProjectIPtoNodalFieldQuadrature (
   : ctd_(ctd)
 {
   cell_topo_ = Teuchos::rcp(new shards::CellTopology(&ctd_));
-  Intrepid2::DefaultCubatureFactory<RealType> cub_factory;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>>
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cub_factory;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
     cubature = cub_factory.create(*cell_topo_, degree);
   const int nqp = cubature->getNumPoints(), nd = cubature->getDimension();
   ref_points_.resize(nqp, nd);
@@ -128,7 +128,7 @@ evaluateBasis (const PHX::MDField<MeshScalarT,Cell,Vertex,Dim>& coord_vert) {
   typedef CellTools<RealType> CellTools;
   const int nqp = ref_points_.dimension(0), nd = ref_points_.dimension(1),
     nc = coord_vert.dimension(0), nn = coord_vert.dimension(1);
-  FieldContainer<RealType> jacobian(nc, nqp, nd, nd), jacobian_det(nc, nqp),
+  FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> jacobian(nc, nqp, nd, nd), jacobian_det(nc, nqp),
     weighted_measure(nc, nqp), val_ref_points(nn, nqp);
   CellTools::setJacobian(jacobian, ref_points_, coord_vert, *cell_topo_);
   CellTools::setJacobianDet(jacobian_det, jacobian);
diff --git a/src/LCM/evaluators/ScalarL2ProjectionResidual.hpp b/src/LCM/evaluators/ScalarL2ProjectionResidual.hpp
index 23893e1..063a3d5 100644
--- a/src/LCM/evaluators/ScalarL2ProjectionResidual.hpp
+++ b/src/LCM/evaluators/ScalarL2ProjectionResidual.hpp
@@ -58,7 +58,7 @@ private:
   unsigned int worksetSize;
 
 
-  Intrepid2::FieldContainer<ScalarT> tauH;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tauH;
 
   // Output:
   PHX::MDField<ScalarT,Cell,Node> TResidual;
diff --git a/src/LCM/evaluators/TLElasResid.hpp b/src/LCM/evaluators/TLElasResid.hpp
index 970f8b7..f14743a 100644
--- a/src/LCM/evaluators/TLElasResid.hpp
+++ b/src/LCM/evaluators/TLElasResid.hpp
@@ -59,10 +59,10 @@ private:
   std::string matModel;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> P;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> P;
 };
 }
 
diff --git a/src/LCM/evaluators/TLPoroPlasticityResidMass.hpp b/src/LCM/evaluators/TLPoroPlasticityResidMass.hpp
index 68f0e91..a2c23ae 100644
--- a/src/LCM/evaluators/TLPoroPlasticityResidMass.hpp
+++ b/src/LCM/evaluators/TLPoroPlasticityResidMass.hpp
@@ -64,7 +64,7 @@ private:
 
   // stabilization term
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
   PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
 
@@ -89,26 +89,26 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> fluxdt;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
-  Intrepid2::FieldContainer<ScalarT> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fluxdt;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
-  Intrepid2::FieldContainer<MeshScalarT> Gc;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> Gc;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> C;
-  Intrepid2::FieldContainer<ScalarT> Cinv;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> KJF_invT;
-  Intrepid2::FieldContainer<ScalarT> Kref;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> KJF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Kref;
 
   ScalarT porePbar, vol;
   ScalarT trialPbar;
diff --git a/src/LCM/evaluators/TLPoroPlasticityResidMass_Def.hpp b/src/LCM/evaluators/TLPoroPlasticityResidMass_Def.hpp
index bdc103d..67dcf29 100644
--- a/src/LCM/evaluators/TLPoroPlasticityResidMass_Def.hpp
+++ b/src/LCM/evaluators/TLPoroPlasticityResidMass_Def.hpp
@@ -43,7 +43,7 @@ namespace LCM {
 		 p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
     coordVec  (p.get<std::string>                   ("Coordinate Vector Name"),
          p.get<Teuchos::RCP<PHX::DataLayout>>("Coordinate Data Layout") ),
-    cubature   (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature   (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     cellType    (p.get<Teuchos::RCP <shards::CellTopology>> ("Cell Type")),
     weights     (p.get<std::string>                   ("Weights Name"),
          p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
diff --git a/src/LCM/evaluators/TLPoroPlasticityResidMomentum.hpp b/src/LCM/evaluators/TLPoroPlasticityResidMomentum.hpp
index 30f6cd2..26a87e2 100644
--- a/src/LCM/evaluators/TLPoroPlasticityResidMomentum.hpp
+++ b/src/LCM/evaluators/TLPoroPlasticityResidMomentum.hpp
@@ -56,10 +56,10 @@ private:
   bool enableTransient;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> P;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> P;
 
 };
 }
diff --git a/src/LCM/evaluators/TLPoroStress.hpp b/src/LCM/evaluators/TLPoroStress.hpp
index f2adb8a..d7dadf7 100644
--- a/src/LCM/evaluators/TLPoroStress.hpp
+++ b/src/LCM/evaluators/TLPoroStress.hpp
@@ -50,11 +50,11 @@ private:
   unsigned int numDims;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> JpF_invT;
-  Intrepid2::FieldContainer<ScalarT> JBpF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JpF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JBpF_invT;
 
   // Material Name
     std::string matModel;
diff --git a/src/LCM/evaluators/ThermoMechanicalEnergyResidual.hpp b/src/LCM/evaluators/ThermoMechanicalEnergyResidual.hpp
index 81af622..44d9bf8 100644
--- a/src/LCM/evaluators/ThermoMechanicalEnergyResidual.hpp
+++ b/src/LCM/evaluators/ThermoMechanicalEnergyResidual.hpp
@@ -58,11 +58,11 @@ namespace LCM {
     bool haveSource;
     std::string tempName;
     unsigned int numQPs, numDims, worksetSize;
-    Intrepid2::FieldContainer<ScalarT> flux;
-    Intrepid2::FieldContainer<ScalarT> C;
-    Intrepid2::FieldContainer<ScalarT> Cinv;
-    Intrepid2::FieldContainer<ScalarT> CinvTgrad;
-    Intrepid2::FieldContainer<ScalarT> Tdot;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> CinvTgrad;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Tdot;
   };
 }
 
diff --git a/src/LCM/evaluators/ThermoMechanicalMomentumResidual.hpp b/src/LCM/evaluators/ThermoMechanicalMomentumResidual.hpp
index e1a47a4..de9330d 100644
--- a/src/LCM/evaluators/ThermoMechanicalMomentumResidual.hpp
+++ b/src/LCM/evaluators/ThermoMechanicalMomentumResidual.hpp
@@ -59,10 +59,10 @@ private:
   std::string matModel;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> P;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> P;
 };
 }
 
diff --git a/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy.hpp b/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy.hpp
index d25fd83..6123d84 100644
--- a/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy.hpp
+++ b/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy.hpp
@@ -71,7 +71,7 @@ private:
 
   // stabilization term
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
   PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
 
@@ -98,27 +98,27 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> fluxdt;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> aterm;
-  Intrepid2::FieldContainer<ScalarT> tterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fluxdt;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
-  Intrepid2::FieldContainer<MeshScalarT> Gc;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> Gc;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> C;
-  Intrepid2::FieldContainer<ScalarT> Cinv;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> KJF_invT;
-  Intrepid2::FieldContainer<ScalarT> Kref;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> KJF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Kref;
 
   ScalarT porePbar, Tempbar, vol, corrTerm;
   ScalarT trialPbar;
diff --git a/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy_Def.hpp b/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy_Def.hpp
index cb10d87..547dea7 100644
--- a/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy_Def.hpp
+++ b/src/LCM/evaluators/ThermoPoroPlasticityResidEnergy_Def.hpp
@@ -58,7 +58,7 @@ namespace LCM {
 		 p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
 	coordVec      (p.get<std::string>                   ("Coordinate Vector Name"),
 				 p.get<Teuchos::RCP<PHX::DataLayout>>("Coordinate Data Layout") ),
-    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
 	cellType      (p.get<Teuchos::RCP <shards::CellTopology>> ("Cell Type")),
 	weights       (p.get<std::string>                   ("Weights Name"),
 		         p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
diff --git a/src/LCM/evaluators/ThermoPoroPlasticityResidMass.hpp b/src/LCM/evaluators/ThermoPoroPlasticityResidMass.hpp
index 58e2816..07ace4e 100644
--- a/src/LCM/evaluators/ThermoPoroPlasticityResidMass.hpp
+++ b/src/LCM/evaluators/ThermoPoroPlasticityResidMass.hpp
@@ -70,7 +70,7 @@ private:
 
   // stabilization term
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
   PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
 
@@ -94,29 +94,29 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> fgravity;
-  Intrepid2::FieldContainer<ScalarT> fluxdt;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> Tterm;
-  Intrepid2::FieldContainer<ScalarT> aterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fgravity;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fluxdt;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Tterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
-  Intrepid2::FieldContainer<MeshScalarT> Gc;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> Gc;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> C;
-  Intrepid2::FieldContainer<ScalarT> Cinv;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> KJF_invT;
-  Intrepid2::FieldContainer<ScalarT> Kref;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> KJF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Kref;
 
   ScalarT porePbar, Tempbar, vol;
   ScalarT trialPbar;
diff --git a/src/LCM/evaluators/ThermoPoroPlasticityResidMomentum.hpp b/src/LCM/evaluators/ThermoPoroPlasticityResidMomentum.hpp
index 9dd6f3d..f42b2e0 100644
--- a/src/LCM/evaluators/ThermoPoroPlasticityResidMomentum.hpp
+++ b/src/LCM/evaluators/ThermoPoroPlasticityResidMomentum.hpp
@@ -65,11 +65,11 @@ private:
   ScalarT dTemp;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-//  Intrepid2::FieldContainer<ScalarT> P;
-  Intrepid2::FieldContainer<ScalarT> thermoEPS;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+//  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> P;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> thermoEPS;
 
 };
 }
diff --git a/src/LCM/evaluators/TvergaardHutchinson.hpp b/src/LCM/evaluators/TvergaardHutchinson.hpp
index abfc5ab..1687a35 100644
--- a/src/LCM/evaluators/TvergaardHutchinson.hpp
+++ b/src/LCM/evaluators/TvergaardHutchinson.hpp
@@ -44,9 +44,9 @@ private:
 
 	// Input
 	//! Numerical integration rule
-	Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+	Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
 	//! Finite element basis for the midplane
-	Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+	Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
 	// current basis vector of the surface element
 	PHX::MDField<ScalarT,Cell,QuadPoint,Dim, Dim> currentBasis;
 	// displacement jump
diff --git a/src/LCM/evaluators/TvergaardHutchinson_Def.hpp b/src/LCM/evaluators/TvergaardHutchinson_Def.hpp
index ca0c1cd..f71419e 100644
--- a/src/LCM/evaluators/TvergaardHutchinson_Def.hpp
+++ b/src/LCM/evaluators/TvergaardHutchinson_Def.hpp
@@ -14,8 +14,8 @@ namespace LCM{
   TvergaardHutchinson<EvalT, Traits>::
   TvergaardHutchinson(const Teuchos::ParameterList& p,
                       const Teuchos::RCP<Albany::Layouts>& dl) :
-    cubature        (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
-    intrepidBasis   (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature        (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
+    intrepidBasis   (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     jump(p.get<std::string>("Vector Jump Name"),dl->qp_vector),
     currentBasis(p.get<std::string>("Current Basis Name"),dl->qp_tensor),
     cohesiveTraction(p.get<std::string>("Cohesive Traction Name"),dl->qp_vector),
diff --git a/src/LCM/evaluators/UnSatPoroElasticityResidMass.hpp b/src/LCM/evaluators/UnSatPoroElasticityResidMass.hpp
index 5ca9278..e460743 100644
--- a/src/LCM/evaluators/UnSatPoroElasticityResidMass.hpp
+++ b/src/LCM/evaluators/UnSatPoroElasticityResidMass.hpp
@@ -63,7 +63,7 @@ private:
 
   // stabilization term
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
   PHX::MDField<MeshScalarT,Cell,QuadPoint> weights;
 
@@ -87,17 +87,17 @@ private:
   unsigned int worksetSize;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> fluxdt;
-  Intrepid2::FieldContainer<ScalarT> pterm;
-  Intrepid2::FieldContainer<ScalarT> tpterm;
-  Intrepid2::FieldContainer<ScalarT> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> fluxdt;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> tpterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
-  Intrepid2::FieldContainer<MeshScalarT> Gc;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> Gc;
 
 
   ScalarT porePbar, vol;
diff --git a/src/LCM/evaluators/UnSatPoroElasticityResidMass_Def.hpp b/src/LCM/evaluators/UnSatPoroElasticityResidMass_Def.hpp
index 1219da1..474f31c 100644
--- a/src/LCM/evaluators/UnSatPoroElasticityResidMass_Def.hpp
+++ b/src/LCM/evaluators/UnSatPoroElasticityResidMass_Def.hpp
@@ -45,7 +45,7 @@ namespace LCM {
 		 p.get<Teuchos::RCP<PHX::DataLayout>>("QP Tensor Data Layout") ),
 	coordVec      (p.get<std::string>                   ("Coordinate Vector Name"),
 				 p.get<Teuchos::RCP<PHX::DataLayout>>("Coordinate Data Layout") ),
-    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
 	cellType      (p.get<Teuchos::RCP <shards::CellTopology>> ("Cell Type")),
 	weights       (p.get<std::string>                   ("Weights Name"),
 		         p.get<Teuchos::RCP<PHX::DataLayout>>("QP Scalar Data Layout") ),
diff --git a/src/LCM/evaluators/bc/SchwarzBC_Def.hpp b/src/LCM/evaluators/bc/SchwarzBC_Def.hpp
index a6d6183..8961486 100644
--- a/src/LCM/evaluators/bc/SchwarzBC_Def.hpp
+++ b/src/LCM/evaluators/bc/SchwarzBC_Def.hpp
@@ -232,7 +232,7 @@ computeBCs(
   auto
   parametric_dimension = 0;
 
-  Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double>>>
+  Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>>>
   basis;
 
   Teuchos::ArrayRCP<double> const &
@@ -305,7 +305,7 @@ computeBCs(
         parametric_dimension = 3;
 
         basis = Teuchos::rcp(new Intrepid2::Basis_HGRAD_TET_C1_FEM<
-            double, Intrepid2::FieldContainer<double>>());
+            double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>>());
 
         in_element = Intrepid2::in_tetrahedron(
             point,
@@ -320,7 +320,7 @@ computeBCs(
         parametric_dimension = 3;
 
         basis = Teuchos::rcp(new Intrepid2::Basis_HGRAD_HEX_C1_FEM<
-            double, Intrepid2::FieldContainer<double>>());
+            double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>>());
 
         in_element = Intrepid2::in_hexahedron(
             point,
@@ -357,7 +357,7 @@ computeBCs(
   number_cells = 1;
 
   // Container for the parametric coordinates
-  Intrepid2::FieldContainer<double>
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>
   parametric_point(number_cells, parametric_dimension);
 
   for (auto j = 0; j < parametric_dimension; ++j) {
@@ -365,7 +365,7 @@ computeBCs(
   }
 
   // Container for the physical point
-  Intrepid2::FieldContainer<double>
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>
   physical_coordinates(number_cells, coupled_dimension);
 
   for (auto i = 0; i < coupled_dimension; ++i) {
@@ -375,7 +375,7 @@ computeBCs(
   // Container for the physical nodal coordinates
   // TODO: matToReference more general, accepts more topologies.
   // Use it to find if point is contained in element as well.
-  Intrepid2::FieldContainer<double>
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>
   nodal_coordinates(number_cells, coupled_vertex_count, coupled_dimension);
 
   for (auto i = 0; i < coupled_vertex_count; ++i) {
@@ -397,7 +397,7 @@ computeBCs(
   auto const
   number_points = 1;
 
-  Intrepid2::FieldContainer<double>
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device>
   basis_values(coupled_vertex_count, number_points);
 
   basis->getValues(basis_values, parametric_point, Intrepid2::OPERATOR_VALUE);
diff --git a/src/LCM/evaluators/lame/LameStress_Def.hpp b/src/LCM/evaluators/lame/LameStress_Def.hpp
index 7ad6820..695214d 100644
--- a/src/LCM/evaluators/lame/LameStress_Def.hpp
+++ b/src/LCM/evaluators/lame/LameStress_Def.hpp
@@ -458,7 +458,7 @@ void LameStressBase<EvalT, Traits>::
       // copy data from the state manager to the LAME data structure
       for(int iVar=0 ; iVar<numStateVariables ; iVar++, stateOldPtr++){
         //std::string& variableName = this->lameMaterialModelStateVariableNames[iVar];
-        //const Intrepid2::FieldContainer<RealType>& stateVar = *oldState[variableName];
+        //const Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>& stateVar = *oldState[variableName];
         const std::string& variableName = this->lameMaterialModelStateVariableNames[iVar]+"_old";
         Albany::MDArray stateVar = (*workset.stateArrayPtr)[variableName];
         *stateOldPtr = stateVar(cell,qp);
diff --git a/src/LCM/evaluators/surface-element/SurfaceBasis.hpp b/src/LCM/evaluators/surface-element/SurfaceBasis.hpp
index a901931..362781a 100644
--- a/src/LCM/evaluators/surface-element/SurfaceBasis.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceBasis.hpp
@@ -63,7 +63,7 @@ public:
   void
   computeMidplaneCoords(
       PHX::MDField<ST, Cell, Vertex, Dim> const coords,
-      Intrepid2::FieldContainer<ST> & midplane_coords);
+      Intrepid2::FieldContainer_Kokkos<ST, PHX::Layout, PHX::Device> & midplane_coords);
 
   ///
   /// Computes basis from the reference midplane
@@ -72,7 +72,7 @@ public:
   ///
   template<typename ST>
   void
-  computeBasisVectors(Intrepid2::FieldContainer<ST> const & midplane_coords,
+  computeBasisVectors(Intrepid2::FieldContainer_Kokkos<ST, PHX::Layout, PHX::Device> const & midplane_coords,
       PHX::MDField<ST, Cell, QuadPoint, Dim, Dim> basis);
 
   ///
@@ -84,7 +84,7 @@ public:
   ///
   void
   computeDualBasisVectors(
-      Intrepid2::FieldContainer<MeshScalarT> const & midplane_coords,
+      Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> const & midplane_coords,
       PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim, Dim> const basis,
       PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim> normal,
       PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim, Dim> dual_basis);
@@ -117,25 +117,25 @@ private:
   ///
   /// Input: Numerical integration rule
   ///
-  Teuchos::RCP<Intrepid2::Cubature<RealType>>
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   cubature_;
 
   ///
   /// Input: Finite element basis for the midplane
   ///
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   intrepid_basis_;
 
   ///
   /// Local FieldContainer to store the reference midplane_coords
   ///
-  Intrepid2::FieldContainer<MeshScalarT>
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>
   ref_midplane_coords_;
 
   ///
   /// Local FieldContainer to store the current midplane_coords
   ///
-  Intrepid2::FieldContainer<ScalarT>
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>
   current_midplane_coords_;
 
   ///
@@ -178,25 +178,25 @@ private:
   ///
   /// Reference Cell FieldContainer for basis values
   ///
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_values_;
 
   ///
   /// Reference Cell FieldContainer for basis gradients
   ///
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_grads_;
 
   ///
   /// Reference Cell FieldContainer for integration point locations
   ///
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_points_;
 
   ///
   /// Reference Cell FieldContainer for integration weights
   ///
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_weights_;
 };
 }
diff --git a/src/LCM/evaluators/surface-element/SurfaceBasis_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceBasis_Def.hpp
index e37fbe6..cab7919 100644
--- a/src/LCM/evaluators/surface-element/SurfaceBasis_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceBasis_Def.hpp
@@ -23,10 +23,10 @@ SurfaceBasis(
     reference_coords_(
         p.get<std::string>("Reference Coordinates Name"),
         dl->vertices_vector),
-    cubature_(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature_(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     intrepid_basis_(
         p.get<Teuchos::RCP<Intrepid2::Basis<RealType,
-        Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+        Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     ref_basis_(p.get<std::string>("Reference Basis Name"), dl->qp_tensor),
     ref_area_(p.get<std::string>("Reference Area Name"), dl->qp_scalar),
     ref_dual_basis_(
@@ -174,7 +174,7 @@ void
 SurfaceBasis<EvalT, Traits>::
 computeMidplaneCoords(
     PHX::MDField<ST, Cell, Vertex, Dim> const coords,
-    Intrepid2::FieldContainer<ST> & midplane_coords)
+    Intrepid2::FieldContainer_Kokkos<ST, PHX::Layout, PHX::Device> & midplane_coords)
 {
   for (int cell(0); cell < midplane_coords.dimension(0); ++cell) {
     // compute the mid-plane coordinates
@@ -198,7 +198,7 @@ template<typename EvalT, typename Traits>
 template<typename ST>
 void
 SurfaceBasis<EvalT, Traits>::
-computeBasisVectors(Intrepid2::FieldContainer<ST> const & midplane_coords,
+computeBasisVectors(Intrepid2::FieldContainer_Kokkos<ST, PHX::Layout, PHX::Device> const & midplane_coords,
     PHX::MDField<ST, Cell, QuadPoint, Dim, Dim> basis)
 {
   for (int cell(0); cell < midplane_coords.dimension(0); ++cell) {
@@ -244,7 +244,7 @@ template<typename EvalT, typename Traits>
 void
 SurfaceBasis<EvalT, Traits>::
 computeDualBasisVectors(
-    Intrepid2::FieldContainer<MeshScalarT> const & midplane_coords,
+    Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> const & midplane_coords,
     PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim, Dim> const basis,
     PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim> normal,
     PHX::MDField<MeshScalarT, Cell, QuadPoint, Dim, Dim> dual_basis)
diff --git a/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual.hpp
index f018773..d092f83 100644
--- a/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual.hpp
@@ -43,11 +43,11 @@ private:
 
   // Input:
   // Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>>
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   cubature_;
 
   // Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   intrepid_basis_;
 
   // Reference area
@@ -59,16 +59,16 @@ private:
   cohesive_traction_;
 
   // Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_values_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_grads_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_points_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_weights_;
 
   // Output:
diff --git a/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual_Def.hpp
index d53c5e0..ca3172e 100644
--- a/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceCohesiveResidual_Def.hpp
@@ -17,10 +17,10 @@ SurfaceCohesiveResidual<EvalT, Traits>::
 SurfaceCohesiveResidual(const Teuchos::ParameterList& p,
     const Teuchos::RCP<Albany::Layouts>& dl) :
     cubature_(
-        p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
+        p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     intrepid_basis_(
         p.get<Teuchos::RCP<Intrepid2::Basis<RealType,
-            Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+            Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     ref_area_(
         p.get<std::string>("Reference Area Name"), dl->qp_scalar),
     cohesive_traction_(
diff --git a/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual.hpp
index d7974e9..21c7c3c 100644
--- a/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual.hpp
@@ -47,9 +47,9 @@ private:
   //! Length scale parameter for localization zone
   ScalarT thickness;
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   //! Scalar Gradient
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim> scalarGrad;
   //! Scalar Jump
@@ -67,10 +67,10 @@ private:
 //  PHX::MDField<MeshScalarT,Cell,Node,QuadPoint> wBF;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
   // Output:
   PHX::MDField<ScalarT,Cell,Node> scalarResidual;
diff --git a/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual_Def.hpp
index ced44e5..b647825 100644
--- a/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceDiffusionResidual_Def.hpp
@@ -15,8 +15,8 @@ namespace LCM {
   SurfaceDiffusionResidual(const Teuchos::ParameterList& p,
                         const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")),
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
-    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
+    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     scalarGrad        (p.get<std::string>("Scalar Gradient Name"),dl->qp_vector),
     scalarJump        (p.get<std::string>("Scalar Jump Name"),dl->qp_scalar),
     currentBasis   (p.get<std::string>("Current Basis Name"),dl->qp_tensor),
diff --git a/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual.hpp
index 46ceb3d..63e720c 100644
--- a/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual.hpp
@@ -48,9 +48,9 @@ private:
   //! Length scale parameter for localization zone
   ScalarT thickness;
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   //! Scalar Gradient
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim> scalarGrad;
  //! Scalar Gradient Operator
@@ -99,20 +99,20 @@ private:
    PHX::MDField<ScalarT,Dummy> deltaTime;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
 
 
-  Intrepid2::FieldContainer<ScalarT> artificalDL;
-  Intrepid2::FieldContainer<ScalarT> stabilizedDL;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> artificalDL;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> stabilizedDL;
 
-  Intrepid2::FieldContainer<ScalarT> pterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> pterm;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
 
   ScalarT trialPbar;
 
diff --git a/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual_Def.hpp
index b57c99f..c40a9a5 100644
--- a/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceHDiffusionDefResidual_Def.hpp
@@ -23,8 +23,8 @@ namespace LCM {
   SurfaceHDiffusionDefResidual(const Teuchos::ParameterList& p,
                             const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness                          (p.get<double>("thickness")),
-    cubature                           (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
-    intrepidBasis                    (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature                           (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
+    intrepidBasis                    (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     scalarGrad                       (p.get<std::string>("Surface Transport Gradient Name"),dl->qp_vector),
     surface_Grad_BF           (p.get<std::string>("Surface Scalar Gradient Operator Name"),dl->node_qp_gradient),
     refDualBasis                    (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
diff --git a/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual.hpp
index 6802d9a..0d10c2c 100644
--- a/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual.hpp
@@ -49,9 +49,9 @@ private:
   //! Length scale parameter for localization zone
   RealType thickness;
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   //! Scalar Gradient for H1 projection (not yet implemented)
   //PHX::MDField<ScalarT,Cell,QuadPoint,Dim> scalarGrad;
  //! Scalar Gradient Operator for H1 projection (not yet implemented)
@@ -73,10 +73,10 @@ private:
 //  PHX::MDField<MeshScalarT,Cell,Node,QuadPoint> wBF;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
 
   // Output:
diff --git a/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual_Def.hpp
index 72d6f3b..cab7c63 100644
--- a/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceL2ProjectionResidual_Def.hpp
@@ -22,8 +22,8 @@ namespace LCM {
   SurfaceL2ProjectionResidual(const Teuchos::ParameterList& p,
                             const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")),
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
-    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
+    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     surface_Grad_BF     (p.get<std::string>("Surface Scalar Gradient Operator Name"),dl->node_qp_gradient),
     refDualBasis   (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
     refNormal      (p.get<std::string>("Reference Normal Name"),dl->qp_vector),
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarGradient.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarGradient.hpp
index c04806c..2c64479 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarGradient.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarGradient.hpp
@@ -50,10 +50,10 @@ private:
   /// Length scale parameter for localization zone
   ScalarT thickness;
   /// Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
 
   /// for the parallel gradient term
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   // nodal value used to construct in-plan gradient
   PHX::MDField<ScalarT,Cell,Node> nodalScalar;
 
@@ -64,10 +64,10 @@ private:
   PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim> refNormal;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
   // Output:
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim> scalarGrad;
 
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator.hpp
index f36f820..ba53905 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator.hpp
@@ -51,10 +51,10 @@ private:
   RealType thickness;
 
   /// Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
 
   /// for the parallel gradient term
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   // nodal value used to construct in-plan gradient
   PHX::MDField<ScalarT,Cell,Node> val_node;
 
@@ -62,10 +62,10 @@ private:
   PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim> refNormal;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
   // Output:
   PHX::MDField<MeshScalarT,Cell,Node,QuadPoint,Dim> surface_Grad_BF;
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator_Def.hpp
index 5ec0dd0..4db76c9 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarGradientOperator_Def.hpp
@@ -17,8 +17,8 @@ namespace LCM {
   SurfaceScalarGradientOperator(const Teuchos::ParameterList& p,
                                 const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")), 
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")), 
-    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")), 
+    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     refDualBasis   (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
     refNormal      (p.get<std::string>("Reference Normal Name"),dl->qp_vector),
     val_node   (p.get<std::string>("Nodal Scalar Name"),dl->node_scalar),
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarGradient_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarGradient_Def.hpp
index 700da55..036e4a8 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarGradient_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarGradient_Def.hpp
@@ -17,8 +17,8 @@ namespace LCM {
   SurfaceScalarGradient(const Teuchos::ParameterList& p,
                         const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")), 
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")), 
-    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")), 
+    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     refDualBasis   (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
     refNormal      (p.get<std::string>("Reference Normal Name"),dl->qp_vector),
     jump           (p.get<std::string>("Scalar Jump Name"),dl->qp_scalar),
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarJump.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarJump.hpp
index 12c23ee..07d6c32 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarJump.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarJump.hpp
@@ -45,9 +45,9 @@ private:
 
   // Input:
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
 
 
   //! Nodal value of scalar
@@ -59,10 +59,10 @@ private:
   PHX::MDField<ScalarT,Cell,Vertex> nodalPorePressure;
 
   // Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
   // Output:
   PHX::MDField<ScalarT,Cell,QuadPoint> scalarJump;
diff --git a/src/LCM/evaluators/surface-element/SurfaceScalarJump_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceScalarJump_Def.hpp
index 1039797..8d73af5 100644
--- a/src/LCM/evaluators/surface-element/SurfaceScalarJump_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceScalarJump_Def.hpp
@@ -14,8 +14,8 @@ template<typename EvalT, typename Traits>
 SurfaceScalarJump<EvalT, Traits>::
 SurfaceScalarJump(const Teuchos::ParameterList& p,
                   const Teuchos::RCP<Albany::Layouts>& dl) :
-  cubature      (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")), 
-  intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis"))
+  cubature      (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")), 
+  intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis"))
 //  scalar        (p.get<std::string>("Nodal Scalar Name"),dl->node_scalar),
 //  scalarJump    (p.get<std::string>("Scalar Jump Name"),dl->qp_scalar),
  // scalarAverage (p.get<std::string>("Scalar Average Name"),dl->qp_scalar)
diff --git a/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual.hpp
index 7147e2d..9a44817 100644
--- a/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual.hpp
@@ -48,9 +48,9 @@ private:
   //! Length scale parameter for localization zone
   ScalarT thickness;
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis;
   //! Scalar Gradient
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim> scalarGrad;
  //! Scalar Gradient Operator
@@ -88,22 +88,22 @@ private:
    PHX::MDField<ScalarT,Dummy> deltaTime;
 
   //! Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType> refValues;
-  Intrepid2::FieldContainer<RealType> refGrads;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refValues;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refGrads;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
 
   // Work space FCs
-  Intrepid2::FieldContainer<ScalarT> F_inv;
-  Intrepid2::FieldContainer<ScalarT> F_invT;
-  Intrepid2::FieldContainer<ScalarT> C;
-  Intrepid2::FieldContainer<ScalarT> Cinv;
-  Intrepid2::FieldContainer<ScalarT> JF_invT;
-  Intrepid2::FieldContainer<ScalarT> KJF_invT;
-  Intrepid2::FieldContainer<ScalarT> Kref;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_inv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> F_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> C;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Cinv;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> JF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> KJF_invT;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> Kref;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<ScalarT> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
 
   // Output:
   PHX::MDField<ScalarT,Cell,Node> poroMassResidual;
diff --git a/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual_Def.hpp
index 7182e32..85d9259 100644
--- a/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceTLPoroMassResidual_Def.hpp
@@ -21,8 +21,8 @@ namespace LCM {
   SurfaceTLPoroMassResidual(const Teuchos::ParameterList& p,
                             const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")),
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
-    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
+    intrepidBasis  (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
     scalarGrad        (p.get<std::string>("Scalar Gradient Name"),dl->qp_vector),
     surface_Grad_BF     (p.get<std::string>("Surface Scalar Gradient Operator Name"),dl->node_qp_gradient),
     refDualBasis   (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorGradient.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorGradient.hpp
index 777977a..56c25a4 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorGradient.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorGradient.hpp
@@ -46,7 +46,7 @@ private:
   //! Length scale parameter for localization zone
   ScalarT thickness;
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature;
   //! Vector to take the jump of
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> vector;
   PHX::MDField<ScalarT,Cell,QuadPoint,Dim> jump;
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorGradient_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorGradient_Def.hpp
index 92441a6..65524bb 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorGradient_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorGradient_Def.hpp
@@ -17,7 +17,7 @@ namespace LCM {
   SurfaceVectorGradient(Teuchos::ParameterList& p,
                         const Teuchos::RCP<Albany::Layouts>& dl) :
     thickness      (p.get<double>("thickness")), 
-    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")), 
+    cubature       (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")), 
     currentBasis   (p.get<std::string>("Current Basis Name"),dl->qp_tensor),
     refDualBasis   (p.get<std::string>("Reference Dual Basis Name"),dl->qp_tensor),
     refNormal      (p.get<std::string>("Reference Normal Name"),dl->qp_vector),
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorJump.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorJump.hpp
index 7ea6c87..5fb2c56 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorJump.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorJump.hpp
@@ -44,11 +44,11 @@ private:
 
   // Input:
   //! Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>>
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   cubature_;
 
   //! Finite element basis for the midplane
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   intrepid_basis_;
 
   //! Vector to take the jump of
@@ -56,16 +56,16 @@ private:
   vector_;
 
   // Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_values_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_grads_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_points_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_weights_;
 
   // Output:
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorJump_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorJump_Def.hpp
index 2290ce1..a1ef663 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorJump_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorJump_Def.hpp
@@ -15,9 +15,9 @@ template<typename EvalT, typename Traits>
 SurfaceVectorJump<EvalT, Traits>::
 SurfaceVectorJump(const Teuchos::ParameterList & p,
     const Teuchos::RCP<Albany::Layouts> & dl) :
-    cubature_(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
+    cubature_(p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
     intrepid_basis_(p.get<Teuchos::RCP<Intrepid2::Basis<RealType,
-        Intrepid2::FieldContainer<RealType>>>>(
+        Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>(
             "Intrepid2 Basis")),
     vector_(p.get<std::string>("Vector Name"), dl->node_vector),
     jump_(p.get<std::string>("Vector Jump Name"), dl->qp_vector)
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorResidual.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorResidual.hpp
index 665f2cd..93eab6d 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorResidual.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorResidual.hpp
@@ -48,12 +48,12 @@ private:
   thickness_;
 
   /// Numerical integration rule
-  Teuchos::RCP<Intrepid2::Cubature<RealType>>
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   cubature_;
 
   /// Finite element basis for the midplane
   Teuchos::RCP<Intrepid2::Basis<RealType,
-    Intrepid2::FieldContainer<RealType>>>
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   intrepid_basis_;
 
   /// First PK Stress
@@ -81,16 +81,16 @@ private:
   detF_;
 
   /// Reference Cell FieldContainers
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_values_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_grads_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_points_;
 
-  Intrepid2::FieldContainer<RealType>
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>
   ref_weights_;
 
   /// Optional Cohesive Traction
diff --git a/src/LCM/evaluators/surface-element/SurfaceVectorResidual_Def.hpp b/src/LCM/evaluators/surface-element/SurfaceVectorResidual_Def.hpp
index ee67498..7989344 100644
--- a/src/LCM/evaluators/surface-element/SurfaceVectorResidual_Def.hpp
+++ b/src/LCM/evaluators/surface-element/SurfaceVectorResidual_Def.hpp
@@ -22,11 +22,11 @@ SurfaceVectorResidual(Teuchos::ParameterList & p,
     (p.get<double>("thickness")),
 
     cubature_
-    (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType>>>("Cubature")),
+    (p.get<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature")),
 
     intrepid_basis_
     (p.get<Teuchos::RCP<Intrepid2::Basis<RealType,
-        Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis")),
+        Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis")),
 
     stress_
     (p.get<std::string>("Stress Name"), dl->qp_tensor),
diff --git a/src/LCM/models/FerroicModel.hpp b/src/LCM/models/FerroicModel.hpp
index 20c209c..e58ec2e 100644
--- a/src/LCM/models/FerroicModel.hpp
+++ b/src/LCM/models/FerroicModel.hpp
@@ -78,12 +78,12 @@ private:
                     Intrepid2::Vector<T>& D, 
                     Intrepid2::Vector<T>& linear_D);
 
-  void findActiveTransitions(Intrepid2::FieldContainer<int>& transitionMap,
+  void findActiveTransitions(Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device>& transitionMap,
                              Teuchos::Array<ScalarT>& fractions,
                              Intrepid2::Tensor<ScalarT>& X, Intrepid2::Tensor<ScalarT>& linear_x,
                              Intrepid2::Vector<ScalarT>& E, Intrepid2::Vector<ScalarT>& linear_D);
 
-  void findEquilibriumState(Intrepid2::FieldContainer<int>& transitionMap,
+  void findEquilibriumState(Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device>& transitionMap,
                             Teuchos::Array<ScalarT>& oldfractions,
                             Teuchos::Array<ScalarT>& newfractions,
                             Intrepid2::Tensor<ScalarT>& x, Intrepid2::Vector<ScalarT>& E);
@@ -91,7 +91,7 @@ private:
   bool converged(std::vector<ScalarT>& R, int iteration, ScalarT& initNorm);
 
 
-  void computeResidualandJacobian(Intrepid2::FieldContainer<int> transitionMap,
+  void computeResidualandJacobian(Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device> transitionMap,
                                   Intrepid2::Tensor<ScalarT>& x, Intrepid2::Vector<ScalarT>& E,
                                   Teuchos::Array<ScalarT>& fractions,
                                   std::vector<ScalarT>& X, std::vector<ScalarT>& R,
@@ -177,7 +177,7 @@ private:
   Teuchos::Array<Teuchos::RCP<Transition>> transitions;
   Teuchos::Array<ScalarT> tBarrier;
   RealType alphaParam, gammaParam;
-  Intrepid2::FieldContainer<RealType> aMatrix;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> aMatrix;
 
 };
 
diff --git a/src/LCM/models/FerroicModel_Def.hpp b/src/LCM/models/FerroicModel_Def.hpp
index f5d7145..ab4d61a 100644
--- a/src/LCM/models/FerroicModel_Def.hpp
+++ b/src/LCM/models/FerroicModel_Def.hpp
@@ -218,7 +218,7 @@ computeState(typename Traits::EvalData workset,
   Teuchos::Array<ScalarT> oldfractions(nVariants);
   Teuchos::Array<ScalarT> newfractions(nVariants);
 
-  Intrepid2::FieldContainer<int> transitionMap;
+  Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device> transitionMap;
   transitionMap.resize(transitions.size());
 
   for (int cell=0; cell < numCells; ++cell) {
@@ -264,7 +264,7 @@ computeState(typename Traits::EvalData workset,
 /******************************************************************************/
 template<typename EvalT, typename Traits>
 void FerroicModel<EvalT, Traits>::findEquilibriumState(
-Intrepid2::FieldContainer<int>& transitionMap,
+Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device>& transitionMap,
 Teuchos::Array<ScalarT>& oldfractions,
 Teuchos::Array<ScalarT>& newfractions,
 Intrepid2::Tensor<ScalarT>& x, Intrepid2::Vector<ScalarT>& E)
@@ -369,7 +369,7 @@ bool FerroicModel<EvalT, Traits>::converged(std::vector<ScalarT>& R,
 template<typename EvalT, typename Traits>
 void FerroicModel<EvalT, Traits>::
 computeResidualandJacobian(
-  Intrepid2::FieldContainer<int> transitionMap,
+  Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device> transitionMap,
   Intrepid2::Tensor<ScalarT>& x, Intrepid2::Vector<ScalarT>& E,
   Teuchos::Array<ScalarT>& fractions,
   std::vector<ScalarT>& S, std::vector<ScalarT>& R, std::vector<ScalarT>& dRdS)
@@ -536,7 +536,7 @@ computeState(Teuchos::Array<T>& fractions,
 /******************************************************************************/
 template<typename EvalT, typename Traits>
 void FerroicModel<EvalT, Traits>::findActiveTransitions(
-Intrepid2::FieldContainer<int>& transitionMap,
+Intrepid2::FieldContainer_Kokkos<int, PHX::Layout, PHX::Device>& transitionMap,
 Teuchos::Array<ScalarT>& fractions,
 Intrepid2::Tensor<ScalarT>& X, Intrepid2::Tensor<ScalarT>& linear_x,
 Intrepid2::Vector<ScalarT>& E, Intrepid2::Vector<ScalarT>& linear_D)
diff --git a/src/LCM/problems/ConstitutiveDriverProblem.cpp b/src/LCM/problems/ConstitutiveDriverProblem.cpp
index 1e29166..6bc6a86 100644
--- a/src/LCM/problems/ConstitutiveDriverProblem.cpp
+++ b/src/LCM/problems/ConstitutiveDriverProblem.cpp
@@ -108,8 +108,8 @@ getValidProblemParameters() const
 void
 Albany::ConstitutiveDriverProblem::
 getAllocatedStates(
-  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> old_state,
-  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> new_state) const
+  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> old_state,
+  Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> new_state) const
 {
   old_state = old_state_;
   new_state = new_state_;
diff --git a/src/LCM/problems/ConstitutiveDriverProblem.hpp b/src/LCM/problems/ConstitutiveDriverProblem.hpp
index fdc27b7..8a4ff3d 100644
--- a/src/LCM/problems/ConstitutiveDriverProblem.hpp
+++ b/src/LCM/problems/ConstitutiveDriverProblem.hpp
@@ -28,7 +28,7 @@ class ConstitutiveDriverProblem: public Albany::AbstractProblem
 {
 public:
 
-  typedef Intrepid2::FieldContainer<RealType> FC;
+  typedef Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> FC;
 
   ///
   /// Default constructor
diff --git a/src/LCM/problems/ElasticityProblem.cpp b/src/LCM/problems/ElasticityProblem.cpp
index f8cf409..991598c 100644
--- a/src/LCM/problems/ElasticityProblem.cpp
+++ b/src/LCM/problems/ElasticityProblem.cpp
@@ -243,8 +243,8 @@ Albany::ElasticityProblem::getValidProblemParameters() const
 
 void
 Albany::ElasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/ElasticityProblem.hpp b/src/LCM/problems/ElasticityProblem.hpp
index b4f9dfe..8e99487 100644
--- a/src/LCM/problems/ElasticityProblem.hpp
+++ b/src/LCM/problems/ElasticityProblem.hpp
@@ -58,8 +58,8 @@ namespace Albany {
     //! Each problem must generate it's list of valid parameters
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
-    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 			    ) const;
 
   private:
@@ -98,8 +98,8 @@ namespace Albany {
     std::string matModel; 
     Teuchos::RCP<Albany::Layouts> dl;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
 
     Teuchos::RCP<AAdapt::rc::Manager> rc_mgr;
   };
@@ -150,14 +150,14 @@ Albany::ElasticityProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/LCM/problems/ElectroMechanicsProblem.cpp b/src/LCM/problems/ElectroMechanicsProblem.cpp
index 8fe88c0..9372822 100644
--- a/src/LCM/problems/ElectroMechanicsProblem.cpp
+++ b/src/LCM/problems/ElectroMechanicsProblem.cpp
@@ -222,10 +222,10 @@ void
 Albany::ElectroMechanicsProblem::
 getAllocatedStates(
     Teuchos::ArrayRCP<
-        Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>>
+        Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>
     old_state,
     Teuchos::ArrayRCP<
-        Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>>
+        Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>
     new_state
     ) const
     {
diff --git a/src/LCM/problems/ElectroMechanicsProblem.hpp b/src/LCM/problems/ElectroMechanicsProblem.hpp
index 4fa24b5..3c7d829 100644
--- a/src/LCM/problems/ElectroMechanicsProblem.hpp
+++ b/src/LCM/problems/ElectroMechanicsProblem.hpp
@@ -31,7 +31,7 @@ class ElectroMechanicsProblem: public Albany::AbstractProblem
 {
 public:
 
-  typedef Intrepid2::FieldContainer<RealType> FC;
+  typedef Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> FC;
 
   ///
   /// Default constructor
@@ -222,7 +222,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
     const Teuchos::RCP<Teuchos::ParameterList>& responseList)
 {
   typedef Teuchos::RCP<
-      Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+      Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   Intrepid2Basis;
 
   // Collect problem-specific response parameters
@@ -275,8 +275,8 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
 
   // get the intrepid basis for the given cell topology
   Intrepid2Basis intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   // Note that these are the volume element quantities
diff --git a/src/LCM/problems/GradientDamageProblem.cpp b/src/LCM/problems/GradientDamageProblem.cpp
index 0fa5be6..0bead78 100644
--- a/src/LCM/problems/GradientDamageProblem.cpp
+++ b/src/LCM/problems/GradientDamageProblem.cpp
@@ -123,8 +123,8 @@ Albany::GradientDamageProblem::getValidProblemParameters() const
 
 void
 Albany::GradientDamageProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/GradientDamageProblem.hpp b/src/LCM/problems/GradientDamageProblem.hpp
index 3f518fe..e41cb7e 100644
--- a/src/LCM/problems/GradientDamageProblem.hpp
+++ b/src/LCM/problems/GradientDamageProblem.hpp
@@ -51,8 +51,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
          ) const;
 
   private:
@@ -95,8 +95,8 @@ namespace Albany {
     std::string matModel;
 
     // state containers
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 
 }
@@ -143,14 +143,14 @@ Albany::GradientDamageProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/LCM/problems/HMCProblem.cpp b/src/LCM/problems/HMCProblem.cpp
index 37d57d8..bdaebfc 100644
--- a/src/LCM/problems/HMCProblem.cpp
+++ b/src/LCM/problems/HMCProblem.cpp
@@ -234,8 +234,8 @@ parseMaterialModel(Teuchos::RCP<Teuchos::ParameterList>& p,
 
 void
 Albany::HMCProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/HMCProblem.hpp b/src/LCM/problems/HMCProblem.hpp
index 23d33d0..29f49a0 100644
--- a/src/LCM/problems/HMCProblem.hpp
+++ b/src/LCM/problems/HMCProblem.hpp
@@ -81,8 +81,8 @@ namespace Albany {
     //! Each problem must generate it's list of valid parameters
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
-    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 			    ) const;
 
   private:
@@ -126,8 +126,8 @@ namespace Albany {
     std::string matModel; 
     Teuchos::RCP<Albany::Layouts> dl;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
 
     template <typename EvalT> 
     void registerStateVariables(
@@ -203,14 +203,14 @@ Albany::HMCProblem::constructEvaluators(
 #endif
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/LCM/problems/MechanicsProblem.hpp b/src/LCM/problems/MechanicsProblem.hpp
index 88f5d42..fd1cc52 100644
--- a/src/LCM/problems/MechanicsProblem.hpp
+++ b/src/LCM/problems/MechanicsProblem.hpp
@@ -428,7 +428,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
     const Teuchos::RCP<Teuchos::ParameterList>& responseList)
 {
   typedef Teuchos::RCP<
-      Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+      Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   Intrepid2Basis;
 
   // Collect problem-specific response parameters
@@ -573,7 +573,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
       surfaceBasis =
           Teuchos::rcp(
               new Intrepid2::Basis_HGRAD_LINE_C1_FEM<RealType,
-                  Intrepid2::FieldContainer<RealType>>());
+                  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>());
       surfaceTopology =
           Teuchos::rcp(
               new shards::CellTopology(
@@ -585,7 +585,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
       surfaceBasis =
           Teuchos::rcp(
               new Intrepid2::Basis_HGRAD_TRI_C1_FEM<RealType,
-                  Intrepid2::FieldContainer<RealType>>());
+                  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>());
       surfaceTopology =
           Teuchos::rcp(
               new shards::CellTopology(
@@ -597,7 +597,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
       surfaceBasis =
           Teuchos::rcp(
               new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType,
-                  Intrepid2::FieldContainer<RealType>>());
+                  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>());
       surfaceTopology =
           Teuchos::rcp(
               new shards::CellTopology(
@@ -1144,7 +1144,7 @@ constructEvaluators(PHX::FieldManager<PHAL::AlbanyTraits>& fm0,
     p->set<Teuchos::ParameterList*>("Parameter List", &paramList);
 
     p->set<const Teuchos::RCP<
-      Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>>("Intrepid2 Basis", intrepidBasis);
+      Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>("Intrepid2 Basis", intrepidBasis);
     ev = Teuchos::rcp(
         new LCM::IsoMeshSizeField<EvalT, PHAL::AlbanyTraits>(*p, dl_));
     fm0.template registerEvaluator<EvalT>(ev);
diff --git a/src/LCM/problems/PeridigmProblem.hpp b/src/LCM/problems/PeridigmProblem.hpp
index 4e50e95..9b0a1a9 100644
--- a/src/LCM/problems/PeridigmProblem.hpp
+++ b/src/LCM/problems/PeridigmProblem.hpp
@@ -372,13 +372,13 @@ Albany::PeridigmProblem::constructEvaluators(
      *out << "PeridigmProblem::constructEvaluators(), Creating evaluators for peridynamic partial stress." << std::endl;
 
      RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-     RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
+     RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
      const int numNodes = intrepidBasis->getCardinality();
      const int worksetSize = meshSpecs.worksetSize;
 
-     Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-     RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+     Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+     RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
      const int numDim = cubature->getDimension();
      const int numQPts = cubature->getNumPoints();
@@ -580,13 +580,13 @@ Albany::PeridigmProblem::constructEvaluators(
    else if(materialModelName == "Classic Vector Poisson"){
       *out << "PeridigmProblem::constructEvaluators(), Creating evaluators for classical Poisson Eq, material model = " << materialModelName << std::endl;
       RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-      RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
+      RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
       const int numNodes = intrepidBasis->getCardinality();
       const int worksetSize = meshSpecs.worksetSize;
 
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-      RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+      RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
       const int numDim = cubature->getDimension();
       const int numQPts = cubature->getNumPoints();
@@ -719,13 +719,13 @@ Albany::PeridigmProblem::constructEvaluators(
      *out << "PeridigmProblem::constructEvaluators(), Creating evaluators for classical elasticity, material model = " << materialModelName << std::endl;
 
      RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-     RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
+     RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
      const int numNodes = intrepidBasis->getCardinality();
      const int worksetSize = meshSpecs.worksetSize;
 
-     Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-     RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+     Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+     RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
      const int numDim = cubature->getDimension();
      const int numQPts = cubature->getNumPoints();
diff --git a/src/LCM/problems/PoroElasticityProblem.cpp b/src/LCM/problems/PoroElasticityProblem.cpp
index ba2db98..c19d73f 100644
--- a/src/LCM/problems/PoroElasticityProblem.cpp
+++ b/src/LCM/problems/PoroElasticityProblem.cpp
@@ -167,8 +167,8 @@ Albany::PoroElasticityProblem::getValidProblemParameters() const
 
 void
 Albany::PoroElasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/PoroElasticityProblem.hpp b/src/LCM/problems/PoroElasticityProblem.hpp
index 9fce04c..68ef659 100644
--- a/src/LCM/problems/PoroElasticityProblem.hpp
+++ b/src/LCM/problems/PoroElasticityProblem.hpp
@@ -57,8 +57,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 	 ) const;
 
   private:
@@ -93,8 +93,8 @@ namespace Albany {
 
     std::string matModel;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 }
 
@@ -158,14 +158,14 @@ Albany::PoroElasticityProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
@@ -767,7 +767,7 @@ Albany::PoroElasticityProblem::constructEvaluators(
      // Inputs: X, Y at nodes, Cubature, and Basis
      p->set<std::string>("Coordinate Vector Name","Coord Vec");
      p->set< RCP<DataLayout>>("Coordinate Data Layout", dl->vertices_vector);
-     p->set< RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+     p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
      p->set<RCP<shards::CellTopology>>("Cell Type", cellType);
 
      p->set<std::string>("Weights Name","Weights");
diff --git a/src/LCM/problems/ProjectionProblem.cpp b/src/LCM/problems/ProjectionProblem.cpp
index 8e69433..8be8661 100644
--- a/src/LCM/problems/ProjectionProblem.cpp
+++ b/src/LCM/problems/ProjectionProblem.cpp
@@ -263,8 +263,8 @@ Albany::ProjectionProblem::getValidProblemParameters() const
 
 void
 Albany::ProjectionProblem::getAllocatedStates(
-    ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>> old_state,
-    ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>> new_state) const
+    ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> old_state,
+    ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> new_state) const
 {
   old_state = old_state_;
   new_state = new_state_;
diff --git a/src/LCM/problems/ProjectionProblem.hpp b/src/LCM/problems/ProjectionProblem.hpp
index 684d0b3..65fce9b 100644
--- a/src/LCM/problems/ProjectionProblem.hpp
+++ b/src/LCM/problems/ProjectionProblem.hpp
@@ -18,7 +18,7 @@
 #include "Teuchos_ParameterList.hpp"
 #include "Teuchos_RCP.hpp"
 
-using Intrepid2::FieldContainer;
+using Intrepid2::FieldContainer_Kokkos;
 using PHAL::AlbanyTraits;
 using PHX::DataLayout;
 using PHX::MDALayout;
@@ -92,8 +92,8 @@ public:
   ///
   void
   getAllocatedStates(
-      ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>> old_state,
-      ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>> new_state) const;
+      ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> old_state,
+      ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> new_state) const;
 
   ///
   /// Main problem setup routine. Not directly called,
@@ -158,10 +158,10 @@ protected:
   std::string
   insertion_criterion_;
 
-  ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>>
+  ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>
   old_state_;
 
-  ArrayRCP<ArrayRCP<RCP<FieldContainer<RealType>>>>
+  ArrayRCP<ArrayRCP<RCP<FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>
   new_state_;
 };
 
@@ -221,7 +221,7 @@ Albany::ProjectionProblem::constructEvaluators(
   RCP<shards::CellTopology>
   cell_type = rcp(new shards::CellTopology(&mesh_specs.ctd));
 
-  RCP<Intrepid2::Basis<RealType, FieldContainer<RealType>>>
+  RCP<Intrepid2::Basis<RealType, FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   intrepid_basis = Albany::getIntrepid2Basis(mesh_specs.ctd);
 
   int const
@@ -230,25 +230,25 @@ Albany::ProjectionProblem::constructEvaluators(
   int const
   workset_size = mesh_specs.worksetSize;
 
-  Intrepid2::DefaultCubatureFactory<RealType>
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >
   cubature_factory;
 
-  RCP<Intrepid2::Cubature<RealType>>
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   cubature = cubature_factory.create(*cell_type, mesh_specs.cubatureDegree);
 
   // Create intrepid basis and cubature for the face averaging. Not the best
   // way of defining the basis functions: requires to know the face type at
   // compile time
-  RCP<Intrepid2::Basis<RealType, FieldContainer<RealType>>>
+  RCP<Intrepid2::Basis<RealType, FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
   face_intrepid_basis;
 
   face_intrepid_basis = rcp(
       new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType,
-      FieldContainer<RealType>>());
+      FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>());
 
   // the quadrature is general to the
   // topology of the faces of the volume elements
-  RCP<Intrepid2::Cubature<RealType>>
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>
   face_cubature = cubature_factory.create(
       cell_type->getCellTopologyData()->side->topology,
       mesh_specs.cubatureDegree);
@@ -1172,11 +1172,11 @@ Albany::ProjectionProblem::constructEvaluators(
         projection_layout->node_vector);
 
     // the cubature and basis function information
-    p->set<RCP<Intrepid2::Cubature<RealType>>>(
+    p->set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>(
         "Face Cubature",
         face_cubature);
 
-    p->set<RCP<Intrepid2::Basis<RealType, FieldContainer<RealType>>>>(
+    p->set<RCP<Intrepid2::Basis<RealType, FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>>(
         "Face Intrepid2 Basis",
         face_intrepid_basis);
 
diff --git a/src/LCM/problems/TLPoroPlasticityProblem.cpp b/src/LCM/problems/TLPoroPlasticityProblem.cpp
index 6922b60..0b09a36 100644
--- a/src/LCM/problems/TLPoroPlasticityProblem.cpp
+++ b/src/LCM/problems/TLPoroPlasticityProblem.cpp
@@ -139,8 +139,8 @@ Albany::TLPoroPlasticityProblem::getValidProblemParameters() const
 
 void
 Albany::TLPoroPlasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/TLPoroPlasticityProblem.hpp b/src/LCM/problems/TLPoroPlasticityProblem.hpp
index 9924efc..0c07a07 100644
--- a/src/LCM/problems/TLPoroPlasticityProblem.hpp
+++ b/src/LCM/problems/TLPoroPlasticityProblem.hpp
@@ -57,8 +57,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 	 ) const;
 
   private:
@@ -93,8 +93,8 @@ namespace Albany {
 
     std::string matModel;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 }
 
@@ -168,14 +168,14 @@ Albany::TLPoroPlasticityProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
@@ -828,7 +828,7 @@ Albany::TLPoroPlasticityProblem::constructEvaluators(
      // Inputs: X, Y at nodes, Cubature, and Basis
      p->set<std::string>("Coordinate Vector Name","Coord Vec");
      p->set< RCP<DataLayout>>("Coordinate Data Layout", dl->vertices_vector);
-     p->set< RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+     p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
      p->set<RCP<shards::CellTopology>>("Cell Type", cellType);
 
      p->set<std::string>("Weights Name","Weights");
diff --git a/src/LCM/problems/ThermoElasticityProblem.cpp b/src/LCM/problems/ThermoElasticityProblem.cpp
index a4b1b3f..29f3a01 100644
--- a/src/LCM/problems/ThermoElasticityProblem.cpp
+++ b/src/LCM/problems/ThermoElasticityProblem.cpp
@@ -114,8 +114,8 @@ Albany::ThermoElasticityProblem::getValidProblemParameters() const
 
 void
 Albany::ThermoElasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/ThermoElasticityProblem.hpp b/src/LCM/problems/ThermoElasticityProblem.hpp
index 50e416e..224cce1 100644
--- a/src/LCM/problems/ThermoElasticityProblem.hpp
+++ b/src/LCM/problems/ThermoElasticityProblem.hpp
@@ -58,8 +58,8 @@ namespace Albany {
     //! Each problem must generate it's list of valid parameters
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
-    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+    void getAllocatedStates(Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+			    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 			    ) const;
 
   private:
@@ -91,8 +91,8 @@ namespace Albany {
     int X_offset;  //Position of X unknown in nodal DOFs, followed by Y,Z
     int numDim;    //Number of spatial dimensions and displacement variable 
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
 
   };
 }
@@ -144,14 +144,14 @@ Albany::ThermoElasticityProblem::constructEvaluators(
   std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/LCM/problems/ThermoMechanicalProblem.cpp b/src/LCM/problems/ThermoMechanicalProblem.cpp
index a6d45fe..4fd76c1 100644
--- a/src/LCM/problems/ThermoMechanicalProblem.cpp
+++ b/src/LCM/problems/ThermoMechanicalProblem.cpp
@@ -128,8 +128,8 @@ Albany::ThermoMechanicalProblem::getValidProblemParameters() const
 
 void
 Albany::ThermoMechanicalProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/ThermoMechanicalProblem.hpp b/src/LCM/problems/ThermoMechanicalProblem.hpp
index b42ef4a..f5fc353 100644
--- a/src/LCM/problems/ThermoMechanicalProblem.hpp
+++ b/src/LCM/problems/ThermoMechanicalProblem.hpp
@@ -56,8 +56,8 @@ namespace Albany {
     //! Each problem must generate it's list of valid parameters
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
-    void getAllocatedStates( Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-			     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_ ) const;
+    void getAllocatedStates( Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+			     Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_ ) const;
 
   private:
 
@@ -90,8 +90,8 @@ namespace Albany {
     int X_offset;  //Position of X unknown in nodal DOFs, followed by Y,Z
     int numDim;    //Number of spatial dimensions and displacement variable 
 
-    Teuchos::ArrayRCP< Teuchos::ArrayRCP< Teuchos::RCP< Intrepid2::FieldContainer< RealType >>>> oldState;
-    Teuchos::ArrayRCP< Teuchos::ArrayRCP< Teuchos::RCP< Intrepid2::FieldContainer< RealType >>>> newState;
+    Teuchos::ArrayRCP< Teuchos::ArrayRCP< Teuchos::RCP< Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP< Teuchos::ArrayRCP< Teuchos::RCP< Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 
 }
@@ -147,14 +147,14 @@ Albany::ThermoMechanicalProblem::constructEvaluators(
   std::string elementBlockName = meshSpecs.ebName;
 
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/LCM/problems/ThermoPoroPlasticityProblem.cpp b/src/LCM/problems/ThermoPoroPlasticityProblem.cpp
index c9df0be..4fb49b3 100644
--- a/src/LCM/problems/ThermoPoroPlasticityProblem.cpp
+++ b/src/LCM/problems/ThermoPoroPlasticityProblem.cpp
@@ -192,8 +192,8 @@ Albany::ThermoPoroPlasticityProblem::getValidProblemParameters() const
 
 void
 Albany::ThermoPoroPlasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/ThermoPoroPlasticityProblem.hpp b/src/LCM/problems/ThermoPoroPlasticityProblem.hpp
index aab2f81..f7b2516 100644
--- a/src/LCM/problems/ThermoPoroPlasticityProblem.hpp
+++ b/src/LCM/problems/ThermoPoroPlasticityProblem.hpp
@@ -57,8 +57,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 	 ) const;
 
   private:
@@ -94,8 +94,8 @@ namespace Albany {
 
     std::string matModel;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 }
 
@@ -169,14 +169,14 @@ Albany::ThermoPoroPlasticityProblem::constructEvaluators(
 
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
@@ -1108,7 +1108,7 @@ Albany::ThermoPoroPlasticityProblem::constructEvaluators(
      // Inputs: X, Y at nodes, Cubature, and Basis
      p->set<std::string>("Coordinate Vector Name","Coord Vec");
      p->set< RCP<DataLayout>>("Coordinate Data Layout", dl->vertices_vector);
-     p->set< RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+     p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
      p->set<RCP<shards::CellTopology>>("Cell Type", cellType);
 
      p->set<std::string>("Weights Name","Weights");
diff --git a/src/LCM/problems/UnSatPoroElasticityProblem.cpp b/src/LCM/problems/UnSatPoroElasticityProblem.cpp
index a61ac2b..deaa9c9 100644
--- a/src/LCM/problems/UnSatPoroElasticityProblem.cpp
+++ b/src/LCM/problems/UnSatPoroElasticityProblem.cpp
@@ -165,8 +165,8 @@ Albany::UnSatPoroElasticityProblem::getValidProblemParameters() const
 
 void
 Albany::UnSatPoroElasticityProblem::getAllocatedStates(
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+   Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
    ) const
 {
   oldState_ = oldState;
diff --git a/src/LCM/problems/UnSatPoroElasticityProblem.hpp b/src/LCM/problems/UnSatPoroElasticityProblem.hpp
index 5969af7..87eb212 100644
--- a/src/LCM/problems/UnSatPoroElasticityProblem.hpp
+++ b/src/LCM/problems/UnSatPoroElasticityProblem.hpp
@@ -58,8 +58,8 @@ namespace Albany {
     Teuchos::RCP<const Teuchos::ParameterList> getValidProblemParameters() const;
 
     void getAllocatedStates(
-         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState_,
-	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState_
+         Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState_,
+	 Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState_
 	 ) const;
 
   private:
@@ -94,8 +94,8 @@ namespace Albany {
 
     std::string matModel;
 
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> oldState;
-    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer<RealType>>>> newState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> oldState;
+    Teuchos::ArrayRCP<Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>> newState;
   };
 }
 
@@ -157,14 +157,14 @@ Albany::UnSatPoroElasticityProblem::constructEvaluators(
    std::string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
@@ -730,7 +730,7 @@ Albany::UnSatPoroElasticityProblem::constructEvaluators(
      // Inputs: X, Y at nodes, Cubature, and Basis
      p->set<std::string>("Coordinate Vector Name","Coord Vec");
      p->set< RCP<DataLayout>>("Coordinate Data Layout", dl->vertices_vector);
-     p->set< RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+     p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
      p->set<RCP<shards::CellTopology>>("Cell Type", cellType);
 
      p->set<std::string>("Weights Name","Weights");
diff --git a/src/LCM/problems/lame/LameProblem.hpp b/src/LCM/problems/lame/LameProblem.hpp
index c5636ad..caad0a6 100644
--- a/src/LCM/problems/lame/LameProblem.hpp
+++ b/src/LCM/problems/lame/LameProblem.hpp
@@ -132,14 +132,14 @@ Albany::LameProblem::constructEvaluators(
   string elementBlockName = meshSpecs.ebName;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>>
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>>
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/LCM/test/unit_tests/utHeliumODEs.cpp b/src/LCM/test/unit_tests/utHeliumODEs.cpp
index 99398c1..a5f2c9f 100644
--- a/src/LCM/test/unit_tests/utHeliumODEs.cpp
+++ b/src/LCM/test/unit_tests/utHeliumODEs.cpp
@@ -29,7 +29,7 @@ typedef PHX::MDField<PHAL::AlbanyTraits::Residual::ScalarT>::size_type size_type
 typedef PHAL::AlbanyTraits::Residual Residual;
 typedef PHAL::AlbanyTraits::Residual::ScalarT ScalarT;
 typedef PHAL::AlbanyTraits Traits;
-typedef Intrepid2::FieldContainer<RealType> FC;
+typedef Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> FC;
 typedef shards::CellTopology CT;
 using Teuchos::RCP;
 using Teuchos::rcp;
diff --git a/src/LCM/test/unit_tests/utSurfaceElement.cpp b/src/LCM/test/unit_tests/utSurfaceElement.cpp
index 4fdb7d4..d29ddc9 100644
--- a/src/LCM/test/unit_tests/utSurfaceElement.cpp
+++ b/src/LCM/test/unit_tests/utSurfaceElement.cpp
@@ -33,7 +33,7 @@ typedef PHX::MDField<PHAL::AlbanyTraits::Residual::ScalarT>::size_type size_type
 typedef PHAL::AlbanyTraits::Residual Residual;
 typedef PHAL::AlbanyTraits::Residual::ScalarT ScalarT;
 typedef PHAL::AlbanyTraits Traits;
-typedef Intrepid2::FieldContainer<RealType> FC;
+typedef Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> FC;
 typedef shards::CellTopology CT;
 using Teuchos::RCP;
 using Teuchos::rcp;
@@ -158,8 +158,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Basis )
       rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
   //--------------------------------------------------------------------------
@@ -172,7 +172,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Basis )
   sbPL.set<std::string>("Reference Dual Basis Name", "Reference Dual Basis");
   sbPL.set<std::string>("Reference Normal Name", "Reference Normal");
   sbPL.set<std::string>("Reference Area Name", "Reference Area");
-  sbPL.set<RCP<Intrepid2::Cubature<RealType>>>
+  sbPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>
   ("Cubature", cubature);
   sbPL.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
@@ -423,8 +423,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, ScalarJump )
       rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
   //--------------------------------------------------------------------------
@@ -433,7 +433,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, ScalarJump )
   sjPL.set<std::string>("Nodal Temperature Name", "Temperature");
   sjPL.set<std::string>("Jump of Temperature Name", "Scalar Jump");
   sjPL.set<std::string>("MidPlane Temperature Name", "Scalar Avg");
-  sjPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  sjPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   sjPL.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
   RCP<LCM::SurfaceScalarJump<Residual, Traits>> sj =
@@ -645,8 +645,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, VectorJump )
   intrepidBasis = rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
   //--------------------------------------------------------------------------
@@ -654,7 +654,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, VectorJump )
   Teuchos::ParameterList svjPL;
   svjPL.set<std::string>("Vector Name", "Current Coordinates");
   svjPL.set<std::string>("Vector Jump Name", "Vector Jump");
-  svjPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  svjPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   svjPL.set<RCP<Intrepid2::Basis<RealType, FC>>>("Intrepid2 Basis",
       intrepidBasis);
   RCP<LCM::SurfaceVectorJump<Residual, Traits>> svj =
@@ -820,8 +820,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, ScalarGradient )
   intrepidBasis = rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
   //--------------------------------------------------------------------------
@@ -832,7 +832,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, ScalarGradient )
   ssgPL.set<std::string>("Scalar Jump Name", "Jump");
   ssgPL.set<std::string>("Nodal Scalar Name", "Nodal Scalar");
   ssgPL.set<std::string>("Surface Scalar Gradient Name", "Surface Scalar Gradient");
-  ssgPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  ssgPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   ssgPL.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
   ssgPL.set<double>("thickness", 0.1);
@@ -1062,8 +1062,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, VectorGradient )
   intrepidBasis = rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
   //--------------------------------------------------------------------------
@@ -1076,7 +1076,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, VectorGradient )
   svgPL.set<std::string>("Weights Name", "Weights");
   svgPL.set<std::string>("Surface Vector Gradient Name", "F");
   svgPL.set<std::string>("Surface Vector Gradient Determinant Name", "J");
-  svgPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  svgPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   svgPL.set<double>("thickness", 0.1);
   RCP<LCM::SurfaceVectorGradient<Residual, Traits>> svg =
       rcp(new LCM::SurfaceVectorGradient<Residual, Traits>(svgPL, dl));
@@ -1196,8 +1196,8 @@ TEUCHOS_UNIT_TEST( SurfaceElement, CohesiveForce )
   intrepidBasis = rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature = cubFactory.create(*cellType, 3);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(*cellType, 3);
 
   //----------------------------------------------------------------------------
   // SurfaceCohesiveResidual evaluator
@@ -1205,7 +1205,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, CohesiveForce )
   scrPL.set<std::string>("Reference Area Name", "Reference Area");
   scrPL.set<std::string>("Cohesive Traction Name", "Cohesive Traction");
   scrPL.set<std::string>("Surface Cohesive Residual Name", "Force");
-  scrPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  scrPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   scrPL.set<RCP<Intrepid2::Basis<RealType, FC>>>("Intrepid2 Basis",
       intrepidBasis);
   RCP<LCM::SurfaceCohesiveResidual<Residual, Traits>> scr =
@@ -1386,12 +1386,12 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Complete )
   intrepidBasis = rcp(new Intrepid2::Basis_HGRAD_QUAD_C1_FEM<RealType, FC>());
   RCP<CT> cellType =
       rcp(new CT(shards::getCellTopologyData<shards::Quadrilateral<4>>()));
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP<Intrepid2::Cubature<RealType>> cubature =
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature =
       cubFactory.create(*cellType, 3);
 
-  Intrepid2::FieldContainer<double> refPoints(numQPts, 2);
-  Intrepid2::FieldContainer<double> refWeights(numQPts);
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> refPoints(numQPts, 2);
+  Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> refWeights(numQPts);
   cubature->getCubature(refPoints, refWeights);
 
   //----------------------------------------------------------------------------
@@ -1404,7 +1404,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Complete )
   sbPL.set<std::string>("Reference Dual Basis Name", "Reference Dual Basis");
   sbPL.set<std::string>("Reference Normal Name", "Reference Normal");
   sbPL.set<std::string>("Reference Area Name", "Reference Area");
-  sbPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  sbPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   sbPL.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
   RCP<LCM::SurfaceBasis<Residual, Traits>> sb =
@@ -1415,7 +1415,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Complete )
   Teuchos::ParameterList svjP;
   svjP.set<std::string>("Vector Name", "Current Coordinates");
   svjP.set<std::string>("Vector Jump Name", "Vector Jump");
-  svjP.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  svjP.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   svjP.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
   RCP<LCM::SurfaceVectorJump<Residual, Traits>> svj =
@@ -1431,7 +1431,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Complete )
   svgPL.set<std::string>("Weights Name", "Reference Area");
   svgPL.set<std::string>("Surface Vector Gradient Name", "F");
   svgPL.set<std::string>("Surface Vector Gradient Determinant Name", "J");
-  svgPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  svgPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   svgPL.set<double>("thickness", thickness);
   RCP<LCM::SurfaceVectorGradient<Residual, Traits>> svg =
       rcp(new LCM::SurfaceVectorGradient<Residual, Traits>(svgPL, dl));
@@ -1480,7 +1480,7 @@ TEUCHOS_UNIT_TEST( SurfaceElement, Complete )
   svrPL.set<std::string>("Reference Normal Name", "Reference Normal");
   svrPL.set<std::string>("Reference Area Name", "Reference Area");
   svrPL.set<std::string>("Surface Vector Residual Name", "Force");
-  svrPL.set<RCP<Intrepid2::Cubature<RealType>>>("Cubature", cubature);
+  svrPL.set<RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >>>("Cubature", cubature);
   svrPL.set<RCP<Intrepid2::Basis<RealType, FC>>>
   ("Intrepid2 Basis", intrepidBasis);
   RCP<LCM::SurfaceVectorResidual<Residual, Traits>> svr =
diff --git a/src/LCM/utils/PeridigmManager.cpp b/src/LCM/utils/PeridigmManager.cpp
index c329b7b..5eeb781 100644
--- a/src/LCM/utils/PeridigmManager.cpp
+++ b/src/LCM/utils/PeridigmManager.cpp
@@ -162,8 +162,8 @@ void LCM::PeridigmManager::initialize(const Teuchos::RCP<Teuchos::ParameterList>
       peridynamicPartialStressBlocks.push_back(blockName);
       CellTopologyData& cellTopologyData = partCellTopologyData[blockName];
       shards::CellTopology cellTopology(&cellTopologyData);
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-      Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature = cubFactory.create(cellTopology, cubatureDegree);
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+      Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(cellTopology, cubatureDegree);
       const int numQPts = cubature->getNumPoints();
       numPartialStressIds += numQPts * elementsInElementBlock.size();
     }
@@ -320,24 +320,24 @@ void LCM::PeridigmManager::initialize(const Teuchos::RCP<Teuchos::ParameterList>
 
       CellTopologyData& cellTopologyData = partCellTopologyData[blockName];
       shards::CellTopology cellTopology(&cellTopologyData);
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-      Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature = cubFactory.create(cellTopology, cubatureDegree);
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+      Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(cellTopology, cubatureDegree);
       const int numDim = cubature->getDimension();
       const int numQuadPoints = cubature->getNumPoints();
       const int numNodes = cellTopology.getNodeCount();
       const int numCells = 1;
 
       // Get the quadrature points and weights
-      Intrepid2::FieldContainer<RealType> quadratureRefPoints;
-      Intrepid2::FieldContainer<RealType> quadratureRefWeights;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> quadratureRefPoints;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> quadratureRefWeights;
       quadratureRefPoints.resize(numQuadPoints, numDim);
       quadratureRefWeights.resize(numQuadPoints);
       cubature->getCubature(quadratureRefPoints, quadratureRefWeights);
 
       // Container for the Jacobians, Jacobian determinants, and weighted measures
-      Intrepid2::FieldContainer<RealType> jacobians;
-      Intrepid2::FieldContainer<RealType> jacobianDeterminants;
-      Intrepid2::FieldContainer<RealType> weightedMeasures;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> jacobians;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> jacobianDeterminants;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> weightedMeasures;
       jacobians.resize(numCells, numQuadPoints, numDim, numDim);
       jacobianDeterminants.resize(numCells, numQuadPoints);
       weightedMeasures.resize(numCells, numQuadPoints);
@@ -709,15 +709,15 @@ void LCM::PeridigmManager::obcOverlappingElementSearch()
 	  int numDim = 3;
 
 	  // Physical points, which are the physical (x, y, z) values of the peridynamic node (pay no attention to the "quadrature point" descriptor)
-	  Intrepid2::FieldContainer<RealType> physPoints;
+	  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> physPoints;
 	  physPoints.resize(numCells, numQuadPoints, numDim);
 
 	  // Reference points, which are the natural coordinates of the quadrature points
-	  Intrepid2::FieldContainer<RealType> refPoints;
+	  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
 	  refPoints.resize(numCells, numQuadPoints, numDim);
 
 	  // Cell workset, which is the set of nodes for the given element
-	  Intrepid2::FieldContainer<RealType> cellWorkset;
+	  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cellWorkset;
 	  cellWorkset.resize(numCells, numNodesInElement, numDim);
 
  	  for(int dof=0 ; dof<3 ; dof++){
@@ -832,10 +832,10 @@ double LCM::PeridigmManager::obcEvaluateFunctional(Epetra_Vector* obcFunctionalD
   int numPoints = 1;
   int numDim = 3;
 
-  Intrepid2::FieldContainer<RealType> physPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> physPoints;
   physPoints.resize(numCells, numPoints, numDim);
 
-  Intrepid2::FieldContainer<RealType> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
   refPoints.resize(numCells, numPoints, numDim);
 
   // Compute the difference in displacements at each peridynamic node
@@ -850,7 +850,7 @@ double LCM::PeridigmManager::obcEvaluateFunctional(Epetra_Vector* obcFunctionalD
     int numNodes = bulkData->num_nodes((*obcDataPoints)[iEvalPt].albanyElement);
     const stk::mesh::Entity* nodes = bulkData->begin_nodes((*obcDataPoints)[iEvalPt].albanyElement);
 
-    Intrepid2::FieldContainer<RealType> cellWorkset;
+    Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cellWorkset;
     cellWorkset.resize(numCells, numNodes, numDim);
     for(int i=0 ; i<numNodes ; i++){
       int globalAlbanyNodeId = bulkData->identifier(nodes[i]) - 1;
@@ -874,13 +874,13 @@ double LCM::PeridigmManager::obcEvaluateFunctional(Epetra_Vector* obcFunctionalD
     }
 
     if(obcFunctionalDerivWrtDisplacement != NULL) {
-      Intrepid2::FieldContainer<RealType> refPoint;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoint;
       refPoint.resize(numPoints, numDim);
       for(int dof=0 ; dof<3 ; dof++)
         refPoint(0, dof) = refPoints(0, 0, dof);
 
-      Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType>>> refBasis = Albany::getIntrepid2Basis((*obcDataPoints)[iEvalPt].cellTopologyData);
-      Intrepid2::FieldContainer<RealType> basisOnRefPoint(numNodes, 1);
+      Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device>>> refBasis = Albany::getIntrepid2Basis((*obcDataPoints)[iEvalPt].cellTopologyData);
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basisOnRefPoint(numNodes, 1);
       refBasis->getValues(basisOnRefPoint, refPoint, Intrepid2::OPERATOR_VALUE);
 
       // Derivatives corresponding to nodal dof in Albany element
@@ -982,16 +982,16 @@ void LCM::PeridigmManager::setCurrentTimeAndDisplacement(double time, const Teuc
       // Can probably store things by block and use worksets to compute things in one big call.
 
       shards::CellTopology cellTopology(&it->cellTopologyData);
-      Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-      Teuchos::RCP<Intrepid2::Cubature<RealType>> cubature = cubFactory.create(cellTopology, cubatureDegree);
+      Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+      Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> >> cubature = cubFactory.create(cellTopology, cubatureDegree);
       const int numDim = cubature->getDimension();
       const int numQuadPoints = cubature->getNumPoints();
       const int numNodes = cellTopology.getNodeCount();
       const int numCells = 1;
 
       // Get the quadrature points and weights
-      Intrepid2::FieldContainer<RealType> quadratureRefPoints;
-      Intrepid2::FieldContainer<RealType> quadratureRefWeights;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> quadratureRefPoints;
+      Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> quadratureRefWeights;
       quadratureRefPoints.resize(numQuadPoints, numDim);
       quadratureRefWeights.resize(numQuadPoints);
       cubature->getCubature(quadratureRefPoints, quadratureRefWeights);
diff --git a/src/QCAD/QCADT_Solver.cpp b/src/QCAD/QCADT_Solver.cpp
index 6147c79..22eae2d 100644
--- a/src/QCAD/QCADT_Solver.cpp
+++ b/src/QCAD/QCADT_Solver.cpp
@@ -60,16 +60,16 @@ namespace QCADT {
 
   /*void CopyStateToContainer(Albany::StateArrays& src,
 			    std::string stateNameToCopy,
-			    std::vector<Intrepid2::FieldContainer<RealType> >& dest);
-  void CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+			    std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest);
+  void CopyContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			    Albany::StateArrays& dest,
 			    std::string stateNameOfCopy);
-  void CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-		     std::vector<Intrepid2::FieldContainer<RealType> >& dest);
-  void AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-			       std::vector<Intrepid2::FieldContainer<RealType> >& dest,
+  void CopyContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+		     std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest);
+  void AddContainerToContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+			       std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest,
 			       double srcFactor, double thisFactor); // dest = thisFactor * dest + srcFactor * src
-  void AddContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+  void AddContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			    Albany::StateArrays& dest,
 			   std::string stateName, double srcFactor, double thisFactor); // dest[stateName] = thisFactor * dest[stateName] + srcFactor * src
 
@@ -81,14 +81,14 @@ namespace QCADT {
 			      Albany::StateArrays& dest, std::string destStateNameToSubtractFrom);
   
   double getMaxDifference(Albany::StateArrays& states, 
-			  std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+			  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 			  std::string stateName);
 
   double getNorm2Difference(Albany::StateArrays& states,   
-			    std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+			    std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 			    std::string stateName);*/
-  //double getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& container, const Teuchos::RCP<const Epetra_Comm>& comm);
-  //int getElementCount(std::vector<Intrepid2::FieldContainer<RealType> >& container);
+  //double getNorm2(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container, const Teuchos::RCP<const Epetra_Comm>& comm);
+  //int getElementCount(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container);
   
   //void ResetEigensolverShift(const Teuchos::RCP<EpetraExt::ModelEvaluator>& Solver, double newShift,
   //			     Teuchos::RCP<Teuchos::ParameterList>& eigList);
@@ -1752,12 +1752,12 @@ bool QCADT::Solver::doPSLoop(const std::string& mode, const InArgs& inArgs,
   eigenDataResult = Teuchos::null;
 
   //Field Containers to store states used in Poisson-Schrodinger loop
-  std::vector<Intrepid2::FieldContainer<RealType> > acceptedSolution;
-  std::vector<Intrepid2::FieldContainer<RealType> > acceptedDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > trialSolution;
-  std::vector<Intrepid2::FieldContainer<RealType> > trialDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > mixDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > prevConductionBand;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > acceptedSolution;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > acceptedDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > trialSolution;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > trialDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > mixDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > prevConductionBand;
 
   //Create Initial Poisson solver & fill its parameters
   subSolvers[ "InitPoisson" ] = CreateSubSolver( getSubSolverParams("InitPoisson") , *solverComm, saved_initial_guess);
@@ -3266,7 +3266,7 @@ void QCADT::SolveModel(const QCADT::SolverSubSolver& ss,
 /*
 void QCADT::CopyStateToContainer(Albany::StateArrays& state_arrays,
 			  std::string stateNameToCopy,
-			  std::vector<Intrepid2::FieldContainer<RealType> >& dest)
+			  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest)
 {
   Albany::StateArrayVec& src = state_arrays.elemStateArrays;
   int numWorksets = src.size();
@@ -3294,7 +3294,7 @@ void QCADT::CopyStateToContainer(Albany::StateArrays& state_arrays,
 
 
 //Note: state must be allocated already
-void QCADT::CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+void QCADT::CopyContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			  Albany::StateArrays& state_arrays,
 			  std::string stateNameOfCopy)
 {
@@ -3317,8 +3317,8 @@ void QCADT::CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType>
 }
 
 
-void QCADT::CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-			 std::vector<Intrepid2::FieldContainer<RealType> >& dest)
+void QCADT::CopyContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+			 std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest)
 {
   int numWorksets = src.size();
 
@@ -3332,8 +3332,8 @@ void QCADT::CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src
 }
 
 // dest = thisFactor * dest + srcFactor * src
-void QCADT::AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-				   std::vector<Intrepid2::FieldContainer<RealType> >& dest,
+void QCADT::AddContainerToContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+				   std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest,
 				   double srcFactor, double thisFactor)
 {
   int numWorksets = src.size();
@@ -3357,7 +3357,7 @@ void QCADT::AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealTy
 
 // dest[stateName] = thisFactor * dest[stateName] + srcFactor * src
 //  Note: state must be allocated already
-void QCADT::AddContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+void QCADT::AddContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			 Albany::StateArrays& state_arrays,
 			 std::string stateName, double srcFactor, double thisFactor)
 {
@@ -3441,7 +3441,7 @@ void QCADT::SubtractStateFromState(Albany::StateArrays& state_arrays,
 }*/
 /*
 double QCADT::getMaxDifference(Albany::StateArrays& state_arrays, 
-		      std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+		      std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 		      std::string stateName)
 {
   double maxDiff = 0.0;
@@ -3472,7 +3472,7 @@ double QCADT::getMaxDifference(Albany::StateArrays& state_arrays,
 
 
 double QCADT::getNorm2Difference(Albany::StateArrays& state_arrays, 
-				std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+				std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 				std::string stateName)
 {
   double norm2 = 0.0;
@@ -3499,7 +3499,7 @@ double QCADT::getNorm2Difference(Albany::StateArrays& state_arrays,
 }
 
 
-double QCADT::getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& container, const Teuchos::RCP<const Epetra_Comm>& comm)
+double QCADT::getNorm2(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container, const Teuchos::RCP<const Epetra_Comm>& comm)
 {
   double norm2 = 0.0;
   int numWorksets = container.size();
@@ -3525,7 +3525,7 @@ double QCADT::getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& contai
 }
 
 
-int QCADT::getElementCount(std::vector<Intrepid2::FieldContainer<RealType> >& container)
+int QCADT::getElementCount(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container)
 {
   int cnt = 0;
   int numWorksets = container.size();
diff --git a/src/QCAD/QCAD_Solver.cpp b/src/QCAD/QCAD_Solver.cpp
index 5d136f6..185563e 100644
--- a/src/QCAD/QCAD_Solver.cpp
+++ b/src/QCAD/QCAD_Solver.cpp
@@ -60,16 +60,16 @@ namespace QCAD {
 
   void CopyStateToContainer(Albany::StateArrays& src,
 			    std::string stateNameToCopy,
-			    std::vector<Intrepid2::FieldContainer<RealType> >& dest);
-  void CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+			    std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest);
+  void CopyContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			    Albany::StateArrays& dest,
 			    std::string stateNameOfCopy);
-  void CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-		     std::vector<Intrepid2::FieldContainer<RealType> >& dest);
-  void AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-			       std::vector<Intrepid2::FieldContainer<RealType> >& dest,
+  void CopyContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+		     std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest);
+  void AddContainerToContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+			       std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest,
 			       double srcFactor, double thisFactor); // dest = thisFactor * dest + srcFactor * src
-  void AddContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+  void AddContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			    Albany::StateArrays& dest,
 			   std::string stateName, double srcFactor, double thisFactor); // dest[stateName] = thisFactor * dest[stateName] + srcFactor * src
 
@@ -81,14 +81,14 @@ namespace QCAD {
 			      Albany::StateArrays& dest, std::string destStateNameToSubtractFrom);
   
   double getMaxDifference(Albany::StateArrays& states, 
-			  std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+			  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 			  std::string stateName);
 
   double getNorm2Difference(Albany::StateArrays& states,   
-			    std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+			    std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 			    std::string stateName);
-  double getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& container, const Teuchos::RCP<const Epetra_Comm>& comm);
-  int getElementCount(std::vector<Intrepid2::FieldContainer<RealType> >& container);
+  double getNorm2(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container, const Teuchos::RCP<const Epetra_Comm>& comm);
+  int getElementCount(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container);
   
   void ResetEigensolverShift(const Teuchos::RCP<EpetraExt::ModelEvaluator>& Solver, double newShift,
 			     Teuchos::RCP<Teuchos::ParameterList>& eigList);
@@ -1783,12 +1783,12 @@ bool QCAD::Solver::doPSLoop(const std::string& mode, const InArgs& inArgs,
   eigenDataResult = Teuchos::null;
 
   //Field Containers to store states used in Poisson-Schrodinger loop
-  std::vector<Intrepid2::FieldContainer<RealType> > acceptedSolution;
-  std::vector<Intrepid2::FieldContainer<RealType> > acceptedDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > trialSolution;
-  std::vector<Intrepid2::FieldContainer<RealType> > trialDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > mixDensity;
-  std::vector<Intrepid2::FieldContainer<RealType> > prevConductionBand;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > acceptedSolution;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > acceptedDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > trialSolution;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > trialDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > mixDensity;
+  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > prevConductionBand;
 
   //Create Initial Poisson solver & fill its parameters
   subSolvers[ "InitPoisson" ] = CreateSubSolver( "InitPoisson", getSubSolverParams("InitPoisson") , *solverComm); //, saved_initial_guess);
@@ -3353,7 +3353,7 @@ void QCAD::SolveModel(const QCAD::SolverSubSolver& ss,
 
 void QCAD::CopyStateToContainer(Albany::StateArrays& state_arrays,
 			  std::string stateNameToCopy,
-			  std::vector<Intrepid2::FieldContainer<RealType> >& dest)
+			  std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest)
 {
   Albany::StateArrayVec& src = state_arrays.elemStateArrays;
   int numWorksets = src.size();
@@ -3381,7 +3381,7 @@ void QCAD::CopyStateToContainer(Albany::StateArrays& state_arrays,
 
 
 //Note: state must be allocated already
-void QCAD::CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+void QCAD::CopyContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			  Albany::StateArrays& state_arrays,
 			  std::string stateNameOfCopy)
 {
@@ -3404,8 +3404,8 @@ void QCAD::CopyContainerToState(std::vector<Intrepid2::FieldContainer<RealType>
 }
 
 
-void QCAD::CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-			 std::vector<Intrepid2::FieldContainer<RealType> >& dest)
+void QCAD::CopyContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+			 std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest)
 {
   int numWorksets = src.size();
 
@@ -3419,8 +3419,8 @@ void QCAD::CopyContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
 }
 
 // dest = thisFactor * dest + srcFactor * src
-void QCAD::AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealType> >& src,
-				   std::vector<Intrepid2::FieldContainer<RealType> >& dest,
+void QCAD::AddContainerToContainer(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
+				   std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& dest,
 				   double srcFactor, double thisFactor)
 {
   int numWorksets = src.size();
@@ -3444,7 +3444,7 @@ void QCAD::AddContainerToContainer(std::vector<Intrepid2::FieldContainer<RealTyp
 
 // dest[stateName] = thisFactor * dest[stateName] + srcFactor * src
 //  Note: state must be allocated already
-void QCAD::AddContainerToState(std::vector<Intrepid2::FieldContainer<RealType> >& src,
+void QCAD::AddContainerToState(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& src,
 			 Albany::StateArrays& state_arrays,
 			 std::string stateName, double srcFactor, double thisFactor)
 {
@@ -3528,7 +3528,7 @@ void QCAD::SubtractStateFromState(Albany::StateArrays& state_arrays,
 }
 
 double QCAD::getMaxDifference(Albany::StateArrays& state_arrays, 
-		      std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+		      std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 		      std::string stateName)
 {
   double maxDiff = 0.0;
@@ -3559,7 +3559,7 @@ double QCAD::getMaxDifference(Albany::StateArrays& state_arrays,
 
 
 double QCAD::getNorm2Difference(Albany::StateArrays& state_arrays, 
-				std::vector<Intrepid2::FieldContainer<RealType> >& prevState,
+				std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& prevState,
 				std::string stateName)
 {
   double norm2 = 0.0;
@@ -3586,7 +3586,7 @@ double QCAD::getNorm2Difference(Albany::StateArrays& state_arrays,
 }
 
 
-double QCAD::getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& container, const Teuchos::RCP<const Epetra_Comm>& comm)
+double QCAD::getNorm2(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container, const Teuchos::RCP<const Epetra_Comm>& comm)
 {
   double norm2 = 0.0;
   int numWorksets = container.size();
@@ -3611,7 +3611,7 @@ double QCAD::getNorm2(std::vector<Intrepid2::FieldContainer<RealType> >& contain
   return global_norm2;
 }
 
-int QCAD::getElementCount(std::vector<Intrepid2::FieldContainer<RealType> >& container)
+int QCAD::getElementCount(std::vector<Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >& container)
 {
   int cnt = 0;
   int numWorksets = container.size();
diff --git a/src/QCAD/evaluators/QCAD_PoissonSourceInterface.hpp b/src/QCAD/evaluators/QCAD_PoissonSourceInterface.hpp
index 0300356..a2dc987 100644
--- a/src/QCAD/evaluators/QCAD_PoissonSourceInterface.hpp
+++ b/src/QCAD/evaluators/QCAD_PoissonSourceInterface.hpp
@@ -85,10 +85,10 @@ protected:
 
 /*
   // dudn for 2D Thomas-Fermi poisson source
-  void calc_dudn_2DThomasFermi(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-			       const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-			       const Intrepid2::FieldContainer<ScalarT>& dof_side,
-			       const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_2DThomasFermi(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+			       const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+			       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+			       const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
 			       const shards::CellTopology & celltopo,
 			       const int cellDims,
 			       int local_side_id, int iSideset);
@@ -97,8 +97,8 @@ protected:
   ScalarT getReferencePotential();
 
   // Compute -q*X0/eps0*Nit, where Nit is the interface trap charge density in [#/cm^2]
-  void calcInterfaceTrapChargDensity(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-			       const Intrepid2::FieldContainer<ScalarT>& dof_side, int iSideset); 
+  void calcInterfaceTrapChargDensity(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+			       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side, int iSideset); 
 
    // Perform the finite element integration over an interface (2D for now, currently not support 1D)
   void evaluateInterfaceContribution(typename Traits::EvalData d);
@@ -110,34 +110,34 @@ protected:
 
   Teuchos::RCP<shards::CellTopology> cellType;
   Teuchos::ArrayRCP<Teuchos::RCP<shards::CellTopology> > sideType;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureCell;
-  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType> > > cubatureSide;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureCell;
+  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > > cubatureSide;
 
   // The basis
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> cubPointsSide;
-  Intrepid2::FieldContainer<RealType> refPointsSide;
-  Intrepid2::FieldContainer<RealType> cubWeightsSide;
-  Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
 
-  Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
-  Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-  Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
 
-  Intrepid2::FieldContainer<ScalarT> dofCell;
-  Intrepid2::FieldContainer<ScalarT> dofSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
 
-  Intrepid2::FieldContainer<ScalarT> data;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> data;
 
   // Output:
-  Intrepid2::FieldContainer<ScalarT>   neumann;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>   neumann;
 
   Teuchos::Array<std::string> sideSetIDs;
   //Teuchos::Array<RealType> inputValues;
diff --git a/src/QCAD/evaluators/QCAD_PoissonSourceInterface_Def.hpp b/src/QCAD/evaluators/QCAD_PoissonSourceInterface_Def.hpp
index a7dbe70..4b12139 100644
--- a/src/QCAD/evaluators/QCAD_PoissonSourceInterface_Def.hpp
+++ b/src/QCAD/evaluators/QCAD_PoissonSourceInterface_Def.hpp
@@ -131,7 +131,7 @@ PoissonSourceInterfaceBase(const Teuchos::ParameterList& p) :
 
   cellType = Teuchos::rcp(new shards::CellTopology (elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureCell = cubFactory.create(*cellType, meshSpecs->cubatureDegree);
 
   int cubatureDegree = (p.get<int>("Cubature Degree") > 0 ) ? p.get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
@@ -344,8 +344,8 @@ evaluateInterfaceContribution(typename Traits::EvalData workset)
 
 template<typename EvalT, typename Traits>
 void PoissonSourceInterfaceBase<EvalT, Traits>::
-calcInterfaceTrapChargDensity(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-			const Intrepid2::FieldContainer<ScalarT>& dof_side, int iSideset) 
+calcInterfaceTrapChargDensity(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+			const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side, int iSideset) 
 {			
   int numCells = qp_data_returned.dimension(0);  // How many cell's worth of data is being computed?
   int numPoints = qp_data_returned.dimension(1); // How many QPs per cell?
diff --git a/src/QCAD/evaluators/QCAD_PoissonSourceNeumann.hpp b/src/QCAD/evaluators/QCAD_PoissonSourceNeumann.hpp
index 309da4b..fc40b33 100644
--- a/src/QCAD/evaluators/QCAD_PoissonSourceNeumann.hpp
+++ b/src/QCAD/evaluators/QCAD_PoissonSourceNeumann.hpp
@@ -92,10 +92,10 @@ protected:
  // Should only specify flux vector components (dudx, dudy, dudz), dudn, or pressure P
 
    // dudn for 2D Thomas-Fermi poisson source
-  void calc_dudn_2DThomasFermi(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-			       const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-			       const Intrepid2::FieldContainer<ScalarT>& dof_side,
-			       const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_2DThomasFermi(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+			       const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+			       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+			       const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
 			       const shards::CellTopology & celltopo,
 			       const int cellDims,
 			       int local_side_id, int iSideset);
@@ -116,37 +116,37 @@ protected:
   PHX::MDField<ScalarT,Cell,Node> elevation_field;
   Teuchos::RCP<shards::CellTopology> cellType;
   Teuchos::ArrayRCP<Teuchos::RCP<shards::CellTopology> > sideType;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureCell;
-  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType> > > cubatureSide;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureCell;
+  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > > cubatureSide;
 
   // The basis
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> cubPointsSide;
-  Intrepid2::FieldContainer<RealType> refPointsSide;
-  Intrepid2::FieldContainer<RealType> cubWeightsSide;
-  Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
 
-  Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
-  Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-  Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
 
-  Intrepid2::FieldContainer<ScalarT> dofCell;
-  Intrepid2::FieldContainer<ScalarT> dofSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
 
-  Intrepid2::FieldContainer<ScalarT> dofCellVec;
-  Intrepid2::FieldContainer<ScalarT> dofSideVec;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCellVec;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSideVec;
   
-  Intrepid2::FieldContainer<ScalarT> data;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> data;
 
   // Output:
-  Intrepid2::FieldContainer<ScalarT>   neumann;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>   neumann;
   PHX::MDField<ScalarT,Cell,Node> surfaceElectronDensity; // electron density in [cm-2]
 
   Teuchos::Array<std::string> sideSetIDs;
diff --git a/src/QCAD/evaluators/QCAD_PoissonSourceNeumann_Def.hpp b/src/QCAD/evaluators/QCAD_PoissonSourceNeumann_Def.hpp
index ba58332..d6f6abc 100644
--- a/src/QCAD/evaluators/QCAD_PoissonSourceNeumann_Def.hpp
+++ b/src/QCAD/evaluators/QCAD_PoissonSourceNeumann_Def.hpp
@@ -125,7 +125,7 @@ PoissonSourceNeumannBase(const Teuchos::ParameterList& p) :
 
   cellType = Teuchos::rcp(new shards::CellTopology (elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureCell = cubFactory.create(*cellType, meshSpecs->cubatureDegree);
 
   int cubatureDegree = (p.get<int>("Cubature Degree") > 0 ) ? p.get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
@@ -250,9 +250,9 @@ evaluateNeumannContribution(typename Traits::EvalData workset)
                                    // once we move logic to BCUtils
 
 
-    Intrepid2::FieldContainer<ScalarT> betaOnSide;
-    Intrepid2::FieldContainer<ScalarT> thicknessOnSide;
-    Intrepid2::FieldContainer<ScalarT> elevationOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> betaOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> thicknessOnSide;
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> elevationOnSide;
 
     const std::vector<Albany::SideStruct>& sideSet = it->second;
 
@@ -367,10 +367,10 @@ evaluateNeumannContribution(typename Traits::EvalData workset)
 
 template<typename EvalT, typename Traits>
 void PoissonSourceNeumannBase<EvalT, Traits>::
-calc_dudn_2DThomasFermi(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-			const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-			const Intrepid2::FieldContainer<ScalarT>& dof_side,
-			const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_2DThomasFermi(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+			const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+			const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+			const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
 			const shards::CellTopology & celltopo,
 			const int cellDims,
 			int local_side_id, int iSideset){
diff --git a/src/QCAD/evaluators/QCAD_SchrodingerResid.hpp b/src/QCAD/evaluators/QCAD_SchrodingerResid.hpp
index 64b4860..6137ad3 100644
--- a/src/QCAD/evaluators/QCAD_SchrodingerResid.hpp
+++ b/src/QCAD/evaluators/QCAD_SchrodingerResid.hpp
@@ -62,9 +62,9 @@ private:
   PHX::MDField<ScalarT,Cell,Node> psiResidual;
 
   // Intermediate workspace
-  Intrepid2::FieldContainer<ScalarT> psiGradWithMass;
-  Intrepid2::FieldContainer<ScalarT> psiV;
-  Intrepid2::FieldContainer<ScalarT> V_barrier;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> psiGradWithMass;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> psiV;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> V_barrier;
 
   //! units
   double energy_unit_in_eV, length_unit_in_m;
diff --git a/src/QCAD/problems/QCAD_PoissonProblem.hpp b/src/QCAD/problems/QCAD_PoissonProblem.hpp
index 27113df..1777e6d 100644
--- a/src/QCAD/problems/QCAD_PoissonProblem.hpp
+++ b/src/QCAD/problems/QCAD_PoissonProblem.hpp
@@ -153,14 +153,14 @@ QCAD::PoissonProblem::constructEvaluators(
    using PHAL::AlbanyTraits;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/QCAD/problems/QCAD_SchrodingerProblem.hpp b/src/QCAD/problems/QCAD_SchrodingerProblem.hpp
index 6b2256b..45b79c7 100644
--- a/src/QCAD/problems/QCAD_SchrodingerProblem.hpp
+++ b/src/QCAD/problems/QCAD_SchrodingerProblem.hpp
@@ -129,14 +129,14 @@ QCAD::SchrodingerProblem::constructEvaluators(
    using PHAL::AlbanyTraits;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/disc/Albany_AbstractMeshStruct.cpp b/src/disc/Albany_AbstractMeshStruct.cpp
index 99234fd..c49e659 100644
--- a/src/disc/Albany_AbstractMeshStruct.cpp
+++ b/src/disc/Albany_AbstractMeshStruct.cpp
@@ -6,5 +6,5 @@
 
 #include "Albany_AbstractMeshStruct.hpp"
 
-Intrepid2::DefaultCubatureFactory<RealType>
+Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> >
   Albany::CellSpecs::cubFactory;
diff --git a/src/disc/Albany_AbstractMeshStruct.hpp b/src/disc/Albany_AbstractMeshStruct.hpp
index d2e02f5..c12ba8d 100644
--- a/src/disc/Albany_AbstractMeshStruct.hpp
+++ b/src/disc/Albany_AbstractMeshStruct.hpp
@@ -79,12 +79,12 @@ class CellSpecs {
 
    private:
 
-     static Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+     static Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
 
      const CellTopologyData &cellTopologyData; // Information about the topology of the elements contained in the workset
      const shards::CellTopology cellType; // the topology of the elements contained in the workset
-     const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis; // The basis
-     const Teuchos::RCP<Intrepid2::Cubature<RealType> > cellCubature; // The cubature of the cells in the workset
+     const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis; // The basis
+     const Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cellCubature; // The cubature of the cells in the workset
      // Make sure this appears after the above, as it depends on the above being initialized prior to
      // dl being initialized
      const Albany::Layouts dl; // the data layout for the elements in the workset
diff --git a/src/disc/stk/Aeras_SpectralDiscretization.cpp b/src/disc/stk/Aeras_SpectralDiscretization.cpp
index b9df8db..e0d17ec 100755
--- a/src/disc/stk/Aeras_SpectralDiscretization.cpp
+++ b/src/disc/stk/Aeras_SpectralDiscretization.cpp
@@ -1875,7 +1875,7 @@ void Aeras::SpectralDiscretization::computeCoordsLines()
   *out << "DEBUG: " << __PRETTY_FUNCTION__ << std::endl;
 #endif
   // Initialization
-  typedef Intrepid2::FieldContainer< double > Field_t;
+  typedef Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> Field_t;
   typedef Albany::AbstractSTKFieldContainer::VectorFieldType VectorFieldType;
   int np  = points_per_edge;
   int deg = np - 1;
@@ -1968,7 +1968,7 @@ void Aeras::SpectralDiscretization::computeCoordsQuads()
   *out << "DEBUG: " << __PRETTY_FUNCTION__ << std::endl;
 #endif
   // Initialization
-  typedef Intrepid2::FieldContainer< double > Field_t;
+  typedef Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> Field_t;
   typedef Albany::AbstractSTKFieldContainer::VectorFieldType VectorFieldType;
   int np  = points_per_edge;
   int np2 = np * np;
@@ -2970,11 +2970,11 @@ bool point_inside(const Teuchos::ArrayRCP<double*> &coords,
   }
 
 
-  const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double> > >
+  const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > >
   Basis(const int C)
   {
     // Static types
-    typedef Intrepid2::FieldContainer< double > Field_t;
+    typedef Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> Field_t;
     typedef Intrepid2::Basis< double, Field_t > Basis_t;
     static const Teuchos::RCP< Basis_t > HGRAD_Basis_4 =
       Teuchos::rcp( new Intrepid2::Basis_HGRAD_QUAD_C1_FEM< double, Field_t >() );
@@ -3005,12 +3005,12 @@ bool point_inside(const Teuchos::ArrayRCP<double*> &coords,
 
     const int C = soln.size();
     const Teuchos::RCP<Intrepid2::Basis<double,
-                                       Intrepid2::FieldContainer<double> > >
+                                       Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > >
       HGRAD_Basis = Basis(C);
 
     const int numPoints = 1;
-    Intrepid2::FieldContainer<double> basisVals (C, numPoints);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisVals (C, numPoints);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
@@ -3028,12 +3028,12 @@ bool point_inside(const Teuchos::ArrayRCP<double*> &coords,
 
     const int C = coords.size();
     const Teuchos::RCP<Intrepid2::Basis<double,
-                                       Intrepid2::FieldContainer<double> > >
+                                       Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > >
       HGRAD_Basis = Basis(C);
 
     const int numPoints = 1;
-    Intrepid2::FieldContainer<double> basisVals (C, numPoints);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisVals (C, numPoints);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
@@ -3052,12 +3052,12 @@ bool point_inside(const Teuchos::ArrayRCP<double*> &coords,
   {
     const int C = coords.size();
     const Teuchos::RCP<Intrepid2::Basis<double,
-                                       Intrepid2::FieldContainer<double> > >
+                                       Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > >
       HGRAD_Basis = Basis(C);
 
     const int numPoints = 1;
-    Intrepid2::FieldContainer<double> basisGrad (C, numPoints, 2);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisGrad (C, numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
diff --git a/src/disc/stk/Albany_STKDiscretization.cpp b/src/disc/stk/Albany_STKDiscretization.cpp
index a644990..1673bbd 100644
--- a/src/disc/stk/Albany_STKDiscretization.cpp
+++ b/src/disc/stk/Albany_STKDiscretization.cpp
@@ -2068,11 +2068,11 @@ namespace {
   }
 
 
-  const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double> > >
+  const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > >
   Basis(const int C)
   {
     // Static types
-    typedef Intrepid2::FieldContainer< double > Field_t;
+    typedef Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> Field_t;
     typedef Intrepid2::Basis< double, Field_t > Basis_t;
     static const Teuchos::RCP< Basis_t > HGRAD_Basis_4 =
       Teuchos::rcp( new Intrepid2::Basis_HGRAD_QUAD_C1_FEM< double, Field_t >() );
@@ -2101,11 +2101,11 @@ namespace {
                const std::pair<double, double> &ref) {
 
     const int C = soln.size();
-    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double> > > HGRAD_Basis = Basis(C);
+    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > > HGRAD_Basis = Basis(C);
 
     const int numPoints        = 1;
-    Intrepid2::FieldContainer<double> basisVals (C, numPoints);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisVals (C, numPoints);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
@@ -2121,11 +2121,11 @@ namespace {
              const std::pair<double, double> &ref){
 
     const int C = coords.size();
-    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double> > > HGRAD_Basis = Basis(C);
+    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > > HGRAD_Basis = Basis(C);
 
     const int numPoints        = 1;
-    Intrepid2::FieldContainer<double> basisVals (C, numPoints);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisVals (C, numPoints);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
@@ -2142,11 +2142,11 @@ namespace {
              const std::pair<double, double> &ref){
 
     const int C = coords.size();
-    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer<double> > > HGRAD_Basis = Basis(C);
+    const Teuchos::RCP<Intrepid2::Basis<double, Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> > > HGRAD_Basis = Basis(C);
 
     const int numPoints        = 1;
-    Intrepid2::FieldContainer<double> basisGrad (C, numPoints, 2);
-    Intrepid2::FieldContainer<double> tempPoints(numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> basisGrad (C, numPoints, 2);
+    Intrepid2::FieldContainer_Kokkos<double, PHX::Layout, PHX::Device> tempPoints(numPoints, 2);
     tempPoints(0,0) = ref.first;
     tempPoints(0,1) = ref.second;
 
diff --git a/src/evaluators/PHAL_CahnHillRhoResid.hpp b/src/evaluators/PHAL_CahnHillRhoResid.hpp
index 11f33be..4e8d6af 100644
--- a/src/evaluators/PHAL_CahnHillRhoResid.hpp
+++ b/src/evaluators/PHAL_CahnHillRhoResid.hpp
@@ -52,7 +52,7 @@ private:
   // Output:
   PHX::MDField<ScalarT,Cell,Node> rhoResidual;
 
-  Intrepid2::FieldContainer<ScalarT> gamma_term;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> gamma_term;
 
   unsigned int numQPs, numDims, numNodes, worksetSize;
 
diff --git a/src/evaluators/PHAL_ComputeBasisFunctions.hpp b/src/evaluators/PHAL_ComputeBasisFunctions.hpp
index 603c5be..d6c0675 100644
--- a/src/evaluators/PHAL_ComputeBasisFunctions.hpp
+++ b/src/evaluators/PHAL_ComputeBasisFunctions.hpp
@@ -60,15 +60,15 @@ private:
   Intrepid2::FieldContainer_Kokkos<MeshScalarT,PHX::Layout,PHX::Device> jacobian;
   Intrepid2::FieldContainer_Kokkos<MeshScalarT,PHX::Layout,PHX::Device> jacobian_inv;
 #else
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
-
-  Intrepid2::FieldContainer<RealType> val_at_cub_points;
-  Intrepid2::FieldContainer<RealType> grad_at_cub_points;
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
+
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> val_at_cub_points;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> grad_at_cub_points;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
 #endif
 
   // Output:
diff --git a/src/evaluators/PHAL_ComputeBasisFunctions_Def.hpp b/src/evaluators/PHAL_ComputeBasisFunctions_Def.hpp
index 3250807..ee1f97c 100644
--- a/src/evaluators/PHAL_ComputeBasisFunctions_Def.hpp
+++ b/src/evaluators/PHAL_ComputeBasisFunctions_Def.hpp
@@ -20,8 +20,8 @@ ComputeBasisFunctions(const Teuchos::ParameterList& p,
   cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >("Cubature")),
   intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType,PHX::Layout,PHX::Device> > > > ("Intrepid2 Basis") ),
 #else
-  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
-  intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >("Intrepid2 Basis") ),
+  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
+  intrepidBasis (p.get<Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >("Intrepid2 Basis") ),
 #endif
   cellType      (p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
   weighted_measure (p.get<std::string>  ("Weights Name"), dl->qp_scalar ),
diff --git a/src/evaluators/PHAL_HeatEqResid.hpp b/src/evaluators/PHAL_HeatEqResid.hpp
index 6e2a1a7..85fd364 100644
--- a/src/evaluators/PHAL_HeatEqResid.hpp
+++ b/src/evaluators/PHAL_HeatEqResid.hpp
@@ -59,8 +59,8 @@ private:
   bool enableTransient;
   bool haverhoCp;
   unsigned int numQPs, numDims, numNodes, worksetSize;
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> aterm;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> aterm;
 };
 }
 
diff --git a/src/evaluators/PHAL_HeatEqResid_Def.hpp b/src/evaluators/PHAL_HeatEqResid_Def.hpp
index abd1eeb..e94f3fa 100644
--- a/src/evaluators/PHAL_HeatEqResid_Def.hpp
+++ b/src/evaluators/PHAL_HeatEqResid_Def.hpp
@@ -163,7 +163,7 @@ evaluateFields(typename Traits::EvalData workset)
   }
 
   if (haveConvection)  {
-    Intrepid2::FieldContainer<ScalarT> convection(worksetSize, numQPs);
+    Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> convection(worksetSize, numQPs);
 
     for (std::size_t cell=workset.numCells; cell < worksetSize; ++cell)
       for (std::size_t qp=0; qp < numQPs; ++qp)
diff --git a/src/evaluators/PHAL_NSContinuityResid.hpp b/src/evaluators/PHAL_NSContinuityResid.hpp
index b1a3876..1f16f14 100644
--- a/src/evaluators/PHAL_NSContinuityResid.hpp
+++ b/src/evaluators/PHAL_NSContinuityResid.hpp
@@ -50,7 +50,7 @@ private:
   PHX::MDField<ScalarT,Cell,Node> CResidual;
 
   unsigned int numQPs, numDims, numNodes;
-  Intrepid2::FieldContainer<ScalarT> divergence;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> divergence;
   bool havePSPG;
 };
 }
diff --git a/src/evaluators/PHAL_NSContravarientMetricTensor.hpp b/src/evaluators/PHAL_NSContravarientMetricTensor.hpp
index 86012c4..51f28e5 100644
--- a/src/evaluators/PHAL_NSContravarientMetricTensor.hpp
+++ b/src/evaluators/PHAL_NSContravarientMetricTensor.hpp
@@ -44,14 +44,14 @@ private:
   // Input:
   //! Coordinate vector at vertices
   PHX::MDField<MeshScalarT,Cell,Vertex,Dim> coordVec;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature;
   Teuchos::RCP<shards::CellTopology> cellType;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> refPoints;
-  Intrepid2::FieldContainer<RealType> refWeights;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian;
-  Intrepid2::FieldContainer<MeshScalarT> jacobian_inv;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPoints;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refWeights;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobian_inv;
 
   // Output:
   PHX::MDField<MeshScalarT,Cell,QuadPoint,Dim,Dim> Gc;
diff --git a/src/evaluators/PHAL_NSContravarientMetricTensor_Def.hpp b/src/evaluators/PHAL_NSContravarientMetricTensor_Def.hpp
index 14caca8..8b8b4fc 100644
--- a/src/evaluators/PHAL_NSContravarientMetricTensor_Def.hpp
+++ b/src/evaluators/PHAL_NSContravarientMetricTensor_Def.hpp
@@ -17,7 +17,7 @@ NSContravarientMetricTensor<EvalT, Traits>::
 NSContravarientMetricTensor(const Teuchos::ParameterList& p) :
   coordVec      (p.get<std::string>                   ("Coordinate Vector Name"),
                  p.get<Teuchos::RCP<PHX::DataLayout> >("Coordinate Data Layout") ),
-  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType> > >("Cubature")),
+  cubature      (p.get<Teuchos::RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature")),
   cellType      (p.get<Teuchos::RCP <shards::CellTopology> > ("Cell Type")),
   Gc            (p.get<std::string>                   ("Contravarient Metric Tensor Name"),
                  p.get<Teuchos::RCP<PHX::DataLayout> >("QP Tensor Data Layout") )
diff --git a/src/evaluators/PHAL_NSForchheimerTerm.hpp b/src/evaluators/PHAL_NSForchheimerTerm.hpp
index e45dde4..4227c7a 100644
--- a/src/evaluators/PHAL_NSForchheimerTerm.hpp
+++ b/src/evaluators/PHAL_NSForchheimerTerm.hpp
@@ -53,7 +53,7 @@ private:
   bool enableTransient;
   bool haveHeat;
 
-  Intrepid2::FieldContainer<ScalarT> normV;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> normV;
  
 };
 }
diff --git a/src/evaluators/PHAL_NSNeutronEqResid.hpp b/src/evaluators/PHAL_NSNeutronEqResid.hpp
index 40f476a..a2bf712 100644
--- a/src/evaluators/PHAL_NSNeutronEqResid.hpp
+++ b/src/evaluators/PHAL_NSNeutronEqResid.hpp
@@ -53,8 +53,8 @@ private:
 
   bool haveNeutSource;
   unsigned int numQPs, numDims, numNodes;
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> abscoeff;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> abscoeff;
 
  };
 }
diff --git a/src/evaluators/PHAL_NSTauM.hpp b/src/evaluators/PHAL_NSTauM.hpp
index 7112e65..9d765f8 100644
--- a/src/evaluators/PHAL_NSTauM.hpp
+++ b/src/evaluators/PHAL_NSTauM.hpp
@@ -47,7 +47,7 @@ private:
   PHX::MDField<ScalarT,Cell,Node> TauM;
 
   unsigned int numQPs, numDims;
-  Intrepid2::FieldContainer<MeshScalarT> normGc;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normGc;
   
 };
 }
diff --git a/src/evaluators/PHAL_NSTauT.hpp b/src/evaluators/PHAL_NSTauT.hpp
index 565ae12..0741964 100644
--- a/src/evaluators/PHAL_NSTauT.hpp
+++ b/src/evaluators/PHAL_NSTauT.hpp
@@ -48,7 +48,7 @@ private:
   PHX::MDField<ScalarT,Cell,Node> TauT;
 
   unsigned int numQPs, numDims;
-  Intrepid2::FieldContainer<MeshScalarT> normGc;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normGc;
 
 };
 }
diff --git a/src/evaluators/PHAL_NSThermalEqResid.hpp b/src/evaluators/PHAL_NSThermalEqResid.hpp
index 4ff56f0..f87e16f 100644
--- a/src/evaluators/PHAL_NSThermalEqResid.hpp
+++ b/src/evaluators/PHAL_NSThermalEqResid.hpp
@@ -59,8 +59,8 @@ private:
   bool haveSource, haveFlow, haveSUPG, haveNeut; 
   bool enableTransient;
   unsigned int numQPs, numDims, numNodes;
-  Intrepid2::FieldContainer<ScalarT> flux;
-  Intrepid2::FieldContainer<ScalarT> convection;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> flux;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> convection;
 
  };
 }
diff --git a/src/evaluators/PHAL_Neumann.hpp b/src/evaluators/PHAL_Neumann.hpp
index 7aad8d4..8b5db35 100644
--- a/src/evaluators/PHAL_Neumann.hpp
+++ b/src/evaluators/PHAL_Neumann.hpp
@@ -80,19 +80,19 @@ protected:
  // Should only specify flux vector components (dudx, dudy, dudz), dudn, or pressure P
 
    // dudn scaled
-  void calc_dudn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_const(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id,
                           ScalarT scale = 1.0);
 
   // robin (also uses flux scaling)
-  void calc_dudn_robin (Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                        const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                        const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                        const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_robin (Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                        const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                        const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                        const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                         const shards::CellTopology & celltopo,
                         const int cellDims,
                         int local_side_id,
@@ -100,54 +100,54 @@ protected:
                         const ScalarT* robin_param_values);
 
    // (dudx, dudy, dudz)
-  void calc_gradu_dotn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_gradu_dotn_const(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id);
 
    // (t_x, t_y, t_z)
-  void calc_traction_components(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_traction_components(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id);
 
    // Pressure P
-  void calc_press(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_press(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id);
 
   //Basal bc
-  void calc_dudn_basal(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-   		       const Intrepid2::FieldContainer<ScalarT>& basalFriction_side,
-   		       const Intrepid2::FieldContainer<ScalarT>& thickness_side,
-   		      const Intrepid2::FieldContainer<ScalarT>& bedTopo_side,
-   		       const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                       const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_basal(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+   		       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& basalFriction_side,
+   		       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& thickness_side,
+   		      const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& bedTopo_side,
+   		       const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                       const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                        const shards::CellTopology & celltopo,
                        const int cellDims,
                        int local_side_id);
 
-  void calc_dudn_basal_scalar_field(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                            const Intrepid2::FieldContainer<ScalarT>& basalFriction_side,
-                            const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                                const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_basal_scalar_field(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                            const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& basalFriction_side,
+                            const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                                const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                                 const shards::CellTopology & celltopo,
                                 const int cellDims,
                                 int local_side_id);
 
   //Lateral bc
-  void calc_dudn_lateral(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                     const Intrepid2::FieldContainer<ScalarT>& thickness_side,
-                     const Intrepid2::FieldContainer<ScalarT>& elevation_side,
-                     const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                         const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+  void calc_dudn_lateral(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                     const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& thickness_side,
+                     const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& elevation_side,
+                     const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                         const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                          const shards::CellTopology & celltopo,
                          const int cellDims,
                          int local_side_id);
@@ -167,37 +167,37 @@ protected:
   PHX::MDField<ScalarT,Cell,Node> bedTopo_field;
   Teuchos::RCP<shards::CellTopology> cellType;
   Teuchos::ArrayRCP<Teuchos::RCP<shards::CellTopology> > sideType;
-  Teuchos::RCP<Intrepid2::Cubature<RealType> > cubatureCell;
-  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType> > > cubatureSide;
+  Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubatureCell;
+  Teuchos::ArrayRCP<Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > > cubatureSide;
 
   // The basis
-  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis;
+  Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis;
 
   // Temporary FieldContainers
-  Intrepid2::FieldContainer<RealType> cubPointsSide;
-  Intrepid2::FieldContainer<RealType> refPointsSide;
-  Intrepid2::FieldContainer<RealType> cubWeightsSide;
-  Intrepid2::FieldContainer<MeshScalarT> physPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide;
-  Intrepid2::FieldContainer<MeshScalarT> jacobianSide_det;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> cubWeightsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> jacobianSide_det;
 
-  Intrepid2::FieldContainer<MeshScalarT> physPointsCell;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> physPointsCell;
 
-  Intrepid2::FieldContainer<MeshScalarT> weighted_measure;
-  Intrepid2::FieldContainer<RealType> basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> trans_basis_refPointsSide;
-  Intrepid2::FieldContainer<MeshScalarT> weighted_trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_measure;
+  Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> trans_basis_refPointsSide;
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> weighted_trans_basis_refPointsSide;
 
-  Intrepid2::FieldContainer<ScalarT> dofCell;
-  Intrepid2::FieldContainer<ScalarT> dofSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCell;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSide;
 
-  Intrepid2::FieldContainer<ScalarT> dofCellVec;
-  Intrepid2::FieldContainer<ScalarT> dofSideVec;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofCellVec;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> dofSideVec;
   
-  Intrepid2::FieldContainer<ScalarT> data;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> data;
 
   // Output:
-  Intrepid2::FieldContainer<ScalarT>   neumann;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>   neumann;
 
   std::string sideSetID;
   Teuchos::Array<RealType> inputValues;
diff --git a/src/evaluators/PHAL_Neumann_Def.hpp b/src/evaluators/PHAL_Neumann_Def.hpp
index 51cf97f..709d124 100644
--- a/src/evaluators/PHAL_Neumann_Def.hpp
+++ b/src/evaluators/PHAL_Neumann_Def.hpp
@@ -320,7 +320,7 @@ NeumannBase(const Teuchos::ParameterList& p) :
 
   cellType = Teuchos::rcp(new shards::CellTopology (elem_top));
 
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
   cubatureCell = cubFactory.create(*cellType, meshSpecs->cubatureDegree);
 
   int cubatureDegree = (p.get<int>("Cubature Degree") > 0 ) ? p.get<int>("Cubature Degree") : meshSpecs->cubatureDegree;
@@ -447,10 +447,10 @@ evaluateNeumannContribution(typename Traits::EvalData workset)
   if(it == ssList.end()) return; // This sideset does not exist in this workset (GAH - this can go away
                                   // once we move logic to BCUtils
 
-  Intrepid2::FieldContainer<ScalarT> betaOnSide;
-  Intrepid2::FieldContainer<ScalarT> thicknessOnSide;
-  Intrepid2::FieldContainer<ScalarT> bedTopoOnSide;
-  Intrepid2::FieldContainer<ScalarT> elevationOnSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> betaOnSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> thicknessOnSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> bedTopoOnSide;
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> elevationOnSide;
 
   const std::vector<Albany::SideStruct>& sideSet = it->second;
 
@@ -550,9 +550,9 @@ evaluateNeumannContribution(typename Traits::EvalData workset)
 
     // Map cell (reference) degree of freedom points to the appropriate side (elem_side)
     else if(bc_type == BASAL || bc_type == BASAL_SCALAR_FIELD) {
-      Intrepid2::FieldContainer<ScalarT> betaOnCell(1, numNodes);
-      Intrepid2::FieldContainer<ScalarT> thicknessOnCell(1, numNodes);
-      Intrepid2::FieldContainer<ScalarT> bedTopoOnCell(1, numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> betaOnCell(1, numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> thicknessOnCell(1, numNodes);
+      Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> bedTopoOnCell(1, numNodes);
       for (std::size_t node=0; node < numNodes; ++node)
       {
         betaOnCell(0,node) = beta_field(elem_LID,node);
@@ -590,8 +590,8 @@ evaluateNeumannContribution(typename Traits::EvalData workset)
     }
 #ifdef ALBANY_FELIX
     else if(bc_type == LATERAL) {
-          Intrepid2::FieldContainer<ScalarT> thicknessOnCell(1, numNodes);
-          Intrepid2::FieldContainer<ScalarT> elevationOnCell(1, numNodes);
+          Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> thicknessOnCell(1, numNodes);
+          Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> elevationOnCell(1, numNodes);
           for (std::size_t node=0; node < numNodes; ++node)
           {
                 thicknessOnCell(0,node) = thickness_field(elem_LID,node);
@@ -729,9 +729,9 @@ getValue(const std::string &n) {
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_traction_components(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_traction_components(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -740,7 +740,7 @@ calc_traction_components(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
   int numPoints = qp_data_returned.dimension(1); // How many QPs per cell?
   int numDOFs = qp_data_returned.dimension(2); // How many DOFs per node to calculate?
 
-  Intrepid2::FieldContainer<ScalarT> traction(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> traction(numCells, numPoints, cellDims);
 
 /*
   double traction[3];
@@ -762,9 +762,9 @@ calc_traction_components(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_gradu_dotn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_gradu_dotn_const(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -773,9 +773,9 @@ calc_gradu_dotn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
   int numPoints = qp_data_returned.dimension(1); // How many QPs per cell?
   int numDOFs = qp_data_returned.dimension(2); // How many DOFs per node to calculate?
 
-  Intrepid2::FieldContainer<ScalarT> grad_T(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> side_normals(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> normal_lengths(numCells, numPoints);
+  Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> grad_T(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> side_normals(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normal_lengths(numCells, numPoints);
 
 /*
   double kdTdx[3];
@@ -810,9 +810,9 @@ calc_gradu_dotn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_dudn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_const(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id,
@@ -833,10 +833,10 @@ calc_dudn_const(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_dudn_robin(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_robin(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                 const shards::CellTopology & celltopo,
                 const int cellDims,
                 int local_side_id,
@@ -861,9 +861,9 @@ calc_dudn_robin(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_press(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                          const Intrepid2::FieldContainer<MeshScalarT>& phys_side_cub_points,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_press(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& phys_side_cub_points,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -872,9 +872,9 @@ calc_press(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
   int numPoints = qp_data_returned.dimension(1); // How many QPs per cell?
   int numDOFs = qp_data_returned.dimension(2); // How many DOFs per node to calculate?
 
-  Intrepid2::FieldContainer<MeshScalarT> side_normals(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> normal_lengths(numCells, numPoints);
-  Intrepid2::FieldContainer<MeshScalarT> ref_normal(cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> side_normals(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normal_lengths(numCells, numPoints);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> ref_normal(cellDims);
 
   // for this side in the reference cell, get the components of the normal direction vector
   Intrepid2::CellTools<MeshScalarT>::getPhysicalSideNormals(side_normals, jacobian_side_refcell,
@@ -934,12 +934,12 @@ calc_press(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_dudn_basal(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                                  const Intrepid2::FieldContainer<ScalarT>& basalFriction_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& thickness_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& bedTopography_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_basal(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& basalFriction_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& thickness_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& bedTopography_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -956,8 +956,8 @@ calc_dudn_basal(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
   const ScalarT& beta2 = robin_vals[3];
   const ScalarT& beta3 = robin_vals[4];
 
-  Intrepid2::FieldContainer<MeshScalarT> side_normals(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> normal_lengths(numCells, numPoints);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> side_normals(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normal_lengths(numCells, numPoints);
 
   // for this side in the reference cell, get the components of the normal direction vector
   Intrepid2::CellTools<MeshScalarT>::getPhysicalSideNormals(side_normals, jacobian_side_refcell,
@@ -1277,10 +1277,10 @@ calc_dudn_basal(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_dudn_basal_scalar_field(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                                  const Intrepid2::FieldContainer<ScalarT>& basalFriction_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_basal_scalar_field(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& basalFriction_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -1293,8 +1293,8 @@ calc_dudn_basal_scalar_field(Intrepid2::FieldContainer<ScalarT> & qp_data_return
 
   const ScalarT& scale = robin_vals[0];
 
-  Intrepid2::FieldContainer<MeshScalarT> side_normals(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> normal_lengths(numCells, numPoints);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> side_normals(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normal_lengths(numCells, numPoints);
 
   // for this side in the reference cell, get the components of the normal direction vector
   Intrepid2::CellTools<MeshScalarT>::getPhysicalSideNormals(side_normals, jacobian_side_refcell,
@@ -1316,11 +1316,11 @@ calc_dudn_basal_scalar_field(Intrepid2::FieldContainer<ScalarT> & qp_data_return
 
 template<typename EvalT, typename Traits>
 void NeumannBase<EvalT, Traits>::
-calc_dudn_lateral(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
-                                  const Intrepid2::FieldContainer<ScalarT>& thickness_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& elevation_side,
-                                  const Intrepid2::FieldContainer<ScalarT>& dof_side,
-                          const Intrepid2::FieldContainer<MeshScalarT>& jacobian_side_refcell,
+calc_dudn_lateral(Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device> & qp_data_returned,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& thickness_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& elevation_side,
+                                  const Intrepid2::FieldContainer_Kokkos<ScalarT, PHX::Layout, PHX::Device>& dof_side,
+                          const Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device>& jacobian_side_refcell,
                           const shards::CellTopology & celltopo,
                           const int cellDims,
                           int local_side_id){
@@ -1330,8 +1330,8 @@ calc_dudn_lateral(Intrepid2::FieldContainer<ScalarT> & qp_data_returned,
 
   //std::cout << "DEBUG: applying const dudn to sideset " << this->sideSetID << ": " << (const_val * scale) << std::endl;
 
-  Intrepid2::FieldContainer<MeshScalarT> side_normals(numCells, numPoints, cellDims);
-  Intrepid2::FieldContainer<MeshScalarT> normal_lengths(numCells, numPoints);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> side_normals(numCells, numPoints, cellDims);
+  Intrepid2::FieldContainer_Kokkos<MeshScalarT, PHX::Layout, PHX::Device> normal_lengths(numCells, numPoints);
 
   // for this side in the reference cell, get the components of the normal direction vector
   Intrepid2::CellTools<MeshScalarT>::getPhysicalSideNormals(side_normals, jacobian_side_refcell,
diff --git a/src/problems/Albany_AdvDiffProblem.hpp b/src/problems/Albany_AdvDiffProblem.hpp
index 9934522..e28cbfd 100644
--- a/src/problems/Albany_AdvDiffProblem.hpp
+++ b/src/problems/Albany_AdvDiffProblem.hpp
@@ -115,15 +115,15 @@ Albany::AdvDiffProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_CahnHillProblem.hpp b/src/problems/Albany_CahnHillProblem.hpp
index 1d282ad..a8ba6d9 100644
--- a/src/problems/Albany_CahnHillProblem.hpp
+++ b/src/problems/Albany_CahnHillProblem.hpp
@@ -125,7 +125,7 @@ Albany::CahnHillProblem::constructEvaluators(
 
    const CellTopologyData * const elem_top = &meshSpecs.ctd;
 
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(*elem_top);
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (elem_top));
 
@@ -133,8 +133,8 @@ Albany::CahnHillProblem::constructEvaluators(
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPtsCell = cellCubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_ComprNSProblem.hpp b/src/problems/Albany_ComprNSProblem.hpp
index ecdd84f..3be5c13 100644
--- a/src/problems/Albany_ComprNSProblem.hpp
+++ b/src/problems/Albany_ComprNSProblem.hpp
@@ -121,15 +121,15 @@ Albany::ComprNSProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_EvaluatorUtils.hpp b/src/problems/Albany_EvaluatorUtils.hpp
index 91dd7ae..716403c 100644
--- a/src/problems/Albany_EvaluatorUtils.hpp
+++ b/src/problems/Albany_EvaluatorUtils.hpp
@@ -165,15 +165,15 @@ namespace Albany {
     Teuchos::RCP< PHX::Evaluator<Traits> >
     constructMapToPhysicalFrameEvaluator(
       const Teuchos::RCP<shards::CellTopology>& cellType,
-      const Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature);
+      const Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature);
 
     //! Function to create parameter list for construction of ComputeBasisFunctions
     //! evaluator with standard Field names
     Teuchos::RCP< PHX::Evaluator<Traits> >
     constructComputeBasisFunctionsEvaluator(
       const Teuchos::RCP<shards::CellTopology>& cellType,
-      const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis,
-      const Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature);
+      const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis,
+      const Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature);
 
   private:
 
diff --git a/src/problems/Albany_EvaluatorUtils_Def.hpp b/src/problems/Albany_EvaluatorUtils_Def.hpp
index 05c766b..70e70be 100644
--- a/src/problems/Albany_EvaluatorUtils_Def.hpp
+++ b/src/problems/Albany_EvaluatorUtils_Def.hpp
@@ -297,7 +297,7 @@ template<typename EvalT, typename Traits>
 Teuchos::RCP< PHX::Evaluator<Traits> >
 Albany::EvaluatorUtils<EvalT,Traits>::constructMapToPhysicalFrameEvaluator(
     const Teuchos::RCP<shards::CellTopology>& cellType,
-    const Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature)
+    const Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature)
 {
     using Teuchos::RCP;
     using Teuchos::rcp;
@@ -308,7 +308,7 @@ Albany::EvaluatorUtils<EvalT,Traits>::constructMapToPhysicalFrameEvaluator(
 
     // Input: X, Y at vertices
     p->set<string>("Coordinate Vector Name", "Coord Vec");
-    p->set<RCP <Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set<RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
     // Output: X, Y at Quad Points (same name as input)
@@ -320,8 +320,8 @@ template<typename EvalT, typename Traits>
 Teuchos::RCP< PHX::Evaluator<Traits> >
 Albany::EvaluatorUtils<EvalT,Traits>::constructComputeBasisFunctionsEvaluator(
     const Teuchos::RCP<shards::CellTopology>& cellType,
-    const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > intrepidBasis,
-    const Teuchos::RCP<Intrepid2::Cubature<RealType> > cubature)
+    const Teuchos::RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > intrepidBasis,
+    const Teuchos::RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature)
 {
     using Teuchos::RCP;
     using Teuchos::rcp;
@@ -332,9 +332,9 @@ Albany::EvaluatorUtils<EvalT,Traits>::constructComputeBasisFunctionsEvaluator(
 
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<string>("Coordinate Vector Name","Coord Vec");
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
diff --git a/src/problems/Albany_GPAMProblem.hpp b/src/problems/Albany_GPAMProblem.hpp
index 69b78d3..4e75767 100644
--- a/src/problems/Albany_GPAMProblem.hpp
+++ b/src/problems/Albany_GPAMProblem.hpp
@@ -115,15 +115,15 @@ Albany::GPAMProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_HeatProblem.hpp b/src/problems/Albany_HeatProblem.hpp
index f7aa47e..f64ffe2 100644
--- a/src/problems/Albany_HeatProblem.hpp
+++ b/src/problems/Albany_HeatProblem.hpp
@@ -134,7 +134,7 @@ Albany::HeatProblem::constructEvaluators(
 
    const CellTopologyData * const elem_top = &meshSpecs.ctd;
 
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(*elem_top);
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (elem_top));
 
@@ -142,8 +142,8 @@ Albany::HeatProblem::constructEvaluators(
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cellCubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPtsCell = cellCubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_Helmholtz2DProblem.hpp b/src/problems/Albany_Helmholtz2DProblem.hpp
index 4076880..574c0cb 100644
--- a/src/problems/Albany_Helmholtz2DProblem.hpp
+++ b/src/problems/Albany_Helmholtz2DProblem.hpp
@@ -110,15 +110,15 @@ Albany::Helmholtz2DProblem::constructEvaluators(
    using PHAL::AlbanyTraits;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology(&meshSpecs.ctd)); 
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
 
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numDim = cubature->getDimension();
    const int numQPts = cubature->getNumPoints();
diff --git a/src/problems/Albany_LinComprNSProblem.hpp b/src/problems/Albany_LinComprNSProblem.hpp
index 7ba3c88..a8efdd6 100644
--- a/src/problems/Albany_LinComprNSProblem.hpp
+++ b/src/problems/Albany_LinComprNSProblem.hpp
@@ -116,15 +116,15 @@ Albany::LinComprNSProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_NavierStokes.hpp b/src/problems/Albany_NavierStokes.hpp
index 21e9960..d1cb971 100644
--- a/src/problems/Albany_NavierStokes.hpp
+++ b/src/problems/Albany_NavierStokes.hpp
@@ -165,15 +165,15 @@ Albany::NavierStokes::constructEvaluators(
  
   const CellTopologyData * const elem_top = &meshSpecs.ctd;
  
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
@@ -358,7 +358,7 @@ Albany::NavierStokes::constructEvaluators(
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<string>("Coordinate Vector Name","Coord Vec");
     p->set< RCP<DataLayout> >("Coordinate Data Layout", dl->vertices_vector);
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
 
@@ -727,17 +727,17 @@ Albany::NavierStokes::constructEvaluators(
     p->set<string>("Side Set ID", meshSpecs.ssNames[0]);
     
     RCP<shards::CellTopology> sideType = rcp(new shards::CellTopology(side_top));
-    RCP <Intrepid2::Cubature<RealType> > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
+    RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
   
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<string>("Node Variable Name", "Neumannx");
     p->set<string>("Coordinate Vector Name", "Coord Vec");
     p->set< RCP<DataLayout> >("Coordinate Data Layout", dl->vertices_vector);
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
     
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Side Cubature", sideCubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Side Cubature", sideCubature);
     
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
@@ -767,17 +767,17 @@ Albany::NavierStokes::constructEvaluators(
     p->set<string>("Side Set ID", meshSpecs.ssNames[0]);
 
     RCP<shards::CellTopology> sideType = rcp(new shards::CellTopology(side_top));
-    RCP <Intrepid2::Cubature<RealType> > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
+    RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
 
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<string>("Node Variable Name", "Neumanny");
     p->set<string>("Coordinate Vector Name", "Coord Vec");
     p->set< RCP<DataLayout> >("Coordinate Data Layout", dl->vertices_vector);
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Side Cubature", sideCubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Side Cubature", sideCubature);
 
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
@@ -807,17 +807,17 @@ Albany::NavierStokes::constructEvaluators(
     p->set<string>("Side Set ID", meshSpecs.ssNames[0]);
 
     RCP<shards::CellTopology> sideType = rcp(new shards::CellTopology(side_top));
-    RCP <Intrepid2::Cubature<RealType> > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
+    RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > sideCubature = cubFactory.create(*sideType, meshSpecs.cubatureDegree);
 
     // Inputs: X, Y at nodes, Cubature, and Basis
     p->set<string>("Node Variable Name", "Neumannz");
     p->set<string>("Coordinate Vector Name", "Coord Vec");
     p->set< RCP<DataLayout> >("Coordinate Data Layout", dl->vertices_vector);
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Cubature", cubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Cubature", cubature);
 
-    p->set< RCP<Intrepid2::Cubature<RealType> > >("Side Cubature", sideCubature);
+    p->set< RCP<Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > >("Side Cubature", sideCubature);
 
-    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > > >
+    p->set< RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > > >
         ("Intrepid2 Basis", intrepidBasis);
 
     p->set<RCP<shards::CellTopology> >("Cell Type", cellType);
diff --git a/src/problems/Albany_PNPProblem.hpp b/src/problems/Albany_PNPProblem.hpp
index 4c19644..088059a 100644
--- a/src/problems/Albany_PNPProblem.hpp
+++ b/src/problems/Albany_PNPProblem.hpp
@@ -120,15 +120,15 @@ Albany::PNPProblem::constructEvaluators(
   using std::map;
   using PHAL::AlbanyTraits;
   
-  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+  RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
     intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
   RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
   
   const int numNodes = intrepidBasis->getCardinality();
   const int worksetSize = meshSpecs.worksetSize;
   
-  Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-  RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+  Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+  RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
   
   const int numQPts = cubature->getNumPoints();
   const int numVertices = cellType->getNodeCount();
diff --git a/src/problems/Albany_ThermoElectrostaticsProblem.hpp b/src/problems/Albany_ThermoElectrostaticsProblem.hpp
index 0a0e694..8f12243 100644
--- a/src/problems/Albany_ThermoElectrostaticsProblem.hpp
+++ b/src/problems/Albany_ThermoElectrostaticsProblem.hpp
@@ -119,14 +119,14 @@ Albany::ThermoElectrostaticsProblem::constructEvaluators(
    using PHAL::AlbanyTraits;
 
    RCP<shards::CellTopology> cellType = rcp(new shards::CellTopology (&meshSpecs.ctd));
-   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer<RealType> > >
+   RCP<Intrepid2::Basis<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > >
      intrepidBasis = Albany::getIntrepid2Basis(meshSpecs.ctd);
 
    const int numNodes = intrepidBasis->getCardinality();
    const int worksetSize = meshSpecs.worksetSize;
 
-   Intrepid2::DefaultCubatureFactory<RealType> cubFactory;
-   RCP <Intrepid2::Cubature<RealType> > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
+   Intrepid2::DefaultCubatureFactory<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout, PHX::Device> > cubFactory;
+   RCP <Intrepid2::Cubature<RealType, Intrepid2::FieldContainer_Kokkos<RealType, PHX::Layout,PHX::Device> > > cubature = cubFactory.create(*cellType, meshSpecs.cubatureDegree);
 
    const int numQPts = cubature->getNumPoints();
    const int numVertices = cellType->getNodeCount();
